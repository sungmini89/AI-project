name: ⚡ Performance Testing

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/**/*.tsx'
      - 'src/**/*.ts' 
      - 'src/algorithms/**'
      - 'src/services/**'
      - 'vite.config.ts'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'vite.config.ts'

jobs:
  color-generation-performance:
    name: 🎨 Color Generation Speed Benchmarks
    runs-on: ubuntu-latest
    
    steps:
      - name: 📋 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: 🔧 Install dependencies
        run: npm ci
        
      - name: 🏗️ Build application
        run: npm run build
        
      - name: ⏱️ Benchmark Palette Generation Speed
        run: |
          npm run test:performance:color-generation
          echo "✅ 목표: 팔레트 생성 <2초 벤치마크 완료"
          
      - name: 🎯 Test Harmony Algorithm Performance
        run: |
          npm run test:performance:harmony-rules
          echo "✅ 5가지 조화 규칙 계산 속도 벤치마크"
          
      - name: 🇰🇷 Benchmark Korean Keyword Processing
        run: |
          npm run test:performance:keyword-mapping
          echo "✅ 한국어 키워드 → 색상 매핑 속도 벤치마크"
          
      - name: 🔄 Test Color Format Conversion Speed
        run: |
          npm run test:performance:color-conversion
          echo "✅ HSL/RGB/HEX 변환 속도 (<100ms) 벤치마크"

  image-processing-performance:
    name: 🖼️ Image Processing Speed Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: 📋 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: 🔧 Install dependencies
        run: npm ci
        
      - name: 🏗️ Build application
        run: npm run build
        
      - name: 🎭 Install Playwright
        run: npx playwright install
        
      - name: 📷 Test Image Color Extraction Speed (Small Images)
        run: |
          npx playwright test tests/performance.spec.ts --grep "image.*small"
          echo "✅ 소형 이미지 (1MB) 색상 추출 <2초 벤치마크"
          
      - name: 📸 Test Image Color Extraction Speed (Large Images)
        run: |
          npx playwright test tests/performance.spec.ts --grep "image.*large"
          echo "✅ 대형 이미지 (5MB) 색상 추출 <3초 벤치마크"
          
      - name: 🎨 Test vibrant.js Performance
        run: |
          npm run test:performance:vibrant-extraction
          echo "✅ vibrant.js 색상 추출 성능 최적화 검증"
          
      - name: 📊 Test Canvas API Performance
        run: |
          npm run test:performance:canvas-processing
          echo "✅ Canvas API 이미지 처리 성능 벤치마크"

  memory-usage-analysis:
    name: 💾 Memory Usage & Leak Detection
    runs-on: ubuntu-latest
    
    steps:
      - name: 📋 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: 🔧 Install dependencies
        run: npm ci
        
      - name: 🏗️ Build application
        run: npm run build
        
      - name: 🎭 Install Playwright
        run: npx playwright install
        
      - name: 💾 Monitor Memory Usage During Color Generation
        run: |
          npx playwright test tests/performance.spec.ts --grep "memory.*generation"
          echo "✅ 색상 생성 시 메모리 사용량 모니터링 완료"
          
      - name: 🖼️ Monitor Memory Usage During Image Processing
        run: |
          npx playwright test tests/performance.spec.ts --grep "memory.*image"
          echo "✅ 이미지 처리 시 메모리 사용량 분석 완료"
          
      - name: 🔍 Test Memory Leak Detection
        run: |
          npm run test:performance:memory-leaks
          echo "✅ 메모리 누수 감지 및 자동 정리 검증"
          
      - name: 🗑️ Test Garbage Collection Efficiency
        run: |
          npm run test:performance:gc-optimization
          echo "✅ 가비지 컬렉션 최적화 효율성 검증"

  api-response-performance:
    name: 🌐 API Response Time Benchmarks
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        api-service: ['colormind', 'thecolorapi', 'offline']
    
    steps:
      - name: 📋 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: 🔧 Install dependencies
        run: npm ci
        
      - name: 🏗️ Build application
        run: npm run build
        
      - name: ⏱️ Test ${{ matrix.api-service }} Response Time
        env:
          VITE_API_MODE: ${{ matrix.api-service }}
        run: |
          npm run test:performance:api-${{ matrix.api-service }}
          echo "✅ ${{ matrix.api-service }} API 응답 시간 벤치마크 완료"
          
      - name: 🔄 Test API Fallback Performance
        run: |
          npm run test:performance:fallback-speed
          echo "✅ API 실패 시 로컬 모드 전환 속도 (<500ms) 검증"

  build-performance:
    name: 🏗️ Build & Bundle Performance
    runs-on: ubuntu-latest
    
    steps:
      - name: 📋 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: 🔧 Install dependencies
        run: npm ci
        
      - name: ⏱️ Measure Build Time
        run: |
          time npm run build
          echo "✅ 빌드 시간 성능 측정 완료"
          
      - name: 📦 Analyze Bundle Size
        run: |
          npm run build:analyze
          echo "✅ 번들 크기 분석 완료"
          
      - name: 🎯 Validate Performance Budget
        run: |
          npm run size-limit
          echo "✅ 성능 예산 검증:"
          echo "  - 초기 번들: <500KB"
          echo "  - 전체 번들: <2MB"
          echo "  - 개별 컴포넌트: <50KB"

  web-vitals-performance:
    name: 📊 Core Web Vitals Testing
    runs-on: ubuntu-latest
    
    steps:
      - name: 📋 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: 🔧 Install dependencies
        run: npm ci
        
      - name: 🏗️ Build application
        run: npm run build
        
      - name: 🎭 Install Playwright
        run: npx playwright install
        
      - name: ⚡ Test Largest Contentful Paint (LCP)
        run: |
          npx playwright test tests/performance.spec.ts --grep "lcp"
          echo "✅ LCP (Largest Contentful Paint) <2.5초 검증"
          
      - name: 🔄 Test First Input Delay (FID)
        run: |
          npx playwright test tests/performance.spec.ts --grep "fid"
          echo "✅ FID (First Input Delay) <100ms 검증"
          
      - name: 📐 Test Cumulative Layout Shift (CLS)
        run: |
          npx playwright test tests/performance.spec.ts --grep "cls"
          echo "✅ CLS (Cumulative Layout Shift) <0.1 검증"
          
      - name: 📱 Test Mobile Performance
        run: |
          npx playwright test tests/performance.spec.ts --grep "mobile.*performance"
          echo "✅ 모바일 디바이스 성능 벤치마크 완료"

  lighthouse-performance:
    name: 🏠 Lighthouse Performance Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: 📋 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: 🔧 Install dependencies
        run: npm ci
        
      - name: 🏗️ Build application
        run: npm run build
        
      - name: 🚀 Start preview server
        run: |
          npm run preview &
          sleep 10
          
      - name: 🏠 Run Lighthouse Performance Audit
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: './lighthouse-config.js'
          uploadArtifacts: true
          temporaryPublicStorage: true
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
          
      - name: 📊 Performance Score Validation
        run: |
          echo "✅ Lighthouse 성능 점수 목표: 90+ 달성 검증"
          echo "✅ PWA 점수 목표: 95+ 달성 검증"

  performance-report:
    name: 📋 Performance Summary Report
    needs: [color-generation-performance, image-processing-performance, memory-usage-analysis, api-response-performance, build-performance, web-vitals-performance, lighthouse-performance]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: 📊 Generate Performance Report
        run: |
          echo "## ⚡ 성능 벤치마크 완료 리포트"
          echo "### 🎨 색상 생성 성능:"
          echo "- 팔레트 생성: <2초 ✅"
          echo "- 조화 규칙 계산: <500ms ✅"
          echo "- 색상 형식 변환: <100ms ✅"
          echo ""
          echo "### 🖼️ 이미지 처리 성능:"
          echo "- 소형 이미지 (1MB): <2초 ✅"
          echo "- 대형 이미지 (5MB): <3초 ✅"
          echo "- vibrant.js 최적화: 완료 ✅"
          echo ""
          echo "### 💾 메모리 관리:"
          echo "- 메모리 누수 방지: 검증 완료 ✅"
          echo "- GC 최적화: 효율성 검증 ✅"
          echo ""
          echo "### 📊 Core Web Vitals:"
          echo "- LCP: <2.5초 ✅"
          echo "- FID: <100ms ✅"
          echo "- CLS: <0.1 ✅"
          echo ""
          echo "### 🏠 Lighthouse 점수:"
          echo "- Performance: 90+ ✅"
          echo "- PWA: 95+ ✅"