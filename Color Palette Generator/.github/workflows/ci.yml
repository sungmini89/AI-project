name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  NODE_VERSION: '18.x'

jobs:
  # 코드 품질 검사
  lint-and-type-check:
    name: 린트 & 타입 검사
    runs-on: ubuntu-latest
    
    steps:
    - name: 체크아웃
      uses: actions/checkout@v4
      
    - name: Node.js 설정
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 의존성 설치
      run: npm ci
      
    - name: 타입 검사
      run: npm run type-check
      
    - name: ESLint 검사
      run: npm run lint
      
    - name: Prettier 검사
      run: npm run format:check

  # 보안 취약점 검사
  security-audit:
    name: 보안 감사
    runs-on: ubuntu-latest
    
    steps:
    - name: 체크아웃
      uses: actions/checkout@v4
      
    - name: Node.js 설정
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 의존성 설치
      run: npm ci
      
    - name: npm audit 실행
      run: npm audit --audit-level=high
      
    - name: 보안 취약점 스캔
      uses: securecodewarrior/github-action-add-sarif@v1
      if: always()
      with:
        sarif-file: 'security-audit.sarif'

  # 단위 테스트
  unit-tests:
    name: 단위 테스트
    runs-on: ubuntu-latest
    
    steps:
    - name: 체크아웃
      uses: actions/checkout@v4
      
    - name: Node.js 설정
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 의존성 설치
      run: npm ci
      
    - name: 단위 테스트 실행
      run: npm run test:unit -- --coverage
      
    - name: 커버리지 업로드
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: unit-tests
        fail_ci_if_error: true

  # 빌드 테스트
  build-test:
    name: 빌드 테스트
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: ['18.x', '20.x']
    
    steps:
    - name: 체크아웃
      uses: actions/checkout@v4
      
    - name: Node.js ${{ matrix.node-version }} 설정
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: 의존성 설치
      run: npm ci
      
    - name: 프로덕션 빌드
      run: npm run build
      
    - name: 빌드 결과 검증
      run: |
        if [ ! -d "dist" ]; then
          echo "빌드 실패: dist 폴더가 생성되지 않음"
          exit 1
        fi
        if [ ! -f "dist/index.html" ]; then
          echo "빌드 실패: index.html이 생성되지 않음"
          exit 1
        fi
        
    - name: 빌드 크기 분석
      run: |
        du -sh dist/
        find dist/ -name "*.js" -exec du -sh {} \;
        
    - name: PWA 매니페스트 검증
      run: |
        if [ ! -f "dist/manifest.json" ]; then
          echo "PWA 매니페스트가 없습니다"
          exit 1
        fi
        
    - name: Service Worker 검증
      run: |
        if [ ! -f "dist/sw.js" ]; then
          echo "Service Worker가 없습니다"
          exit 1
        fi

  # E2E 테스트
  e2e-tests:
    name: E2E 테스트
    runs-on: ubuntu-latest
    needs: [lint-and-type-check, build-test]
    
    strategy:
      matrix:
        browser: [chromium, firefox, webkit]
    
    steps:
    - name: 체크아웃
      uses: actions/checkout@v4
      
    - name: Node.js 설정
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 의존성 설치
      run: npm ci
      
    - name: Playwright 설치
      run: npx playwright install --with-deps ${{ matrix.browser }}
      
    - name: 빌드
      run: npm run build
      
    - name: E2E 테스트 실행
      run: npx playwright test --project=${{ matrix.browser }}
      env:
        PLAYWRIGHT_HTML_REPORT: playwright-report-${{ matrix.browser }}
        
    - name: 테스트 결과 업로드
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report-${{ matrix.browser }}
        path: playwright-report-${{ matrix.browser }}/
        retention-days: 7

  # 성능 테스트
  performance-tests:
    name: 성능 테스트
    runs-on: ubuntu-latest
    needs: [build-test]
    
    steps:
    - name: 체크아웃
      uses: actions/checkout@v4
      
    - name: Node.js 설정
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 의존성 설치
      run: npm ci
      
    - name: 빌드
      run: npm run build
      
    - name: 성능 테스트 실행
      run: npm run test:performance
      
    - name: Lighthouse CI 실행
      run: |
        npm install -g @lhci/cli
        lhci autorun
      env:
        LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  # 배포 준비
  deploy-staging:
    name: 스테이징 배포
    runs-on: ubuntu-latest
    needs: [unit-tests, e2e-tests, security-audit]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    environment:
      name: staging
      url: https://ai-color-palette-staging.vercel.app
    
    steps:
    - name: 체크아웃
      uses: actions/checkout@v4
      
    - name: Node.js 설정
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 의존성 설치
      run: npm ci
      
    - name: 환경변수 설정
      run: |
        echo "VITE_APP_ENV=staging" >> .env.production
        echo "VITE_API_URL=${{ secrets.STAGING_API_URL }}" >> .env.production
        
    - name: 빌드
      run: npm run build
      
    - name: Vercel 배포
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        working-directory: ./
        scope: ${{ secrets.VERCEL_ORG_ID }}
        
    - name: 배포 알림
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployment'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: always()

  # 프로덕션 배포
  deploy-production:
    name: 프로덕션 배포
    runs-on: ubuntu-latest
    needs: [unit-tests, e2e-tests, security-audit, performance-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    environment:
      name: production
      url: https://ai-color-palette.vercel.app
    
    steps:
    - name: 체크아웃
      uses: actions/checkout@v4
      
    - name: Node.js 설정
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 의존성 설치
      run: npm ci
      
    - name: 환경변수 설정
      run: |
        echo "VITE_APP_ENV=production" >> .env.production
        echo "VITE_API_URL=${{ secrets.PRODUCTION_API_URL }}" >> .env.production
        echo "VITE_SENTRY_DSN=${{ secrets.SENTRY_DSN }}" >> .env.production
        
    - name: 프로덕션 빌드
      run: npm run build
      
    - name: 빌드 최적화 검증
      run: |
        echo "빌드 크기 분석"
        du -sh dist/
        echo "JavaScript 번들 크기"
        find dist/assets -name "*.js" -exec ls -la {} \;
        echo "CSS 번들 크기"
        find dist/assets -name "*.css" -exec ls -la {} \;
        
    - name: Vercel 프로덕션 배포
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        vercel-args: '--prod'
        working-directory: ./
        scope: ${{ secrets.VERCEL_ORG_ID }}
        
    - name: 프로덕션 배포 후 테스트
      run: |
        sleep 30  # 배포 완료 대기
        curl -f https://ai-color-palette.vercel.app || exit 1
        curl -f https://ai-color-palette.vercel.app/manifest.json || exit 1
        curl -f https://ai-color-palette.vercel.app/sw.js || exit 1
        
    - name: 배포 성공 알림
      uses: 8398a7/action-slack@v3
      with:
        status: success
        channel: '#deployment'
        text: '🎉 AI Color Palette Generator가 성공적으로 배포되었습니다!'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # 릴리즈 노트 생성
  create-release-notes:
    name: 릴리즈 노트 생성
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    
    steps:
    - name: 체크아웃
      uses: actions/checkout@v4
      
    - name: 릴리즈 노트 자동 생성
      uses: release-drafter/release-drafter@v5
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Docker 이미지 빌드 (선택사항)
  build-docker:
    name: Docker 이미지 빌드
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 체크아웃
      uses: actions/checkout@v4
      
    - name: Docker Buildx 설정
      uses: docker/setup-buildx-action@v3
      
    - name: 도커 허브 로그인
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    - name: 이미지 빌드 및 푸시
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/ai-color-palette:latest
          ${{ secrets.DOCKERHUB_USERNAME }}/ai-color-palette:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max