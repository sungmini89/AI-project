name: Security Checks

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # 매일 오전 2시에 보안 검사 실행
    - cron: '0 2 * * *'

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  # 의존성 보안 검사
  dependency-security:
    name: 의존성 보안 검사
    runs-on: ubuntu-latest
    
    steps:
    - name: 체크아웃
      uses: actions/checkout@v4
      
    - name: Node.js 설정
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
        
    - name: 의존성 설치
      run: npm ci
      
    - name: npm audit 실행
      run: |
        npm audit --audit-level=moderate --json > npm-audit.json || true
        
    - name: Snyk 보안 스캔
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=medium
        
    - name: 보안 리포트 업로드
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: snyk.sarif

  # CodeQL 분석
  codeql-analysis:
    name: CodeQL 분석
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript' ]
    
    steps:
    - name: 체크아웃
      uses: actions/checkout@v4
      
    - name: CodeQL 초기화
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        config-file: ./.github/codeql/codeql-config.yml
        
    - name: 자동 빌드
      uses: github/codeql-action/autobuild@v3
      
    - name: CodeQL 분석 수행
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"

  # 소스코드 보안 스캔
  source-code-security:
    name: 소스코드 보안 스캔
    runs-on: ubuntu-latest
    
    steps:
    - name: 체크아웃
      uses: actions/checkout@v4
      
    - name: Semgrep 보안 스캔
      uses: semgrep/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/owasp-top-ten
          p/react
      env:
        SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}

  # 시크릿 스캔
  secret-scanning:
    name: 시크릿 스캔
    runs-on: ubuntu-latest
    
    steps:
    - name: 체크아웃
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: TruffleHog 시크릿 스캔
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

  # 라이센스 검사
  license-check:
    name: 라이센스 검사
    runs-on: ubuntu-latest
    
    steps:
    - name: 체크아웃
      uses: actions/checkout@v4
      
    - name: Node.js 설정
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
        
    - name: 의존성 설치
      run: npm ci
      
    - name: License Checker 실행
      run: |
        npx license-checker --summary --onlyAllow "MIT;BSD;ISC;Apache-2.0;Unlicense" --excludePrivatePackages

  # 컨테이너 보안 스캔 (Docker가 있는 경우)
  container-security:
    name: 컨테이너 보안 스캔
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: 체크아웃
      uses: actions/checkout@v4
      
    - name: Docker 이미지 빌드
      run: |
        if [ -f "Dockerfile" ]; then
          docker build -t ai-color-palette:test .
        else
          echo "Dockerfile이 없어서 컨테이너 스캔을 건너뜁니다."
          exit 0
        fi
        
    - name: Trivy 컨테이너 스캔
      uses: aquasecurity/trivy-action@master
      if: hashFiles('Dockerfile') != ''
      with:
        image-ref: 'ai-color-palette:test'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: 컨테이너 스캔 결과 업로드
      uses: github/codeql-action/upload-sarif@v3
      if: hashFiles('Dockerfile') != '' && always()
      with:
        sarif_file: 'trivy-results.sarif'

  # 보안 정책 준수 검사
  security-policy-check:
    name: 보안 정책 준수 검사
    runs-on: ubuntu-latest
    
    steps:
    - name: 체크아웃
      uses: actions/checkout@v4
      
    - name: 보안 정책 파일 확인
      run: |
        if [ ! -f "SECURITY.md" ]; then
          echo "SECURITY.md 파일이 없습니다."
          echo "보안 정책 파일을 생성하는 것을 권장합니다."
        fi
        
    - name: 환경변수 보안 검사
      run: |
        # .env 파일이 Git에 포함되지 않았는지 확인
        if git ls-files | grep -E "\.env$" > /dev/null; then
          echo "❌ .env 파일이 Git에 포함되어 있습니다!"
          echo "환경변수 파일은 .gitignore에 추가해야 합니다."
          exit 1
        fi
        echo "✅ 환경변수 파일 보안 검사 통과"
        
    - name: 민감한 파일 검사
      run: |
        sensitive_files=(
          "*.pem"
          "*.p12" 
          "*.key"
          "*.crt"
          "id_rsa"
          "id_dsa"
          "credentials.json"
        )
        
        for pattern in "${sensitive_files[@]}"; do
          if git ls-files | grep -i "$pattern" > /dev/null; then
            echo "❌ 민감한 파일이 발견되었습니다: $pattern"
            exit 1
          fi
        done
        echo "✅ 민감한 파일 검사 통과"

  # 보안 리포트 생성
  security-report:
    name: 보안 리포트 생성
    runs-on: ubuntu-latest
    needs: [dependency-security, codeql-analysis, source-code-security, secret-scanning]
    if: always()
    
    steps:
    - name: 보안 검사 결과 수집
      run: |
        echo "## 🔒 보안 검사 리포트" > security-report.md
        echo "" >> security-report.md
        echo "### 검사 결과 요약" >> security-report.md
        echo "- 의존성 보안 검사: ${{ needs.dependency-security.result }}" >> security-report.md
        echo "- CodeQL 분석: ${{ needs.codeql-analysis.result }}" >> security-report.md
        echo "- 소스코드 보안 스캔: ${{ needs.source-code-security.result }}" >> security-report.md
        echo "- 시크릿 스캔: ${{ needs.secret-scanning.result }}" >> security-report.md
        echo "" >> security-report.md
        echo "### 권장사항" >> security-report.md
        echo "- 모든 의존성을 최신 버전으로 유지하세요" >> security-report.md
        echo "- 정기적으로 보안 패치를 적용하세요" >> security-report.md
        echo "- API 키와 같은 민감한 정보는 환경변수로 관리하세요" >> security-report.md
        
    - name: 보안 리포트 업로드
      uses: actions/upload-artifact@v4
      with:
        name: security-report
        path: security-report.md
        retention-days: 30

  # 취약점 알림
  vulnerability-notification:
    name: 취약점 알림
    runs-on: ubuntu-latest
    needs: [dependency-security, codeql-analysis, source-code-security]
    if: failure()
    
    steps:
    - name: Slack 취약점 알림
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        channel: '#security'
        title: '🚨 보안 취약점 발견'
        text: 'AI Color Palette Generator에서 보안 취약점이 발견되었습니다. 즉시 확인이 필요합니다.'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: env.SLACK_WEBHOOK != ''