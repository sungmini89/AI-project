{
  "version": 3,
  "sources": ["../../compromise/src/API/world.js", "../../compromise/src/API/methods/compute.js", "../../compromise/src/API/methods/loops.js", "../../compromise/src/API/methods/utils.js", "../../compromise/src/API/methods/index.js", "../../compromise/src/API/View.js", "../../compromise/src/_version.js", "../../compromise/src/API/extend.js", "../../compromise/src/API/_lib.js", "../../compromise/src/API/inputs.js", "../../compromise/src/nlp.js", "../../compromise/src/1-one/cache/methods/cacheDoc.js", "../../compromise/src/1-one/cache/methods/index.js", "../../compromise/src/1-one/cache/api.js", "../../compromise/src/1-one/cache/compute.js", "../../compromise/src/1-one/cache/plugin.js", "../../compromise/src/1-one/change/api/case.js", "../../compromise/src/1-one/change/api/lib/insert.js", "../../compromise/src/1-one/change/compute/uuid.js", "../../compromise/src/1-one/change/api/insert.js", "../../compromise/src/1-one/change/api/replace.js", "../../compromise/src/1-one/change/api/lib/remove.js", "../../compromise/src/1-one/change/api/remove.js", "../../compromise/src/1-one/change/api/whitespace.js", "../../compromise/src/1-one/change/api/lib/_sort.js", "../../compromise/src/1-one/change/api/sort.js", "../../compromise/src/1-one/change/api/concat.js", "../../compromise/src/1-one/change/api/harden.js", "../../compromise/src/1-one/change/api/index.js", "../../compromise/src/1-one/change/compute/index.js", "../../compromise/src/1-one/change/plugin.js", "../../compromise/src/1-one/contraction-one/model/contractions.js", "../../compromise/src/1-one/contraction-one/model/number-suffix.js", "../../compromise/src/1-one/contraction-one/model/index.js", "../../compromise/src/1-one/contraction-one/compute/contractions/_splice.js", "../../compromise/src/1-one/contraction-one/compute/contractions/apostrophe-d.js", "../../compromise/src/1-one/contraction-one/compute/contractions/apostrophe-t.js", "../../compromise/src/1-one/contraction-one/compute/contractions/french.js", "../../compromise/src/1-one/contraction-one/compute/contractions/number-range.js", "../../compromise/src/1-one/contraction-one/compute/contractions/number-unit.js", "../../compromise/src/1-one/contraction-one/compute/contractions/index.js", "../../compromise/src/1-one/contraction-one/compute/index.js", "../../compromise/src/1-one/contraction-one/plugin.js", "../../compromise/src/1-one/freeze/compute.js", "../../compromise/src/1-one/freeze/debug.js", "../../compromise/src/1-one/freeze/plugin.js", "../../compromise/src/1-one/lexicon/compute/multi-word.js", "../../compromise/src/1-one/lexicon/compute/single-word.js", "../../compromise/src/1-one/lexicon/compute/index.js", "../../compromise/src/1-one/lexicon/methods/expand.js", "../../compromise/src/1-one/lexicon/methods/index.js", "../../compromise/src/1-one/lexicon/lib.js", "../../compromise/src/1-one/lexicon/plugin.js", "../../compromise/src/1-one/lookup/api/buildTrie/index.js", "../../compromise/src/1-one/lookup/api/scan.js", "../../compromise/src/1-one/lookup/api/index.js", "../../compromise/src/1-one/lookup/api/buildTrie/compress.js", "../../compromise/src/1-one/lookup/plugin.js", "../../compromise/src/1-one/match/api/_lib.js", "../../compromise/src/1-one/match/api/match.js", "../../compromise/src/1-one/match/api/lookaround.js", "../../compromise/src/1-one/match/api/split.js", "../../compromise/src/1-one/match/api/join.js", "../../compromise/src/1-one/match/api/index.js", "../../compromise/src/1-one/match/methods/parseMatch/01-parseBlocks.js", "../../compromise/src/1-one/match/methods/parseMatch/02-parseToken.js", "../../compromise/src/1-one/match/methods/parseMatch/03-splitHyphens.js", "../../compromise/src/1-one/match/methods/parseMatch/04-inflect-root.js", "../../compromise/src/1-one/match/methods/parseMatch/05-postProcess.js", "../../compromise/src/1-one/match/methods/parseMatch/index.js", "../../compromise/src/1-one/match/methods/match/01-failFast.js", "../../compromise/src/1-one/match/methods/match/term/_fuzzy.js", "../../compromise/src/1-one/match/methods/termMethods.js", "../../compromise/src/1-one/match/methods/match/term/doesMatch.js", "../../compromise/src/1-one/match/methods/match/steps/logic/greedy.js", "../../compromise/src/1-one/match/methods/match/_lib.js", "../../compromise/src/1-one/match/methods/match/steps/astrix.js", "../../compromise/src/1-one/match/methods/match/steps/logic/and-or.js", "../../compromise/src/1-one/match/methods/match/steps/or-block.js", "../../compromise/src/1-one/match/methods/match/steps/and-block.js", "../../compromise/src/1-one/match/methods/match/steps/logic/negative-greedy.js", "../../compromise/src/1-one/match/methods/match/steps/negative.js", "../../compromise/src/1-one/match/methods/match/steps/optional-match.js", "../../compromise/src/1-one/match/methods/match/steps/greedy-match.js", "../../compromise/src/1-one/match/methods/match/steps/contraction-skip.js", "../../compromise/src/1-one/match/methods/match/steps/simple-match.js", "../../compromise/src/1-one/match/methods/match/02-from-here.js", "../../compromise/src/1-one/match/methods/match/03-getGroup.js", "../../compromise/src/1-one/match/methods/match/03-notIf.js", "../../compromise/src/1-one/match/methods/match/index.js", "../../compromise/src/1-one/match/methods/index.js", "../../compromise/src/1-one/match/lib.js", "../../compromise/src/1-one/match/plugin.js", "../../compromise/src/1-one/output/api/html.js", "../../compromise/src/1-one/output/api/_text.js", "../../compromise/src/1-one/output/api/_fmts.js", "../../compromise/src/1-one/output/methods/hash.js", "../../compromise/src/1-one/output/api/json.js", "../../compromise/src/1-one/output/api/debug.js", "../../compromise/src/1-one/output/api/wrap.js", "../../compromise/src/1-one/output/api/out.js", "../../compromise/src/1-one/output/api/text.js", "../../compromise/src/1-one/output/api/index.js", "../../compromise/src/1-one/output/methods/debug/client-side.js", "../../compromise/src/1-one/output/methods/debug/_color.js", "../../compromise/src/1-one/output/methods/debug/tags.js", "../../compromise/src/1-one/output/methods/debug/chunks.js", "../../compromise/src/1-one/output/methods/debug/highlight.js", "../../compromise/src/1-one/output/methods/debug/index.js", "../../compromise/src/1-one/output/plugin.js", "../../compromise/src/1-one/pointers/api/lib/_lib.js", "../../compromise/src/1-one/pointers/api/lib/split.js", "../../compromise/src/1-one/pointers/methods/getDoc.js", "../../compromise/src/1-one/pointers/methods/index.js", "../../compromise/src/1-one/pointers/api/lib/union.js", "../../compromise/src/1-one/pointers/api/lib/difference.js", "../../compromise/src/1-one/pointers/api/lib/intersection.js", "../../compromise/src/1-one/pointers/api/index.js", "../../compromise/src/1-one/pointers/plugin.js", "../../compromise/src/1-one/sweep/lib.js", "../../compromise/src/1-one/sweep/api.js", "../../compromise/src/1-one/sweep/methods/buildNet/01-parse.js", "../../compromise/src/1-one/sweep/methods/buildNet/index.js", "../../compromise/src/1-one/sweep/methods/sweep/01-getHooks.js", "../../compromise/src/1-one/sweep/methods/sweep/02-trim-down.js", "../../compromise/src/1-one/sweep/methods/sweep/04-runMatch.js", "../../compromise/src/1-one/sweep/methods/sweep/index.js", "../../compromise/src/1-one/sweep/methods/tagger/canBe.js", "../../compromise/src/1-one/sweep/methods/tagger/index.js", "../../compromise/src/1-one/sweep/methods/index.js", "../../compromise/src/1-one/sweep/plugin.js", "../../compromise/src/1-one/tag/methods/setTag.js", "../../compromise/src/1-one/tag/methods/unTag.js", "../../compromise/src/1-one/tag/methods/canBe.js", "../../grad-school/builds/grad-school.mjs", "../../compromise/src/1-one/tag/methods/addTags/_colors.js", "../../compromise/src/1-one/tag/methods/addTags/02-fmt.js", "../../compromise/src/1-one/tag/methods/addTags/01-validate.js", "../../compromise/src/1-one/tag/methods/addTags/index.js", "../../compromise/src/1-one/tag/methods/index.js", "../../compromise/src/1-one/tag/api/tag.js", "../../compromise/src/1-one/tag/api/index.js", "../../compromise/src/1-one/tag/lib.js", "../../compromise/src/1-one/tag/compute/tagRank.js", "../../compromise/src/1-one/tag/plugin.js", "../../compromise/src/1-one/tokenize/methods/01-sentences/01-simple-split.js", "../../compromise/src/1-one/tokenize/methods/01-sentences/02-simple-merge.js", "../../compromise/src/1-one/tokenize/methods/01-sentences/03-smart-merge.js", "../../compromise/src/1-one/tokenize/methods/01-sentences/04-quote-merge.js", "../../compromise/src/1-one/tokenize/methods/01-sentences/05-parens-merge.js", "../../compromise/src/1-one/tokenize/methods/01-sentences/index.js", "../../compromise/src/1-one/tokenize/methods/02-terms/01-hyphens.js", "../../compromise/src/1-one/tokenize/methods/02-terms/03-ranges.js", "../../compromise/src/1-one/tokenize/methods/02-terms/02-slashes.js", "../../compromise/src/1-one/tokenize/methods/02-terms/index.js", "../../compromise/src/1-one/tokenize/methods/03-whitespace/tokenize.js", "../../compromise/src/1-one/tokenize/methods/03-whitespace/index.js", "../../compromise/src/1-one/tokenize/methods/unicode.js", "../../compromise/src/1-one/tokenize/compute/normal/01-cleanup.js", "../../compromise/src/1-one/tokenize/compute/normal/02-acronyms.js", "../../compromise/src/1-one/tokenize/compute/normal/index.js", "../../compromise/src/1-one/tokenize/methods/parse.js", "../../compromise/src/1-one/tokenize/methods/01-sentences/is-sentence.js", "../../compromise/src/1-one/tokenize/methods/index.js", "../../compromise/src/1-one/tokenize/model/aliases.js", "../../compromise/src/1-one/tokenize/model/abbreviations/misc.js", "../../compromise/src/1-one/tokenize/model/abbreviations/honorifics.js", "../../compromise/src/1-one/tokenize/model/abbreviations/months.js", "../../compromise/src/1-one/tokenize/model/abbreviations/nouns.js", "../../compromise/src/1-one/tokenize/model/abbreviations/organizations.js", "../../compromise/src/1-one/tokenize/model/abbreviations/places.js", "../../compromise/src/1-one/tokenize/model/abbreviations/units.js", "../../compromise/src/1-one/tokenize/model/lexicon.js", "../../compromise/src/1-one/tokenize/model/prefixes.js", "../../compromise/src/1-one/tokenize/model/suffixes.js", "../../compromise/src/1-one/tokenize/model/unicode.js", "../../compromise/src/1-one/tokenize/model/punctuation.js", "../../compromise/src/1-one/tokenize/model/index.js", "../../compromise/src/1-one/tokenize/compute/alias.js", "../../compromise/src/1-one/tokenize/compute/machine.js", "../../compromise/src/1-one/tokenize/compute/freq.js", "../../compromise/src/1-one/tokenize/compute/offset.js", "../../compromise/src/1-one/tokenize/compute/reindex.js", "../../compromise/src/1-one/tokenize/compute/wordCount.js", "../../compromise/src/1-one/tokenize/compute/index.js", "../../compromise/src/1-one/tokenize/plugin.js", "../../compromise/src/1-one/typeahead/compute.js", "../../compromise/src/1-one/typeahead/api.js", "../../compromise/src/1-one/typeahead/lib/allPrefixes.js", "../../compromise/src/1-one/typeahead/lib/index.js", "../../compromise/src/1-one/typeahead/plugin.js", "../../compromise/src/one.js", "../../compromise/src/2-two/preTagger/model/irregulars/plurals.js", "../../compromise/src/2-two/preTagger/model/lexicon/_data.js", "../../efrt/src/pack/fns.js", "../../efrt/src/pack/histogram.js", "../../efrt/src/encoding.js", "../../efrt/src/pack/pack.js", "../../efrt/src/pack/methods.js", "../../efrt/src/pack/trie.js", "../../efrt/src/unpack/symbols.js", "../../efrt/src/unpack/traverse.js", "../../efrt/src/unpack/index.js", "../../compromise/src/2-two/preTagger/model/lexicon/misc.js", "../../compromise/src/2-two/preTagger/model/lexicon/frozenLex.js", "../../compromise/src/2-two/preTagger/model/lexicon/emoticons.js", "../../compromise/src/2-two/preTagger/methods/transform/nouns/toPlural/_rules.js", "../../compromise/src/2-two/preTagger/methods/transform/nouns/toPlural/index.js", "../../compromise/src/2-two/preTagger/model/lexicon/index.js", "../../compromise/src/2-two/preTagger/model/clues/_noun.js", "../../compromise/src/2-two/preTagger/model/clues/_verb.js", "../../compromise/src/2-two/preTagger/model/clues/actor-verb.js", "../../compromise/src/2-two/preTagger/model/clues/_adj.js", "../../compromise/src/2-two/preTagger/model/clues/_gerund.js", "../../compromise/src/2-two/preTagger/model/clues/adj-gerund.js", "../../compromise/src/2-two/preTagger/model/clues/adj-noun.js", "../../compromise/src/2-two/preTagger/model/clues/adj-past.js", "../../compromise/src/2-two/preTagger/model/clues/adj-present.js", "../../compromise/src/2-two/preTagger/model/clues/noun-gerund.js", "../../compromise/src/2-two/preTagger/model/clues/noun-verb.js", "../../compromise/src/2-two/preTagger/model/clues/_person.js", "../../compromise/src/2-two/preTagger/model/clues/person-date.js", "../../compromise/src/2-two/preTagger/model/clues/person-noun.js", "../../compromise/src/2-two/preTagger/model/clues/person-verb.js", "../../compromise/src/2-two/preTagger/model/clues/person-place.js", "../../compromise/src/2-two/preTagger/model/clues/person-adj.js", "../../compromise/src/2-two/preTagger/model/clues/unit-noun.js", "../../compromise/src/2-two/preTagger/model/clues/index.js", "../../compromise/src/2-two/preTagger/model/patterns/suffixes.js", "../../compromise/src/2-two/preTagger/model/patterns/prefixes.js", "../../compromise/src/2-two/preTagger/model/patterns/endsWith.js", "../../compromise/src/2-two/preTagger/model/patterns/neighbours.js", "../../compromise/src/2-two/preTagger/model/models/_data.js", "../../suffix-thumb/src/convert/index.js", "../../suffix-thumb/src/reverse/index.js", "../../suffix-thumb/src/compress/unpack.js", "../../compromise/src/2-two/preTagger/model/models/index.js", "../../compromise/src/2-two/preTagger/model/regex/regex-normal.js", "../../compromise/src/2-two/preTagger/model/regex/regex-text.js", "../../compromise/src/2-two/preTagger/model/regex/regex-numbers.js", "../../compromise/src/2-two/preTagger/model/orgWords.js", "../../compromise/src/2-two/preTagger/model/placeWords.js", "../../compromise/src/2-two/preTagger/methods/transform/nouns/toSingular/_rules.js", "../../compromise/src/2-two/preTagger/methods/transform/nouns/toSingular/index.js", "../../compromise/src/2-two/preTagger/methods/transform/nouns/index.js", "../../compromise/src/2-two/preTagger/methods/transform/verbs/getTense/_guess.js", "../../compromise/src/2-two/preTagger/methods/transform/verbs/getTense/index.js", "../../compromise/src/2-two/preTagger/methods/transform/verbs/toInfinitive/index.js", "../../compromise/src/2-two/preTagger/methods/transform/verbs/conjugate/index.js", "../../compromise/src/2-two/preTagger/methods/transform/verbs/index.js", "../../compromise/src/2-two/preTagger/methods/transform/adjectives/inflect.js", "../../compromise/src/2-two/preTagger/methods/transform/adjectives/conjugate/lib.js", "../../compromise/src/2-two/preTagger/methods/transform/adjectives/conjugate/fromAdverb.js", "../../compromise/src/2-two/preTagger/methods/transform/adjectives/conjugate/toAdverb.js", "../../compromise/src/2-two/preTagger/methods/transform/adjectives/index.js", "../../compromise/src/2-two/preTagger/methods/transform/index.js", "../../compromise/src/2-two/preTagger/methods/expand/byTag.js", "../../compromise/src/2-two/preTagger/methods/expand/index.js", "../../compromise/src/2-two/preTagger/methods/quickSplit.js", "../../compromise/src/2-two/preTagger/methods/looksPlural.js", "../../compromise/src/2-two/preTagger/methods/index.js", "../../compromise/src/2-two/preTagger/model/_expand/irregulars.js", "../../compromise/src/2-two/preTagger/model/_expand/index.js", "../../compromise/src/2-two/preTagger/model/index.js", "../../compromise/src/2-two/preTagger/compute/tagger/1st-pass/01-colons.js", "../../compromise/src/2-two/preTagger/compute/tagger/1st-pass/02-hyphens.js", "../../compromise/src/2-two/preTagger/compute/tagger/2nd-pass/00-tagSwitch.js", "../../compromise/src/2-two/preTagger/compute/tagger/_fastTag.js", "../../compromise/src/2-two/preTagger/compute/tagger/3rd-pass/_fillTags.js", "../../compromise/src/2-two/preTagger/compute/tagger/2nd-pass/01-case.js", "../../compromise/src/2-two/preTagger/compute/tagger/2nd-pass/02-suffix.js", "../../compromise/src/2-two/preTagger/compute/tagger/2nd-pass/03-regex.js", "../../compromise/src/2-two/preTagger/compute/tagger/2nd-pass/04-prefix.js", "../../compromise/src/2-two/preTagger/compute/tagger/2nd-pass/05-year.js", "../../compromise/src/2-two/preTagger/compute/tagger/3rd-pass/07-verb-type.js", "../../compromise/src/2-two/preTagger/compute/tagger/3rd-pass/01-acronym.js", "../../compromise/src/2-two/preTagger/compute/tagger/3rd-pass/02-neighbours.js", "../../compromise/src/2-two/preTagger/compute/tagger/3rd-pass/03-orgWords.js", "../../compromise/src/2-two/preTagger/compute/tagger/3rd-pass/04-placeWords.js", "../../compromise/src/2-two/preTagger/compute/tagger/3rd-pass/05-fallback.js", "../../compromise/src/2-two/preTagger/compute/tagger/3rd-pass/_adhoc.js", "../../compromise/src/2-two/preTagger/compute/tagger/3rd-pass/06-switches.js", "../../compromise/src/2-two/preTagger/compute/tagger/3rd-pass/08-imperative.js", "../../compromise/src/2-two/preTagger/compute/tagger/index.js", "../../compromise/src/2-two/preTagger/compute/root.js", "../../compromise/src/2-two/preTagger/compute/penn.js", "../../compromise/src/2-two/preTagger/compute/index.js", "../../compromise/src/2-two/preTagger/tagSet/nouns.js", "../../compromise/src/2-two/preTagger/tagSet/verbs.js", "../../compromise/src/2-two/preTagger/tagSet/values.js", "../../compromise/src/2-two/preTagger/tagSet/dates.js", "../../compromise/src/2-two/preTagger/tagSet/misc.js", "../../compromise/src/2-two/preTagger/tagSet/index.js", "../../compromise/src/2-two/preTagger/plugin.js", "../../compromise/src/2-two/contraction-two/api/contract.js", "../../compromise/src/2-two/contraction-two/api/index.js", "../../compromise/src/2-two/contraction-two/compute/_splice.js", "../../compromise/src/2-two/contraction-two/compute/apostrophe-s.js", "../../compromise/src/2-two/contraction-two/compute/apostrophe-d.js", "../../compromise/src/2-two/contraction-two/compute/apostrophe-t.js", "../../compromise/src/2-two/contraction-two/compute/isPossessive.js", "../../compromise/src/2-two/contraction-two/compute/index.js", "../../compromise/src/2-two/contraction-two/plugin.js", "../../compromise/src/2-two/postTagger/model/adjective/adjective.js", "../../compromise/src/2-two/postTagger/model/adjective/adj-adverb.js", "../../compromise/src/2-two/postTagger/model/adjective/adj-gerund.js", "../../compromise/src/2-two/postTagger/model/adjective/adj-noun.js", "../../compromise/src/2-two/postTagger/model/adjective/adj-verb.js", "../../compromise/src/2-two/postTagger/model/adverb.js", "../../compromise/src/2-two/postTagger/model/dates/date-phrase.js", "../../compromise/src/2-two/postTagger/model/dates/date.js", "../../compromise/src/2-two/postTagger/model/nouns/nouns.js", "../../compromise/src/2-two/postTagger/model/verbs/noun-gerund.js", "../../compromise/src/2-two/postTagger/model/verbs/verb-noun.js", "../../compromise/src/2-two/postTagger/model/numbers/money.js", "../../compromise/src/2-two/postTagger/model/numbers/fractions.js", "../../compromise/src/2-two/postTagger/model/numbers/numbers.js", "../../compromise/src/2-two/postTagger/model/person/person-phrase.js", "../../compromise/src/2-two/postTagger/model/person/ambig-name.js", "../../compromise/src/2-two/postTagger/model/verbs/verbs.js", "../../compromise/src/2-two/postTagger/model/verbs/auxiliary.js", "../../compromise/src/2-two/postTagger/model/verbs/phrasal.js", "../../compromise/src/2-two/postTagger/model/verbs/imperative.js", "../../compromise/src/2-two/postTagger/model/verbs/adj-gerund.js", "../../compromise/src/2-two/postTagger/model/verbs/passive.js", "../../compromise/src/2-two/postTagger/model/_misc.js", "../../compromise/src/2-two/postTagger/model/nouns/organizations.js", "../../compromise/src/2-two/postTagger/model/nouns/places.js", "../../compromise/src/2-two/postTagger/model/conjunctions.js", "../../compromise/src/2-two/postTagger/model/expressions.js", "../../compromise/src/2-two/postTagger/model/index.js", "../../compromise/src/2-two/postTagger/compute/index.js", "../../compromise/src/2-two/postTagger/api.js", "../../compromise/src/2-two/postTagger/plugin.js", "../../compromise/src/2-two/lazy/maybeMatch.js", "../../compromise/src/2-two/lazy/lazyParse.js", "../../compromise/src/2-two/lazy/plugin.js", "../../compromise/src/2-two/swap/api/swap-verb.js", "../../compromise/src/2-two/swap/api/swap.js", "../../compromise/src/2-two/swap/plugin.js", "../../compromise/src/two.js", "../../compromise/src/3-three/adjectives/plugin.js", "../../compromise/src/3-three/adverbs/plugin.js", "../../compromise/src/3-three/chunker/api/clauses.js", "../../compromise/src/3-three/chunker/api/chunks.js", "../../compromise/src/3-three/chunker/api/api.js", "../../compromise/src/3-three/chunker/compute/01-easy.js", "../../compromise/src/3-three/chunker/compute/02-neighbours.js", "../../compromise/src/3-three/chunker/compute/03-matcher.js", "../../compromise/src/3-three/chunker/compute/04-fallback.js", "../../compromise/src/3-three/chunker/compute/05-fixUp.js", "../../compromise/src/3-three/chunker/compute/index.js", "../../compromise/src/3-three/chunker/plugin.js", "../../compromise/src/3-three/misc/acronyms/index.js", "../../compromise/src/3-three/misc/parentheses/fns.js", "../../compromise/src/3-three/misc/parentheses/index.js", "../../compromise/src/3-three/misc/possessives/index.js", "../../compromise/src/3-three/misc/quotations/fns.js", "../../compromise/src/3-three/misc/quotations/index.js", "../../compromise/src/3-three/misc/selections/index.js", "../../compromise/src/3-three/misc/slashes/index.js", "../../compromise/src/3-three/misc/plugin.js", "../../compromise/src/3-three/normalize/methods.js", "../../compromise/src/3-three/normalize/api.js", "../../compromise/src/3-three/normalize/plugin.js", "../../compromise/src/3-three/nouns/find.js", "../../compromise/src/3-three/nouns/api/isSubordinate.js", "../../compromise/src/3-three/nouns/api/isPlural.js", "../../compromise/src/3-three/nouns/api/parse.js", "../../compromise/src/3-three/nouns/api/toJSON.js", "../../compromise/src/3-three/nouns/api/hasPlural.js", "../../compromise/src/3-three/nouns/api/toPlural.js", "../../compromise/src/3-three/nouns/api/toSingular.js", "../../compromise/src/3-three/nouns/api/api.js", "../../compromise/src/3-three/nouns/plugin.js", "../../compromise/src/3-three/numbers/fractions/find.js", "../../compromise/src/3-three/numbers/numbers/parse/toNumber/findModifiers.js", "../../compromise/src/3-three/numbers/numbers/parse/toNumber/data.js", "../../compromise/src/3-three/numbers/numbers/parse/toNumber/validate.js", "../../compromise/src/3-three/numbers/numbers/parse/toNumber/parseDecimals.js", "../../compromise/src/3-three/numbers/numbers/parse/toNumber/parseNumeric.js", "../../compromise/src/3-three/numbers/numbers/parse/toNumber/index.js", "../../compromise/src/3-three/numbers/fractions/parse.js", "../../compromise/src/3-three/numbers/numbers/_toString.js", "../../compromise/src/3-three/numbers/numbers/format/toText/data.js", "../../compromise/src/3-three/numbers/numbers/format/toText/index.js", "../../compromise/src/3-three/numbers/fractions/convert/toCardinal.js", "../../compromise/src/3-three/numbers/numbers/format/toOrdinal/textOrdinal.js", "../../compromise/src/3-three/numbers/fractions/convert/toOrdinal.js", "../../compromise/src/3-three/numbers/fractions/api.js", "../../compromise/src/3-three/numbers/numbers/find.js", "../../compromise/src/3-three/numbers/numbers/parse/index.js", "../../compromise/src/3-three/numbers/numbers/format/toOrdinal/numOrdinal.js", "../../compromise/src/3-three/numbers/numbers/format/suffix.js", "../../compromise/src/3-three/numbers/numbers/format/index.js", "../../compromise/src/3-three/numbers/numbers/isUnit.js", "../../compromise/src/3-three/numbers/numbers/api.js", "../../compromise/src/3-three/numbers/plugin.js", "../../compromise/src/3-three/redact/plugin.js", "../../compromise/src/3-three/sentences/questions.js", "../../compromise/src/3-three/sentences/parse/mainClause.js", "../../compromise/src/3-three/sentences/parse/index.js", "../../compromise/src/3-three/sentences/conjugate/toPast.js", "../../compromise/src/3-three/sentences/conjugate/toPresent.js", "../../compromise/src/3-three/sentences/conjugate/toFuture.js", "../../compromise/src/3-three/sentences/conjugate/toNegative.js", "../../compromise/src/3-three/sentences/conjugate/toInfinitive.js", "../../compromise/src/3-three/sentences/api.js", "../../compromise/src/3-three/sentences/plugin.js", "../../compromise/src/3-three/topics/people/find.js", "../../compromise/src/3-three/topics/people/parse.js", "../../compromise/src/3-three/topics/people/gender.js", "../../compromise/src/3-three/topics/people/api.js", "../../compromise/src/3-three/topics/places/find.js", "../../compromise/src/3-three/topics/places/api.js", "../../compromise/src/3-three/topics/orgs/api.js", "../../compromise/src/3-three/topics/topics.js", "../../compromise/src/3-three/topics/plugin.js", "../../compromise/src/3-three/verbs/find.js", "../../compromise/src/3-three/verbs/api/parse/root.js", "../../compromise/src/3-three/verbs/api/parse/adverbs.js", "../../compromise/src/3-three/verbs/api/parse/index.js", "../../compromise/src/3-three/verbs/api/parse/grammar/forms.js", "../../compromise/src/3-three/verbs/api/parse/grammar/index.js", "../../compromise/src/3-three/verbs/api/parse/getSubject.js", "../../compromise/src/3-three/verbs/api/lib.js", "../../compromise/src/3-three/verbs/api/toJSON.js", "../../compromise/src/3-three/verbs/api/conjugate/toInfinitive.js", "../../compromise/src/3-three/verbs/api/conjugate/toPast.js", "../../compromise/src/3-three/verbs/api/conjugate/toParticiple.js", "../../compromise/src/3-three/verbs/api/conjugate/toPresent.js", "../../compromise/src/3-three/verbs/api/conjugate/toFuture.js", "../../compromise/src/3-three/verbs/api/conjugate/toGerund.js", "../../compromise/src/3-three/verbs/api/conjugate/toNegative.js", "../../compromise/src/3-three/verbs/api/api.js", "../../compromise/src/3-three/verbs/plugin.js", "../../compromise/src/3-three/coreference/compute/lib.js", "../../compromise/src/3-three/coreference/compute/findPerson.js", "../../compromise/src/3-three/coreference/compute/findThey.js", "../../compromise/src/3-three/coreference/compute/index.js", "../../compromise/src/3-three/coreference/api/pronouns.js", "../../compromise/src/3-three/coreference/plugin.js", "../../compromise/src/three.js"],
  "sourcesContent": ["let methods = {\n  one: {},\n  two: {},\n  three: {},\n  four: {},\n}\n\nlet model = {\n  one: {},\n  two: {},\n  three: {},\n}\nlet compute = {}\nlet hooks = []\n\nexport default { methods, model, compute, hooks }\n", "const isArray = input => Object.prototype.toString.call(input) === '[object Array]'\n\nconst fns = {\n  /** add metadata to term objects */\n  compute: function (input) {\n    const { world } = this\n    const compute = world.compute\n    // do one method\n    if (typeof input === 'string' && compute.hasOwnProperty(input)) {\n      compute[input](this)\n    }\n    // allow a list of methods\n    else if (isArray(input)) {\n      input.forEach(name => {\n        if (world.compute.hasOwnProperty(name)) {\n          compute[name](this)\n        } else {\n          console.warn('no compute:', input) // eslint-disable-line\n        }\n      })\n    }\n    // allow a custom compute function\n    else if (typeof input === 'function') {\n      input(this)\n    } else {\n      console.warn('no compute:', input) // eslint-disable-line\n    }\n    return this\n  },\n}\nexport default fns\n", "// wrappers for loops in javascript arrays\n\nconst forEach = function (cb) {\n  let ptrs = this.fullPointer\n  ptrs.forEach((ptr, i) => {\n    let view = this.update([ptr])\n    cb(view, i)\n  })\n  return this\n}\n\nconst map = function (cb, empty) {\n  let ptrs = this.fullPointer\n  let res = ptrs.map((ptr, i) => {\n    let view = this.update([ptr])\n    let out = cb(view, i)\n    // if we returned nothing, return a view\n    if (out === undefined) {\n      return this.none()\n    }\n    return out\n  })\n  if (res.length === 0) {\n    return empty || this.update([])\n  }\n  // return an array of values, or View objects?\n  // user can return either from their callback\n  if (res[0] !== undefined) {\n    // array of strings\n    if (typeof res[0] === 'string') {\n      return res\n    }\n    // array of objects\n    if (typeof res[0] === 'object' && (res[0] === null || !res[0].isView)) {\n      return res\n    }\n  }\n  // return a View object\n  let all = []\n  res.forEach(ptr => {\n    all = all.concat(ptr.fullPointer)\n  })\n  return this.toView(all)\n}\n\nconst filter = function (cb) {\n  let ptrs = this.fullPointer\n  ptrs = ptrs.filter((ptr, i) => {\n    let view = this.update([ptr])\n    return cb(view, i)\n  })\n  let res = this.update(ptrs)\n  return res\n}\n\nconst find = function (cb) {\n  let ptrs = this.fullPointer\n  let found = ptrs.find((ptr, i) => {\n    let view = this.update([ptr])\n    return cb(view, i)\n  })\n  return this.update([found])\n}\n\nconst some = function (cb) {\n  let ptrs = this.fullPointer\n  return ptrs.some((ptr, i) => {\n    let view = this.update([ptr])\n    return cb(view, i)\n  })\n}\n\nconst random = function (n = 1) {\n  let ptrs = this.fullPointer\n  let r = Math.floor(Math.random() * ptrs.length)\n  //prevent it from going over the end\n  if (r + n > this.length) {\n    r = this.length - n\n    r = r < 0 ? 0 : r\n  }\n  ptrs = ptrs.slice(r, r + n)\n  return this.update(ptrs)\n}\nexport default { forEach, map, filter, find, some, random }\n", "const utils = {\n  /** */\n  termList: function () {\n    return this.methods.one.termList(this.docs)\n  },\n  /** return individual terms*/\n  terms: function (n) {\n    let m = this.match('.')\n    // this is a bit faster than .match('.') \n    // let ptrs = []\n    // this.docs.forEach((terms) => {\n    //   terms.forEach((term) => {\n    //     let [y, x] = term.index || []\n    //     ptrs.push([y, x, x + 1])\n    //   })\n    // })\n    // let m = this.update(ptrs)\n    return typeof n === 'number' ? m.eq(n) : m\n  },\n\n  /** */\n  groups: function (group) {\n    if (group || group === 0) {\n      return this.update(this._groups[group] || [])\n    }\n    // return an object of Views\n    let res = {}\n    Object.keys(this._groups).forEach(k => {\n      res[k] = this.update(this._groups[k])\n    })\n    // this._groups = null\n    return res\n  },\n  /** */\n  eq: function (n) {\n    let ptr = this.pointer\n    if (!ptr) {\n      ptr = this.docs.map((_doc, i) => [i])\n    }\n    if (ptr[n]) {\n      return this.update([ptr[n]])\n    }\n    return this.none()\n  },\n  /** */\n  first: function () {\n    return this.eq(0)\n  },\n  /** */\n  last: function () {\n    let n = this.fullPointer.length - 1\n    return this.eq(n)\n  },\n\n  /** grab term[0] for every match */\n  firstTerms: function () {\n    return this.match('^.')\n  },\n\n  /** grab the last term for every match  */\n  lastTerms: function () {\n    return this.match('.$')\n  },\n\n  /** */\n  slice: function (min, max) {\n    let pntrs = this.pointer || this.docs.map((_o, n) => [n])\n    pntrs = pntrs.slice(min, max)\n    return this.update(pntrs)\n  },\n\n  /** return a view of the entire document */\n  all: function () {\n    return this.update().toView()\n  },\n  /**  */\n  fullSentences: function () {\n    let ptrs = this.fullPointer.map(a => [a[0]]) //lazy!\n    return this.update(ptrs).toView()\n  },\n  /** return a view of no parts of the document */\n  none: function () {\n    return this.update([])\n  },\n\n  /** are these two views looking at the same words? */\n  isDoc: function (b) {\n    if (!b || !b.isView) {\n      return false\n    }\n    let aPtr = this.fullPointer\n    let bPtr = b.fullPointer\n    if (!aPtr.length === bPtr.length) {\n      return false\n    }\n    // ensure pointers are the same\n    return aPtr.every((ptr, i) => {\n      if (!bPtr[i]) {\n        return false\n      }\n      // ensure [n, start, end] are all the same\n      return ptr[0] === bPtr[i][0] && ptr[1] === bPtr[i][1] && ptr[2] === bPtr[i][2]\n    })\n  },\n\n  /** how many seperate terms does the document have? */\n  wordCount: function () {\n    return this.docs.reduce((count, terms) => {\n      count += terms.filter(t => t.text !== '').length\n      return count\n    }, 0)\n  },\n\n  // is the pointer the full sentence?\n  isFull: function () {\n    let ptrs = this.pointer\n    if (!ptrs) {\n      return true\n    }\n    // must start at beginning\n    if (ptrs.length === 0 || ptrs[0][0] !== 0) {\n      return false\n    }\n    let wantTerms = 0\n    let haveTerms = 0\n    this.document.forEach(terms => wantTerms += terms.length)\n    this.docs.forEach(terms => haveTerms += terms.length)\n    return wantTerms === haveTerms\n    // for (let i = 0; i < ptrs.length; i += 1) {\n    //   let [n, start, end] = ptrs[i]\n    //   // it's not the start\n    //   if (n !== i || start !== 0) {\n    //     return false\n    //   }\n    //   // it's too short\n    //   if (document[n].length > end) {\n    //     return false\n    //   }\n    // }\n    // return true\n  },\n\n  // return the nth elem of a doc\n  getNth: function (n) {\n    if (typeof n === 'number') {\n      return this.eq(n)\n    } else if (typeof n === 'string') {\n      return this.if(n)\n    }\n    return this\n  }\n\n}\nutils.group = utils.groups\nutils.fullSentence = utils.fullSentences\nutils.sentence = utils.fullSentences\nutils.lastTerm = utils.lastTerms\nutils.firstTerm = utils.firstTerms\nexport default utils\n", "import compute from './compute.js'\nimport loops from './loops.js'\nimport util from './utils.js'\n\nconst methods = Object.assign({}, util, compute, loops)\n\n// aliases\nmethods.get = methods.eq\nexport default methods\n", "import world from './world.js'\nimport api from './methods/index.js'\n\nclass View {\n  constructor(document, pointer, groups = {}) {\n    // invisible props\n    let props = [\n      ['document', document],\n      ['world', world],\n      ['_groups', groups],\n      ['_cache', null],\n      ['viewType', 'View'],\n    ]\n    props.forEach(a => {\n      Object.defineProperty(this, a[0], {\n        value: a[1],\n        writable: true,\n      })\n    })\n    this.ptrs = pointer\n  }\n  /* getters:  */\n  get docs() {\n    let docs = this.document\n    if (this.ptrs) {\n      docs = world.methods.one.getDoc(this.ptrs, this.document)\n    }\n    return docs\n  }\n  get pointer() {\n    return this.ptrs\n  }\n  get methods() {\n    return this.world.methods\n  }\n  get model() {\n    return this.world.model\n  }\n  get hooks() {\n    return this.world.hooks\n  }\n  get isView() {\n    return true //this comes in handy sometimes\n  }\n  // is the view not-empty?\n  get found() {\n    return this.docs.length > 0\n  }\n  // how many matches we have\n  get length() {\n    return this.docs.length\n  }\n  // return a more-hackable pointer\n  get fullPointer() {\n    let { docs, ptrs, document } = this\n    // compute a proper pointer, from docs\n    let pointers = ptrs || docs.map((_d, n) => [n])\n    // do we need to repair it, first?\n    return pointers.map(a => {\n      let [n, start, end, id, endId] = a\n      start = start || 0\n      end = end || (document[n] || []).length\n      //add frozen id, for good-measure\n      if (document[n] && document[n][start]) {\n        id = id || document[n][start].id\n        if (document[n][end - 1]) {\n          endId = endId || document[n][end - 1].id\n        }\n      }\n      return [n, start, end, id, endId]\n    })\n  }\n  // create a new View, from this one\n  update(pointer) {\n    let m = new View(this.document, pointer)\n    // send the cache down, too?\n    if (this._cache && pointer && pointer.length > 0) {\n      // only keep cache if it's a full-sentence\n      let cache = []\n      pointer.forEach((ptr, i) => {\n        let [n, start, end] = ptr\n        if (ptr.length === 1) {\n          cache[i] = this._cache[n]\n        } else if (start === 0 && this.document[n].length === end) {\n          cache[i] = this._cache[n]\n        }\n      })\n      if (cache.length > 0) {\n        m._cache = cache\n      }\n    }\n    m.world = this.world\n    return m\n  }\n  // create a new View, from this one\n  toView(pointer) {\n    return new View(this.document, pointer || this.pointer)\n  }\n  fromText(input) {\n    const { methods } = this\n    //assume ./01-tokenize is installed\n    let document = methods.one.tokenize.fromString(input, this.world)\n    let doc = new View(document)\n    doc.world = this.world\n    doc.compute(['normal', 'freeze', 'lexicon'])\n    if (this.world.compute.preTagger) {\n      doc.compute('preTagger')\n    }\n    doc.compute('unfreeze')\n    return doc\n  }\n  clone() {\n    // clone the whole document\n    let document = this.document.slice(0) //node 17: structuredClone(document);\n    document = document.map(terms => {\n      return terms.map(term => {\n        term = Object.assign({}, term)\n        term.tags = new Set(term.tags)\n        return term\n      })\n    })\n    // clone only sub-document ?\n    let m = this.update(this.pointer)\n    m.document = document\n    m._cache = this._cache //clone this too?\n    return m\n  }\n}\nObject.assign(View.prototype, api)\nexport default View\n", "export default '14.14.4'", "const isObject = function (item) {\n  return item && typeof item === 'object' && !Array.isArray(item)\n}\n\n// recursive merge of objects\nfunction mergeDeep(model, plugin) {\n  if (isObject(plugin)) {\n    for (const key in plugin) {\n      if (isObject(plugin[key])) {\n        if (!model[key]) Object.assign(model, { [key]: {} })\n        mergeDeep(model[key], plugin[key]) //recursion\n      } else {\n        Object.assign(model, { [key]: plugin[key] })\n      }\n    }\n  }\n  return model\n}\n// const merged = mergeDeep({ a: 1 }, { b: { c: { d: { e: 12345 } } } })\n// console.dir(merged, { depth: 5 })\n\n// vroom\nfunction mergeQuick(model, plugin) {\n  for (const key in plugin) {\n    model[key] = model[key] || {}\n    Object.assign(model[key], plugin[key])\n  }\n  return model\n}\n\nconst addIrregulars = function (model, conj) {\n  let m = model.two.models || {}\n  Object.keys(conj).forEach(k => {\n    // verb forms\n    if (conj[k].pastTense) {\n      if (m.toPast) {\n        m.toPast.ex[k] = conj[k].pastTense\n      }\n      if (m.fromPast) {\n        m.fromPast.ex[conj[k].pastTense] = k\n      }\n    }\n    if (conj[k].presentTense) {\n      if (m.toPresent) {\n        m.toPresent.ex[k] = conj[k].presentTense\n      }\n      if (m.fromPresent) {\n        m.fromPresent.ex[conj[k].presentTense] = k\n      }\n    }\n    if (conj[k].gerund) {\n      if (m.toGerund) {\n        m.toGerund.ex[k] = conj[k].gerund\n      }\n      if (m.fromGerund) {\n        m.fromGerund.ex[conj[k].gerund] = k\n      }\n    }\n    // adjective forms\n    if (conj[k].comparative) {\n      if (m.toComparative) {\n        m.toComparative.ex[k] = conj[k].comparative\n      }\n      if (m.fromComparative) {\n        m.fromComparative.ex[conj[k].comparative] = k\n      }\n    }\n    if (conj[k].superlative) {\n      if (m.toSuperlative) {\n        m.toSuperlative.ex[k] = conj[k].superlative\n      }\n      if (m.fromSuperlative) {\n        m.fromSuperlative.ex[conj[k].superlative] = k\n      }\n    }\n  })\n}\n\nconst extend = function (plugin, world, View, nlp) {\n  const { methods, model, compute, hooks } = world\n  if (plugin.methods) {\n    mergeQuick(methods, plugin.methods)\n  }\n  if (plugin.model) {\n    mergeDeep(model, plugin.model)\n  }\n  if (plugin.irregulars) {\n    addIrregulars(model, plugin.irregulars)\n  }\n  // shallow-merge compute\n  if (plugin.compute) {\n    Object.assign(compute, plugin.compute)\n  }\n  // append new hooks\n  if (hooks) {\n    world.hooks = hooks.concat(plugin.hooks || [])\n  }\n  // assign new class methods\n  if (plugin.api) {\n    plugin.api(View)\n  }\n  if (plugin.lib) {\n    Object.keys(plugin.lib).forEach(k => (nlp[k] = plugin.lib[k]))\n  }\n  if (plugin.tags) {\n    nlp.addTags(plugin.tags)\n  }\n  if (plugin.words) {\n    nlp.addWords(plugin.words)\n  }\n  if (plugin.frozen) {\n    nlp.addWords(plugin.frozen, true)\n  }\n  if (plugin.mutate) {\n    plugin.mutate(world, nlp)\n  }\n}\nexport default extend\n", "\n/** log the decision-making to console */\nconst verbose = function (set) {\n  const env = typeof process === 'undefined' || !process.env ? self.env || {} : process.env //use window, in browser\n  env.DEBUG_TAGS = set === 'tagger' || set === true ? true : ''\n  env.DEBUG_MATCH = set === 'match' || set === true ? true : ''\n  env.DEBUG_CHUNKS = set === 'chunker' || set === true ? true : ''\n  return this\n}\n\nexport { verbose }", "const isObject = val => {\n  return Object.prototype.toString.call(val) === '[object Object]'\n}\n\nconst isArray = function (arr) {\n  return Object.prototype.toString.call(arr) === '[object Array]'\n}\n\n// internal Term objects are slightly different\nconst fromJson = function (json) {\n  return json.map(o => {\n    return o.terms.map(term => {\n      if (isArray(term.tags)) {\n        term.tags = new Set(term.tags)\n      }\n      return term\n    })\n  })\n}\n\n// interpret an array-of-arrays\nconst preTokenized = function (arr) {\n  return arr.map((a) => {\n    return a.map(str => {\n      return {\n        text: str,\n        normal: str,//cleanup\n        pre: '',\n        post: ' ',\n        tags: new Set()\n      }\n    })\n  })\n}\n\nconst inputs = function (input, View, world) {\n  const { methods } = world\n  let doc = new View([])\n  doc.world = world\n  // support a number\n  if (typeof input === 'number') {\n    input = String(input)\n  }\n  // return empty doc\n  if (!input) {\n    return doc\n  }\n  // parse a string\n  if (typeof input === 'string') {\n    let document = methods.one.tokenize.fromString(input, world)\n    return new View(document)\n  }\n  // handle compromise View\n  if (isObject(input) && input.isView) {\n    return new View(input.document, input.ptrs)\n  }\n  // handle json input\n  if (isArray(input)) {\n    // pre-tokenized array-of-arrays \n    if (isArray(input[0])) {\n      let document = preTokenized(input)\n      return new View(document)\n    }\n    // handle json output\n    let document = fromJson(input)\n    return new View(document)\n  }\n  return doc\n}\nexport default inputs", "import View from './API/View.js'\nimport tmpWrld from './API/world.js'\nimport version from './_version.js'\nimport extend from './API/extend.js'\nimport { verbose } from './API/_lib.js'\nimport handleInputs from './API/inputs.js'\n\nlet world = Object.assign({}, tmpWrld)\n\nconst nlp = function (input, lex) {\n  if (lex) {\n    nlp.addWords(lex)\n  }\n  let doc = handleInputs(input, View, world)\n  if (input) {\n    doc.compute(world.hooks)\n  }\n  return doc\n}\nObject.defineProperty(nlp, '_world', {\n  value: world,\n  writable: true,\n})\n\n/** don't run the POS-tagger */\nnlp.tokenize = function (input, lex) {\n  const { compute } = this._world\n  // add user-given words to lexicon\n  if (lex) {\n    nlp.addWords(lex)\n  }\n  // run the tokenizer\n  let doc = handleInputs(input, View, world)\n  // give contractions a shot, at least\n  if (compute.contractions) {\n    doc.compute(['alias', 'normal', 'machine', 'contractions']) //run it if we've got it\n  }\n  return doc\n}\n\n/** extend compromise functionality */\nnlp.plugin = function (plugin) {\n  extend(plugin, this._world, View, this)\n  return this\n}\nnlp.extend = nlp.plugin\n\n\n/** reach-into compromise internals */\nnlp.world = function () {\n  return this._world\n}\nnlp.model = function () {\n  return this._world.model\n}\nnlp.methods = function () {\n  return this._world.methods\n}\nnlp.hooks = function () {\n  return this._world.hooks\n}\n\n/** log the decision-making to console */\nnlp.verbose = verbose\n/** current library release version */\nnlp.version = version\n\nexport default nlp\n", "const createCache = function (document) {\n  let cache = document.map(terms => {\n    let items = new Set()\n    terms.forEach(term => {\n      // add words\n      if (term.normal !== '') {\n        items.add(term.normal)\n      }\n      // cache switch-status - '%Noun|Verb%'\n      if (term.switch) {\n        items.add(`%${term.switch}%`)\n      }\n      // cache implicit words, too\n      if (term.implicit) {\n        items.add(term.implicit)\n      }\n      if (term.machine) {\n        items.add(term.machine)\n      }\n      if (term.root) {\n        items.add(term.root)\n      }\n      // cache slashes words, etc\n      if (term.alias) {\n        term.alias.forEach(str => items.add(str))\n      }\n      let tags = Array.from(term.tags)\n      for (let t = 0; t < tags.length; t += 1) {\n        items.add('#' + tags[t])\n      }\n    })\n    return items\n  })\n  return cache\n}\nexport default createCache\n", "import cacheDoc from './cacheDoc.js'\n\nexport default {\n  one: {\n    cacheDoc,\n  },\n}\n", "const methods = {\n  /** */\n  cache: function () {\n    this._cache = this.methods.one.cacheDoc(this.document)\n    return this\n  },\n  /** */\n  uncache: function () {\n    this._cache = null\n    return this\n  },\n}\nconst addAPI = function (View) {\n  Object.assign(View.prototype, methods)\n}\nexport default addAPI\n", "\nexport default {\n  cache: function (view) {\n    view._cache = view.methods.one.cacheDoc(view.document)\n  }\n}", "import methods from './methods/index.js'\nimport api from './api.js'\nimport compute from './compute.js'\n\nexport default {\n  api,\n  compute,\n  methods,\n}\n", "export default {\n  /** */\n  toLowerCase: function () {\n    this.termList().forEach(t => {\n      t.text = t.text.toLowerCase()\n    })\n    return this\n  },\n  /** */\n  toUpperCase: function () {\n    this.termList().forEach(t => {\n      t.text = t.text.toUpperCase()\n    })\n    return this\n  },\n  /** */\n  toTitleCase: function () {\n    this.termList().forEach(t => {\n      t.text = t.text.replace(/^ *[a-z\\u00C0-\\u00FF]/, x => x.toUpperCase()) //support unicode?\n    })\n    return this\n  },\n  /** */\n  toCamelCase: function () {\n    this.docs.forEach(terms => {\n      terms.forEach((t, i) => {\n        if (i !== 0) {\n          t.text = t.text.replace(/^ *[a-z\\u00C0-\\u00FF]/, x => x.toUpperCase()) //support unicode?\n        }\n        if (i !== terms.length - 1) {\n          t.post = ''\n        }\n      })\n    })\n    return this\n  },\n}\n", "// case logic\nconst isTitleCase = (str) => /^\\p{Lu}[\\p{Ll}'’]/u.test(str) || /^\\p{Lu}$/u.test(str)\nconst toTitleCase = (str) => str.replace(/^\\p{Ll}/u, x => x.toUpperCase())\nconst toLowerCase = (str) => str.replace(/^\\p{Lu}/u, x => x.toLowerCase())\n\n// splice an array into an array\nconst spliceArr = (parent, index, child) => {\n  // tag them as dirty\n  child.forEach(term => term.dirty = true)\n  if (parent) {\n    let args = [index, 0].concat(child)\n    Array.prototype.splice.apply(parent, args)\n  }\n  return parent\n}\n\n// add a space at end, if required\nconst endSpace = function (terms) {\n  const hasSpace = / $/\n  const hasDash = /[-–—]/\n  let lastTerm = terms[terms.length - 1]\n  if (lastTerm && !hasSpace.test(lastTerm.post) && !hasDash.test(lastTerm.post)) {\n    lastTerm.post += ' '\n  }\n}\n\n// sentence-ending punctuation should move in append\nconst movePunct = (source, end, needle) => {\n  const juicy = /[-.?!,;:)–—'\"]/g\n  let wasLast = source[end - 1]\n  if (!wasLast) {\n    return\n  }\n  let post = wasLast.post\n  if (juicy.test(post)) {\n    let punct = post.match(juicy).join('') //not perfect\n    let last = needle[needle.length - 1]\n    last.post = punct + last.post\n    // remove it, from source\n    wasLast.post = wasLast.post.replace(juicy, '')\n  }\n}\n\n\nconst moveTitleCase = function (home, start, needle) {\n  let from = home[start]\n  // should we bother?\n  if (start !== 0 || !isTitleCase(from.text)) {\n    return\n  }\n  // titlecase new first term\n  needle[0].text = toTitleCase(needle[0].text)\n  // should we un-titlecase the old word?\n  let old = home[start]\n  if (old.tags.has('ProperNoun') || old.tags.has('Acronym')) {\n    return\n  }\n  if (isTitleCase(old.text) && old.text.length > 1) {\n    old.text = toLowerCase(old.text)\n  }\n}\n\n// put these words before the others\nconst cleanPrepend = function (home, ptr, needle, document) {\n  let [n, start, end] = ptr\n  // introduce spaces appropriately\n  if (start === 0) {\n    // at start - need space in insert\n    endSpace(needle)\n  } else if (end === document[n].length) {\n    // at end - need space in home\n    endSpace(needle)\n  } else {\n    // in middle - need space in home and insert\n    endSpace(needle)\n    endSpace([home[ptr[1]]])\n  }\n  moveTitleCase(home, start, needle)\n  // movePunct(home, end, needle)\n  spliceArr(home, start, needle)\n}\n\nconst cleanAppend = function (home, ptr, needle, document) {\n  let [n, , end] = ptr\n  let total = (document[n] || []).length\n  if (end < total) {\n    // are we in the middle?\n    // add trailing space on self\n    movePunct(home, end, needle)\n    endSpace(needle)\n  } else if (total === end) {\n    // are we at the end?\n    // add a space to predecessor\n    endSpace(home)\n    // very end, move period\n    movePunct(home, end, needle)\n    // is there another sentence after?\n    if (document[n + 1]) {\n      needle[needle.length - 1].post += ' '\n    }\n  }\n  spliceArr(home, ptr[2], needle)\n  // set new endId\n  ptr[4] = needle[needle.length - 1].id\n}\n\nexport { cleanPrepend, cleanAppend, spliceArr }\n", "/*\nunique & ordered term ids, based on time & term index\n\nBase 36 (numbers+ascii)\n  3 digit 4,600\n  2 digit 1,200\n  1 digit 36\n\n  TTT|NNN|II|R\n\nTTT -> 46 terms since load\nNNN -> 46 thousand sentences (>1 inf-jest)\nII  -> 1,200 words in a sentence (nuts)\nR   -> 1-36 random number \n\nnovels: \n  avg 80,000 words\n    15 words per sentence\n  5,000 sentences\n\nInfinite Jest:\n  36,247 sentences\n  https://en.wikipedia.org/wiki/List_of_longest_novels\n\ncollisions are more-likely after\n    46 seconds have passed,\n  and \n    after 46-thousand sentences\n\n*/\nlet index = 0\n\nconst pad3 = (str) => {\n  str = str.length < 3 ? '0' + str : str\n  return str.length < 3 ? '0' + str : str\n}\n\nconst toId = function (term) {\n  let [n, i] = term.index || [0, 0]\n  index += 1\n\n  //don't overflow index\n  index = index > 46655 ? 0 : index\n  //don't overflow sentences\n  n = n > 46655 ? 0 : n\n  // //don't overflow terms\n  i = i > 1294 ? 0 : i\n\n  // 3 digits for time\n  let id = pad3(index.toString(36))\n  // 3 digit  for sentence index (46k)\n  id += pad3(n.toString(36))\n\n  // 1 digit for term index (36)\n  let tx = i.toString(36)\n  tx = tx.length < 2 ? '0' + tx : tx //pad2\n  id += tx\n\n  // 1 digit random number\n  let r = parseInt(Math.random() * 36, 10)\n  id += (r).toString(36)\n\n  return term.normal + '|' + id.toUpperCase()\n}\n\nexport default toId\n\n// setInterval(() => console.log(toId(4, 12)), 100)\n", "import { cleanAppend, cleanPrepend } from './lib/insert.js'\nimport uuid from '../compute/uuid.js'\n// are we inserting inside a contraction?\n// expand it first\nconst expand = function (m) {\n  if (m.has('@hasContraction') && typeof m.contractions === 'function') {\n    //&& m.after('^.').has('@hasContraction')\n    let more = m.grow('@hasContraction')\n    more.contractions().expand()\n  }\n}\n\nconst isArray = arr => Object.prototype.toString.call(arr) === '[object Array]'\n\n// set new ids for each terms\nconst addIds = function (terms) {\n  terms = terms.map(term => {\n    term.id = uuid(term)\n    return term\n  })\n  return terms\n}\n\nconst getTerms = function (input, world) {\n  const { methods } = world\n  // create our terms from a string\n  if (typeof input === 'string') {\n    return methods.one.tokenize.fromString(input, world)[0] //assume one sentence\n  }\n  //allow a view object\n  if (typeof input === 'object' && input.isView) {\n    return input.clone().docs[0] || [] //assume one sentence\n  }\n  //allow an array of terms, too\n  if (isArray(input)) {\n    return isArray(input[0]) ? input[0] : input\n  }\n  return []\n}\n\nconst insert = function (input, view, prepend) {\n  const { document, world } = view\n  view.uncache()\n  // insert words at end of each doc\n  let ptrs = view.fullPointer\n  let selfPtrs = view.fullPointer\n  view.forEach((m, i) => {\n    let ptr = m.fullPointer[0]\n    let [n] = ptr\n    // add-in the words\n    let home = document[n]\n    let terms = getTerms(input, world)\n    // are we inserting nothing?\n    if (terms.length === 0) {\n      return\n    }\n    terms = addIds(terms)\n    if (prepend) {\n      expand(view.update([ptr]).firstTerm())\n      cleanPrepend(home, ptr, terms, document)\n    } else {\n      expand(view.update([ptr]).lastTerm())\n      cleanAppend(home, ptr, terms, document)\n    }\n    // harden the pointer\n    if (document[n] && document[n][ptr[1]]) {\n      ptr[3] = document[n][ptr[1]].id\n    }\n    // change self backwards by len\n    selfPtrs[i] = ptr\n    // extend the pointer\n    ptr[2] += terms.length\n    ptrs[i] = ptr\n  })\n  let doc = view.toView(ptrs)\n  // shift our self pointer, if necessary\n  view.ptrs = selfPtrs\n  // try to tag them, too\n  doc.compute(['id', 'index', 'freeze', 'lexicon'])\n  if (doc.world.compute.preTagger) {\n    doc.compute('preTagger')\n  }\n  doc.compute('unfreeze')\n  return doc\n}\n\nconst fns = {\n  insertAfter: function (input) {\n    return insert(input, this, false)\n  },\n  insertBefore: function (input) {\n    return insert(input, this, true)\n  },\n}\nfns.append = fns.insertAfter\nfns.prepend = fns.insertBefore\nfns.insert = fns.insertAfter\n\nexport default fns\n", "const dollarStub = /\\$[0-9a-z]+/g\nconst fns = {}\n\n// case logic\nconst isTitleCase = (str) => /^\\p{Lu}[\\p{Ll}'’]/u.test(str) || /^\\p{Lu}$/u.test(str)\nconst toTitleCase = (str) => str.replace(/^\\p{Ll}/u, x => x.toUpperCase())\nconst toLowerCase = (str) => str.replace(/^\\p{Lu}/u, x => x.toLowerCase())\n\n// doc.replace('foo', (m)=>{})\nconst replaceByFn = function (main, fn, keep) {\n  main.forEach(m => {\n    let out = fn(m)\n    m.replaceWith(out, keep)\n  })\n  return main\n}\n\n// support 'foo $0' replacements\nconst subDollarSign = function (input, main) {\n  if (typeof input !== 'string') {\n    return input\n  }\n  let groups = main.groups()\n  input = input.replace(dollarStub, a => {\n    let num = a.replace(/\\$/, '')\n    if (groups.hasOwnProperty(num)) {\n      return groups[num].text()\n    }\n    return a\n  })\n  return input\n}\n\nfns.replaceWith = function (input, keep = {}) {\n  let ptrs = this.fullPointer\n  let main = this\n  this.uncache()\n  if (typeof input === 'function') {\n    return replaceByFn(main, input, keep)\n  }\n  let terms = main.docs[0]\n  if (!terms) return main\n  let isOriginalPossessive = keep.possessives && terms[terms.length - 1].tags.has('Possessive')\n  let isOriginalTitleCase = keep.case && isTitleCase(terms[0].text)\n  // support 'foo $0' replacements\n  input = subDollarSign(input, main)\n\n  let original = this.update(ptrs)\n  // soften-up pointer\n  ptrs = ptrs.map(ptr => ptr.slice(0, 3))\n  // original.freeze()\n  let oldTags = (original.docs[0] || []).map(term => Array.from(term.tags))\n  let originalPre = original.docs[0][0].pre\n  let originalPost = original.docs[0][original.docs[0].length - 1].post\n  // slide this in\n  if (typeof input === 'string') {\n    input = this.fromText(input).compute('id')\n  }\n  main.insertAfter(input)\n  // are we replacing part of a contraction?\n  if (original.has('@hasContraction') && main.contractions) {\n    let more = main.grow('@hasContraction+')\n    more.contractions().expand()\n  }\n  // delete the original terms\n  main.delete(original) //science.\n\n  // keep \"John's\"\n  if (isOriginalPossessive) {\n    let tmp = main.docs[0]\n    let term = tmp[tmp.length - 1]\n    if (!term.tags.has('Possessive')) {\n      term.text += \"'s\"\n      term.normal += \"'s\"\n      term.tags.add('Possessive')\n    }\n  }\n\n  // try to keep some pre-punctuation\n  if (originalPre && main.docs[0]) {\n    main.docs[0][0].pre = originalPre\n  }\n  // try to keep any post-punctuation\n  if (originalPost && main.docs[0]) {\n    let lastOne = main.docs[0][main.docs[0].length - 1]\n    if (!lastOne.post.trim()) {\n      lastOne.post = originalPost\n    }\n  }\n\n  // what should we return?\n  let m = main.toView(ptrs).compute(['index', 'freeze', 'lexicon'])\n  if (m.world.compute.preTagger) {\n    m.compute('preTagger')\n  }\n  m.compute('unfreeze')\n  // replace any old tags\n  if (keep.tags) {\n    m.terms().forEach((term, i) => {\n      term.tagSafe(oldTags[i])\n    })\n  }\n\n  if (!m.docs[0] || !m.docs[0][0]) return m\n\n  // try to co-erce case, too\n  if (keep.case) {\n    let transformCase = isOriginalTitleCase ? toTitleCase : toLowerCase\n    m.docs[0][0].text = transformCase(m.docs[0][0].text)\n  }\n\n  // console.log(input.docs[0])\n  // let regs = input.docs[0].map(t => {\n  //   return { id: t.id, optional: true }\n  // })\n  // m.after('(a|hoy)').debug()\n  // m.growRight('(a|hoy)').debug()\n  // console.log(m)\n  return m\n}\n\nfns.replace = function (match, input, keep) {\n  if (match && !input) {\n    return this.replaceWith(match, keep)\n  }\n  let m = this.match(match)\n  if (!m.found) {\n    return this\n  }\n  this.soften()\n  return m.replaceWith(input, keep)\n}\nexport default fns\n", "\n// transfer sentence-ending punctuation\nconst repairPunct = function (terms, len) {\n  let last = terms.length - 1\n  let from = terms[last]\n  let to = terms[last - len]\n  if (to && from) {\n    to.post += from.post //this isn't perfect.\n    to.post = to.post.replace(/ +([.?!,;:])/, '$1')\n    // don't allow any silly punctuation outcomes like ',!'\n    to.post = to.post.replace(/[,;:]+([.?!])/, '$1')\n  }\n}\n\n// remove terms from document json\nconst pluckOut = function (document, nots) {\n  nots.forEach(ptr => {\n    let [n, start, end] = ptr\n    let len = end - start\n    if (!document[n]) {\n      return // weird!\n    }\n    if (end === document[n].length && end > 1) {\n      repairPunct(document[n], len)\n    }\n    document[n].splice(start, len) // replaces len terms at index start\n  })\n  // remove any now-empty sentences\n  // (foreach + splice = 'mutable filter')\n  for (let i = document.length - 1; i >= 0; i -= 1) {\n    if (document[i].length === 0) {\n      document.splice(i, 1)\n      // remove any trailing whitespace before our removed sentence\n      if (i === document.length && document[i - 1]) {\n        let terms = document[i - 1]\n        let lastTerm = terms[terms.length - 1]\n        if (lastTerm) {\n          lastTerm.post = lastTerm.post.trimEnd()\n        }\n      }\n      // repair any downstream indexes\n      // for (let k = i; k < document.length; k += 1) {\n      //   document[k].forEach(term => term.index[0] -= 1)\n      // }\n    }\n  }\n  return document\n}\n\nexport default pluckOut", "import pluckOutTerm from './lib/remove.js'\n\nconst fixPointers = function (ptrs, gonePtrs) {\n  ptrs = ptrs.map(ptr => {\n    let [n] = ptr\n    if (!gonePtrs[n]) {\n      return ptr\n    }\n    gonePtrs[n].forEach(no => {\n      let len = no[2] - no[1]\n      // does it effect our pointer?\n      if (ptr[1] <= no[1] && ptr[2] >= no[2]) {\n        ptr[2] -= len\n      }\n    })\n    return ptr\n  })\n\n  // decrement any pointers after a now-empty pointer\n  ptrs.forEach((ptr, i) => {\n    // is the pointer now empty?\n    if (ptr[1] === 0 && ptr[2] == 0) {\n      // go down subsequent pointers\n      for (let n = i + 1; n < ptrs.length; n += 1) {\n        ptrs[n][0] -= 1\n        if (ptrs[n][0] < 0) {\n          ptrs[n][0] = 0\n        }\n      }\n    }\n  })\n  // remove any now-empty pointers\n  ptrs = ptrs.filter(ptr => ptr[2] - ptr[1] > 0)\n\n  // remove old hard-pointers\n  ptrs = ptrs.map((ptr) => {\n    ptr[3] = null\n    ptr[4] = null\n    return ptr\n  })\n  return ptrs\n}\n\nconst methods = {\n  /** */\n  remove: function (reg) {\n    const { indexN } = this.methods.one.pointer\n    this.uncache()\n    // two modes:\n    //  - a. remove self, from full parent\n    let self = this.all()\n    let not = this\n    //  - b. remove a match, from self\n    if (reg) {\n      self = this\n      not = this.match(reg)\n    }\n    let isFull = !self.ptrs\n    // is it part of a contraction?\n    if (not.has('@hasContraction') && not.contractions) {\n      let more = not.grow('@hasContraction')\n      more.contractions().expand()\n    }\n\n    let ptrs = self.fullPointer\n    let nots = not.fullPointer.reverse()\n    // remove them from the actual document)\n    let document = pluckOutTerm(this.document, nots)\n    // repair our pointers\n    let gonePtrs = indexN(nots)\n    ptrs = fixPointers(ptrs, gonePtrs)\n    // clean up our original inputs\n    self.ptrs = ptrs\n    self.document = document\n    self.compute('index')\n    // if we started zoomed-out, try to end zoomed-out\n    if (isFull) {\n      self.ptrs = undefined\n    }\n    if (!reg) {\n      this.ptrs = []\n      return self.none()\n    }\n    let res = self.toView(ptrs) //return new document\n    return res\n  },\n}\n\n// aliases\nmethods.delete = methods.remove\nexport default methods\n", "const methods = {\n  /** add this punctuation or whitespace before each match: */\n  pre: function (str, concat) {\n    if (str === undefined && this.found) {\n      return this.docs[0][0].pre\n    }\n    this.docs.forEach(terms => {\n      let term = terms[0]\n      if (concat === true) {\n        term.pre += str\n      } else {\n        term.pre = str\n      }\n    })\n    return this\n  },\n\n  /** add this punctuation or whitespace after each match: */\n  post: function (str, concat) {\n    if (str === undefined) {\n      let last = this.docs[this.docs.length - 1]\n      return last[last.length - 1].post\n    }\n    this.docs.forEach(terms => {\n      let term = terms[terms.length - 1]\n      if (concat === true) {\n        term.post += str\n      } else {\n        term.post = str\n      }\n    })\n    return this\n  },\n\n  /** remove whitespace from start/end */\n  trim: function () {\n    if (!this.found) {\n      return this\n    }\n    let docs = this.docs\n    let start = docs[0][0]\n    start.pre = start.pre.trimStart()\n    let last = docs[docs.length - 1]\n    let end = last[last.length - 1]\n    end.post = end.post.trimEnd()\n    return this\n  },\n\n  /** connect words with hyphen, and remove whitespace */\n  hyphenate: function () {\n    this.docs.forEach(terms => {\n      //remove whitespace\n      terms.forEach((t, i) => {\n        if (i !== 0) {\n          t.pre = ''\n        }\n        if (terms[i + 1]) {\n          t.post = '-'\n        }\n      })\n    })\n    return this\n  },\n\n  /** remove hyphens between words, and set whitespace */\n  dehyphenate: function () {\n    const hasHyphen = /[-–—]/\n    this.docs.forEach(terms => {\n      //remove whitespace\n      terms.forEach(t => {\n        if (hasHyphen.test(t.post)) {\n          t.post = ' '\n        }\n      })\n    })\n    return this\n  },\n\n  /** add quotations around these matches */\n  toQuotations: function (start, end) {\n    start = start || `\"`\n    end = end || `\"`\n    this.docs.forEach(terms => {\n      terms[0].pre = start + terms[0].pre\n      let last = terms[terms.length - 1]\n      last.post = end + last.post\n    })\n    return this\n  },\n\n  /** add brackets around these matches */\n  toParentheses: function (start, end) {\n    start = start || `(`\n    end = end || `)`\n    this.docs.forEach(terms => {\n      terms[0].pre = start + terms[0].pre\n      let last = terms[terms.length - 1]\n      last.post = end + last.post\n    })\n    return this\n  },\n}\n\n// aliases\nmethods.deHyphenate = methods.dehyphenate\nmethods.toQuotation = methods.toQuotations\n\nexport default methods\n", "/** alphabetical order */\nconst alpha = (a, b) => {\n  if (a.normal < b.normal) {\n    return -1\n  }\n  if (a.normal > b.normal) {\n    return 1\n  }\n  return 0\n}\n\n/** count the # of characters of each match */\nconst length = (a, b) => {\n  let left = a.normal.trim().length\n  let right = b.normal.trim().length\n  if (left < right) {\n    return 1\n  }\n  if (left > right) {\n    return -1\n  }\n  return 0\n}\n\n/** count the # of terms in each match */\nconst wordCount = (a, b) => {\n  if (a.words < b.words) {\n    return 1\n  }\n  if (a.words > b.words) {\n    return -1\n  }\n  return 0\n}\n\n/** count the # of terms in each match */\nconst sequential = (a, b) => {\n  if (a[0] < b[0]) {\n    return 1\n  }\n  if (a[0] > b[0]) {\n    return -1\n  }\n  return a[1] > b[1] ? 1 : -1\n}\n\n/** sort by # of duplicates in the document*/\nconst byFreq = function (arr) {\n  let counts = {}\n  arr.forEach(o => {\n    counts[o.normal] = counts[o.normal] || 0\n    counts[o.normal] += 1\n  })\n  // sort by freq\n  arr.sort((a, b) => {\n    let left = counts[a.normal]\n    let right = counts[b.normal]\n    if (left < right) {\n      return 1\n    }\n    if (left > right) {\n      return -1\n    }\n    return 0\n  })\n  return arr\n}\n\nexport default { alpha, length, wordCount, sequential, byFreq }\n", "import methods from './lib/_sort.js'\n// aliases\nconst seqNames = new Set(['index', 'sequence', 'seq', 'sequential', 'chron', 'chronological'])\nconst freqNames = new Set(['freq', 'frequency', 'topk', 'repeats'])\nconst alphaNames = new Set(['alpha', 'alphabetical'])\n\n// support function as parameter\nconst customSort = function (view, fn) {\n  let ptrs = view.fullPointer\n  ptrs = ptrs.sort((a, b) => {\n    a = view.update([a])\n    b = view.update([b])\n    return fn(a, b)\n  })\n  view.ptrs = ptrs //mutate original\n  return view\n}\n\n/** re-arrange the order of the matches (in place) */\nconst sort = function (input) {\n  let { docs, pointer } = this\n  this.uncache()\n  if (typeof input === 'function') {\n    return customSort(this, input)\n  }\n  input = input || 'alpha'\n  let ptrs = pointer || docs.map((_d, n) => [n])\n  let arr = docs.map((terms, n) => {\n    return {\n      index: n,\n      words: terms.length,\n      normal: terms.map(t => t.machine || t.normal || '').join(' '),\n      pointer: ptrs[n],\n    }\n  })\n  // 'chronological' sorting\n  if (seqNames.has(input)) {\n    input = 'sequential'\n  }\n  // alphabetical sorting\n  if (alphaNames.has(input)) {\n    input = 'alpha'\n  }\n  // sort by frequency\n  if (freqNames.has(input)) {\n    arr = methods.byFreq(arr)\n    return this.update(arr.map(o => o.pointer))\n  }\n  // apply sort method on each phrase\n  if (typeof methods[input] === 'function') {\n    arr = arr.sort(methods[input])\n    return this.update(arr.map(o => o.pointer))\n  }\n  return this\n}\n\n/** reverse the order of the matches, but not the words or index */\nconst reverse = function () {\n  let ptrs = this.pointer || this.docs.map((_d, n) => [n])\n  ptrs = [].concat(ptrs)\n  ptrs = ptrs.reverse()\n  if (this._cache) {\n    this._cache = this._cache.reverse()\n  }\n  return this.update(ptrs)\n}\n\n/** remove any duplicate matches */\nconst unique = function () {\n  let already = new Set()\n  let res = this.filter(m => {\n    let txt = m.text('machine')\n    if (already.has(txt)) {\n      return false\n    }\n    already.add(txt)\n    return true\n  })\n  // this.ptrs = res.ptrs //mutate original?\n  return res//.compute('index')\n}\n\nexport default { unique, reverse, sort }\n", "const isArray = (arr) => Object.prototype.toString.call(arr) === '[object Array]'\n\n// append a new document, somehow\nconst combineDocs = function (homeDocs, inputDocs) {\n  if (homeDocs.length > 0) {\n    // add a space\n    let end = homeDocs[homeDocs.length - 1]\n    let last = end[end.length - 1]\n    if (/ /.test(last.post) === false) {\n      last.post += ' '\n    }\n  }\n  homeDocs = homeDocs.concat(inputDocs)\n  return homeDocs\n}\n\nconst combineViews = function (home, input) {\n  // is it a view from the same document?\n  if (home.document === input.document) {\n    let ptrs = home.fullPointer.concat(input.fullPointer)\n    return home.toView(ptrs).compute('index')\n  }\n  // update n of new pointer, to end of our pointer\n  let ptrs = input.fullPointer\n  ptrs.forEach(a => {\n    a[0] += home.document.length\n  })\n  home.document = combineDocs(home.document, input.docs)\n  return home.all()\n}\n\nexport default {\n  // add string as new match/sentence\n  concat: function (input) {\n    // parse and splice-in new terms\n    if (typeof input === 'string') {\n      let more = this.fromText(input)\n      // easy concat\n      if (!this.found || !this.ptrs) {\n        this.document = this.document.concat(more.document)\n      } else {\n        // if we are in the middle, this is actually a splice operation\n        let ptrs = this.fullPointer\n        let at = ptrs[ptrs.length - 1][0]\n        this.document.splice(at, 0, ...more.document)\n      }\n      // put the docs\n      return this.all().compute('index')\n    }\n    // plop some view objects together\n    if (typeof input === 'object' && input.isView) {\n      return combineViews(this, input)\n    }\n    // assume it's an array of terms\n    if (isArray(input)) {\n      let docs = combineDocs(this.document, input)\n      this.document = docs\n      return this.all()\n    }\n    return this\n  },\n}", "// add indexes to pointers\nconst harden = function () {\n  this.ptrs = this.fullPointer\n  return this\n}\n// remove indexes from pointers\nconst soften = function () {\n  let ptr = this.ptrs\n  if (!ptr || ptr.length < 1) {\n    return this\n  }\n  ptr = ptr.map(a => a.slice(0, 3))\n  this.ptrs = ptr\n  return this\n}\nexport default { harden, soften }", "import caseFns from './case.js'\nimport insert from './insert.js'\nimport replace from './replace.js'\nimport remove from './remove.js'\nimport whitespace from './whitespace.js'\nimport sort from './sort.js'\nimport concat from './concat.js'\nimport harden from './harden.js'\n\nconst methods = Object.assign({}, caseFns, insert, replace, remove, whitespace, sort, concat, harden)\n\nconst addAPI = function (View) {\n  Object.assign(View.prototype, methods)\n}\nexport default addAPI\n", "import uuid from './uuid.js'\n\nconst compute = {\n  id: function (view) {\n    let docs = view.docs\n    for (let n = 0; n < docs.length; n += 1) {\n      for (let i = 0; i < docs[n].length; i += 1) {\n        let term = docs[n][i]\n        term.id = term.id || uuid(term)\n      }\n    }\n  }\n}\n\nexport default compute", "import api from './api/index.js'\nimport compute from './compute/index.js'\n\nexport default {\n  api,\n  compute,\n}\n", "export default [\n  // simple mappings\n  { word: '@', out: ['at'] },\n  { word: 'arent', out: ['are', 'not'] },\n  { word: 'alot', out: ['a', 'lot'] },\n  { word: 'brb', out: ['be', 'right', 'back'] },\n  { word: 'cannot', out: ['can', 'not'] },\n  { word: 'dun', out: ['do', 'not'] },\n  { word: \"can't\", out: ['can', 'not'] },\n  { word: \"shan't\", out: ['should', 'not'] },\n  { word: \"won't\", out: ['will', 'not'] },\n  { word: \"that's\", out: ['that', 'is'] },\n  { word: \"what's\", out: ['what', 'is'] },\n  { word: \"let's\", out: ['let', 'us'] },\n  // { word: \"there's\", out: ['there', 'is'] },\n  { word: 'dunno', out: ['do', 'not', 'know'] },\n  { word: 'gonna', out: ['going', 'to'] },\n  { word: 'gotta', out: ['have', 'got', 'to'] }, //hmm\n  { word: 'gimme', out: ['give', 'me'] },\n  { word: 'outta', out: ['out', 'of'] },\n  { word: 'tryna', out: ['trying', 'to'] },\n  { word: 'gtg', out: ['got', 'to', 'go'] },\n  { word: 'im', out: ['i', 'am'] },\n  { word: 'imma', out: ['I', 'will'] },\n  { word: 'imo', out: ['in', 'my', 'opinion'] },\n  { word: 'irl', out: ['in', 'real', 'life'] },\n  { word: 'ive', out: ['i', 'have'] },\n  { word: 'rn', out: ['right', 'now'] },\n  { word: 'tbh', out: ['to', 'be', 'honest'] },\n  { word: 'wanna', out: ['want', 'to'] },\n  { word: `c'mere`, out: ['come', 'here'] },\n  { word: `c'mon`, out: ['come', 'on'] },\n  // shoulda, coulda\n  { word: 'shoulda', out: ['should', 'have'] },\n  { word: 'coulda', out: ['coulda', 'have'] },\n  { word: 'woulda', out: ['woulda', 'have'] },\n  { word: 'musta', out: ['must', 'have'] },\n\n  { word: \"tis\", out: ['it', 'is'] },\n  { word: \"twas\", out: ['it', 'was'] },\n  { word: `y'know`, out: ['you', 'know'] },\n  { word: \"ne'er\", out: ['never'] },\n  { word: \"o'er\", out: ['over'] },\n  // contraction-part mappings\n  { after: 'll', out: ['will'] },\n  { after: 've', out: ['have'] },\n  { after: 're', out: ['are'] },\n  { after: 'm', out: ['am'] },\n  // french contractions\n  { before: 'c', out: ['ce'] },\n  { before: 'm', out: ['me'] },\n  { before: 'n', out: ['ne'] },\n  { before: 'qu', out: ['que'] },\n  { before: 's', out: ['se'] },\n  { before: 't', out: ['tu'] }, // t'aime\n\n  // missing apostrophes\n  { word: 'shouldnt', out: ['should', 'not'] },\n  { word: 'couldnt', out: ['could', 'not'] },\n  { word: 'wouldnt', out: ['would', 'not'] },\n  { word: 'hasnt', out: ['has', 'not'] },\n  { word: 'wasnt', out: ['was', 'not'] },\n  { word: 'isnt', out: ['is', 'not'] },\n  { word: 'cant', out: ['can', 'not'] },\n  { word: 'dont', out: ['do', 'not'] },\n  { word: 'wont', out: ['will', 'not'] },\n  // apostrophe d\n  { word: 'howd', out: ['how', 'did'] },\n  { word: 'whatd', out: ['what', 'did'] },\n  { word: 'whend', out: ['when', 'did'] },\n  { word: 'whered', out: ['where', 'did'] },\n]\n", "// number suffixes that are not units\nconst t = true\nexport default {\n  'st': t,\n  'nd': t,\n  'rd': t,\n  'th': t,\n  'am': t,\n  'pm': t,\n  'max': t,\n  '°': t,\n  's': t, // 1990s\n  'e': t, // 18e - french/spanish ordinal\n  'er': t, //french 1er\n  'ère': t, //''\n  'ème': t, //french 2ème\n}", "import contractions from './contractions.js'\nimport numberSuffixes from './number-suffix.js'\n\nexport default {\n  one: {\n    contractions,\n    numberSuffixes\n  }\n}\n", "// put n new words where 1 word was\nconst insertContraction = function (document, point, words) {\n  let [n, w] = point\n  if (!words || words.length === 0) {\n    return\n  }\n  words = words.map((word, i) => {\n    word.implicit = word.text\n    word.machine = word.text\n    word.pre = ''\n    word.post = ''\n    word.text = ''\n    word.normal = ''\n    word.index = [n, w + i]\n    return word\n  })\n  if (words[0]) {\n    // move whitespace over\n    words[0].pre = document[n][w].pre\n    words[words.length - 1].post = document[n][w].post\n    // add the text/normal to the first term\n    words[0].text = document[n][w].text\n    words[0].normal = document[n][w].normal // move tags too?\n  }\n  // do the splice\n  document[n].splice(w, 1, ...words)\n}\nexport default insertContraction\n", "const hasContraction = /'/\n//look for a past-tense verb\n// const hasPastTense = (terms, i) => {\n//   let after = terms.slice(i + 1, i + 3)\n//   return after.some(t => t.tags.has('PastTense'))\n// }\n// he'd walked -> had\n// how'd -> did\n// he'd go -> would\n\nconst alwaysDid = new Set([\n  'what',\n  'how',\n  'when',\n  'where',\n  'why',\n])\n\n// after-words\nconst useWould = new Set([\n  'be',\n  'go',\n  'start',\n  'think',\n  'need',\n])\n\nconst useHad = new Set([\n  'been',\n  'gone'\n])\n// they'd gone\n// they'd go\n\n\n// he'd been\n//    he had been\n//    he would been\n\nconst _apostropheD = function (terms, i) {\n  let before = terms[i].normal.split(hasContraction)[0]\n\n  // what'd, how'd\n  if (alwaysDid.has(before)) {\n    return [before, 'did']\n  }\n  if (terms[i + 1]) {\n    // they'd gone\n    if (useHad.has(terms[i + 1].normal)) {\n      return [before, 'had']\n    }\n    // they'd go\n    if (useWould.has(terms[i + 1].normal)) {\n      return [before, 'would']\n    }\n  }\n  return null\n  //   if (hasPastTense(terms, i) === true) {\n  //     return [before, 'had']\n  //   }\n  //   // had/would/did\n  //   return [before, 'would']\n}\nexport default _apostropheD\n", "\n//ain't -> are/is not\nconst apostropheT = function (terms, i) {\n  if (terms[i].normal === \"ain't\" || terms[i].normal === 'aint') {\n    return null //do this in ./two/\n  }\n  let before = terms[i].normal.replace(/n't/, '')\n  return [before, 'not']\n}\n\nexport default apostropheT\n", "const hasContraction = /'/\nconst isFeminine = /(e|é|aison|sion|tion)$/\nconst isMasculine = /(age|isme|acle|ege|oire)$/\n// l'amour\nconst preL = (terms, i) => {\n  // le/la\n  let after = terms[i].normal.split(hasContraction)[1]\n  // quick french gender disambig (rough)\n  if (after && after.endsWith('e')) {\n    return ['la', after]\n  }\n  return ['le', after]\n}\n\n// d'amerique\nconst preD = (terms, i) => {\n  let after = terms[i].normal.split(hasContraction)[1]\n  // quick guess for noun-agreement (rough)\n  if (after && isFeminine.test(after) && !isMasculine.test(after)) {\n    return ['du', after]\n  } else if (after && after.endsWith('s')) {\n    return ['des', after]\n  }\n  return ['de', after]\n}\n\n// j'aime\nconst preJ = (terms, i) => {\n  let after = terms[i].normal.split(hasContraction)[1]\n  return ['je', after]\n}\n\nexport default {\n  preJ,\n  preL,\n  preD,\n}\n", "const isRange = /^([0-9.]{1,4}[a-z]{0,2}) ?[-–—] ?([0-9]{1,4}[a-z]{0,2})$/i\nconst timeRange = /^([0-9]{1,2}(:[0-9][0-9])?(am|pm)?) ?[-–—] ?([0-9]{1,2}(:[0-9][0-9])?(am|pm)?)$/i\nconst phoneNum = /^[0-9]{3}-[0-9]{4}$/\n\nconst numberRange = function (terms, i) {\n  let term = terms[i]\n  let parts = term.text.match(isRange)\n  if (parts !== null) {\n    // 123-1234 is a phone number, not a number-range\n    if (term.tags.has('PhoneNumber') === true || phoneNum.test(term.text)) {\n      return null\n    }\n    return [parts[1], 'to', parts[2]]\n  } else {\n    parts = term.text.match(timeRange)\n    if (parts !== null) {\n      return [parts[1], 'to', parts[4]]\n    }\n  }\n  return null\n}\nexport default numberRange\n", "const numUnit = /^([+-]?[0-9][.,0-9]*)([a-z°²³µ/]+)$/ //(must be lowercase)\n\nconst numberUnit = function (terms, i, world) {\n  const notUnit = world.model.one.numberSuffixes || {}\n  let term = terms[i]\n  let parts = term.text.match(numUnit)\n  if (parts !== null) {\n    // is it a recognized unit, like 'km'?\n    let unit = parts[2].toLowerCase().trim()\n    // don't split '3rd'\n    if (notUnit.hasOwnProperty(unit)) {\n      return null\n    }\n    return [parts[1], unit] //split it\n  }\n  return null\n}\nexport default numberUnit\n", "import splice from './_splice.js'\nimport apostropheD from './apostrophe-d.js'\nimport apostropheT from './apostrophe-t.js'\nimport french from './french.js'\nimport numberRange from './number-range.js'\nimport numberUnit from './number-unit.js'\n\nconst byApostrophe = /'/\nconst numDash = /^[0-9][^-–—]*[-–—].*?[0-9]/\n\n// run tagger on our new implicit terms\nconst reTag = function (terms, view, start, len) {\n  let tmp = view.update()\n  tmp.document = [terms]\n  // offer to re-tag neighbours, too\n  let end = start + len\n  if (start > 0) {\n    start -= 1\n  }\n  if (terms[end]) {\n    end += 1\n  }\n  tmp.ptrs = [[0, start, end]]\n}\n\nconst byEnd = {\n  // ain't\n  t: (terms, i) => apostropheT(terms, i),\n  // how'd\n  d: (terms, i) => apostropheD(terms, i),\n}\n\nconst byStart = {\n  // j'aime\n  j: (terms, i) => french.preJ(terms, i),\n  // l'amour\n  l: (terms, i) => french.preL(terms, i),\n  // d'amerique\n  d: (terms, i) => french.preD(terms, i),\n}\n\n// pull-apart known contractions from model\nconst knownOnes = function (list, term, before, after) {\n  for (let i = 0; i < list.length; i += 1) {\n    let o = list[i]\n    // look for word-word match (cannot-> [can, not])\n    if (o.word === term.normal) {\n      return o.out\n    }\n    // look for after-match ('re -> [_, are])\n    else if (after !== null && after === o.after) {\n      return [before].concat(o.out)\n    }\n    // look for before-match (l' -> [le, _])\n    else if (before !== null && before === o.before && after && after.length > 2) {\n      return o.out.concat(after)\n      // return [o.out, after] //typeof o.out === 'string' ? [o.out, after] : o.out(terms, i)\n    }\n  }\n  return null\n}\n\nconst toDocs = function (words, view) {\n  let doc = view.fromText(words.join(' '))\n  doc.compute(['id', 'alias'])\n  return doc.docs[0]\n}\n\n// there's is usually [there, is]\n// but can be 'there has' for 'there has (..) been'\nconst thereHas = function (terms, i) {\n  for (let k = i + 1; k < 5; k += 1) {\n    if (!terms[k]) {\n      break\n    }\n    if (terms[k].normal === 'been') {\n      return ['there', 'has']\n    }\n  }\n  return ['there', 'is']\n}\n\n//really easy ones\nconst contractions = view => {\n  let { world, document } = view\n  const { model, methods } = world\n  let list = model.one.contractions || []\n  // let units = new Set(model.one.units || [])\n  // each sentence\n  document.forEach((terms, n) => {\n    // loop through terms backwards\n    for (let i = terms.length - 1; i >= 0; i -= 1) {\n      let before = null\n      let after = null\n      if (byApostrophe.test(terms[i].normal) === true) {\n        let res = terms[i].normal.split(byApostrophe)\n        before = res[0]\n        after = res[1]\n      }\n      // any known-ones, like 'dunno'?\n      let words = knownOnes(list, terms[i], before, after)\n      // ['foo', 's']\n      if (!words && byEnd.hasOwnProperty(after)) {\n        words = byEnd[after](terms, i, world)\n      }\n      // ['j', 'aime']\n      if (!words && byStart.hasOwnProperty(before)) {\n        words = byStart[before](terms, i)\n      }\n      // 'there is' vs 'there has'\n      if (before === 'there' && after === 's') {\n        words = thereHas(terms, i)\n      }\n      // actually insert the new terms\n      if (words) {\n        words = toDocs(words, view)\n        splice(document, [n, i], words)\n        reTag(document[n], view, i, words.length)\n        continue\n      }\n      // '44-2' has special care\n      if (numDash.test(terms[i].normal)) {\n        words = numberRange(terms, i)\n        if (words) {\n          words = toDocs(words, view)\n          splice(document, [n, i], words)\n          methods.one.setTag(words, 'NumberRange', world) //add custom tag\n          // is it a time-range, like '5-9pm'\n          if (words[2] && words[2].tags.has('Time')) {\n            methods.one.setTag([words[0]], 'Time', world, null, 'time-range')\n          }\n          reTag(document[n], view, i, words.length)\n        }\n        continue\n      }\n      // split-apart '4km'\n      words = numberUnit(terms, i, world)\n      if (words) {\n        words = toDocs(words, view)\n        splice(document, [n, i], words)\n        methods.one.setTag([words[1]], 'Unit', world, null, 'contraction-unit')\n      }\n    }\n  })\n}\nexport default contractions\n", "import contractions from './contractions/index.js'\n\nexport default { contractions }\n", "import model from './model/index.js'\nimport compute from './compute/index.js'\n\nconst plugin = {\n  model: model,\n  compute: compute,\n  hooks: ['contractions'],\n}\nexport default plugin\n", "const freeze = function (view) {\n  const world = view.world\n  const { model, methods } = view.world\n  const setTag = methods.one.setTag\n  const { frozenLex } = model.one\n  const multi = model.one._multiCache || {}\n\n  view.docs.forEach(terms => {\n    for (let i = 0; i < terms.length; i += 1) {\n      // basic lexicon lookup\n      let t = terms[i]\n      let word = t.machine || t.normal\n\n      // test a multi-word\n      if (multi[word] !== undefined && terms[i + 1]) {\n        let end = i + multi[word] - 1\n        for (let k = end; k > i; k -= 1) {\n          let words = terms.slice(i, k + 1)\n          let str = words.map(term => term.machine || term.normal).join(' ')\n          // lookup frozen lexicon\n          if (frozenLex.hasOwnProperty(str) === true) {\n            setTag(words, frozenLex[str], world, false, '1-frozen-multi-lexicon')\n            words.forEach(term => (term.frozen = true))\n            continue\n          }\n        }\n      }\n      // test single word\n      if (frozenLex[word] !== undefined && frozenLex.hasOwnProperty(word)) {\n        setTag([t], frozenLex[word], world, false, '1-freeze-lexicon')\n        t.frozen = true\n        continue\n      }\n    }\n  })\n}\n\nconst unfreeze = function (view) {\n  view.docs.forEach(ts => {\n    ts.forEach(term => {\n      delete term.frozen\n    })\n  })\n  return view\n}\nexport default { frozen: freeze, freeze, unfreeze }\n", "/* eslint-disable no-console */\nconst blue = str => '\\x1b[34m' + str + '\\x1b[0m'\nconst dim = str => '\\x1b[3m\\x1b[2m' + str + '\\x1b[0m'\n\nconst debug = function (view) {\n  view.docs.forEach(terms => {\n    console.log(blue('\\n  ┌─────────'))\n    terms.forEach(t => {\n      let str = `  ${dim('│')}  `\n      let txt = t.implicit || t.text || '-'\n      if (t.frozen === true) {\n        str += `${blue(txt)} ❄️`\n      } else {\n        str += dim(txt)\n      }\n      console.log(str)\n    })\n  })\n}\nexport default debug\n", "import compute from './compute.js'\nimport debug from './debug.js'\n\nexport default {\n  // add .compute('freeze')\n  compute,\n\n  mutate: world => {\n    const methods = world.methods.one\n    // add @isFrozen method\n    methods.termMethods.isFrozen = term => term.frozen === true\n    // adds `.debug('frozen')`\n    methods.debug.freeze = debug\n    methods.debug.frozen = debug\n  },\n\n  api: function (View) {\n    // set all terms to reject any desctructive tags\n    View.prototype.freeze = function () {\n      this.docs.forEach(ts => {\n        ts.forEach(term => {\n          term.frozen = true\n        })\n      })\n      return this\n    }\n    // reset all terms to allow  any desctructive tags\n    View.prototype.unfreeze = function () {\n      this.compute('unfreeze')\n    }\n    // return all frozen terms\n    View.prototype.isFrozen = function () {\n      return this.match('@isFrozen+')\n    }\n  },\n  // run it in init\n  hooks: ['freeze'],\n}\n", "// scan-ahead to match multiple-word terms - 'jack rabbit'\nconst multiWord = function (terms, start_i, world) {\n  const { model, methods } = world\n  const setTag = methods.one.setTag\n  const multi = model.one._multiCache || {}\n  const { lexicon } = model.one || {}\n  let t = terms[start_i]\n  let word = t.machine || t.normal\n\n  // found a word to scan-ahead on\n  if (multi[word] !== undefined && terms[start_i + 1]) {\n    let end = start_i + multi[word] - 1\n    for (let i = end; i > start_i; i -= 1) {\n      let words = terms.slice(start_i, i + 1)\n      if (words.length <= 1) {\n        return false\n      }\n      let str = words.map(term => term.machine || term.normal).join(' ')\n      // lookup regular lexicon\n      if (lexicon.hasOwnProperty(str) === true) {\n        let tag = lexicon[str]\n        setTag(words, tag, world, false, '1-multi-lexicon')\n        // special case for phrasal-verbs - 2nd word is a #Particle\n        if (tag && tag.length === 2 && (tag[0] === 'PhrasalVerb' || tag[1] === 'PhrasalVerb')) {\n          setTag([words[1]], 'Particle', world, false, '1-phrasal-particle')\n        }\n        return true\n      }\n    }\n    return false\n  }\n  return null\n}\nexport default multiWord\n", "const prefix = /^(under|over|mis|re|un|dis|semi|pre|post)-?/\n// anti|non|extra|inter|intra|over\nconst allowPrefix = new Set(['Verb', 'Infinitive', 'PastTense', 'Gerund', 'PresentTense', 'Adjective', 'Participle'])\n\n// tag any words in our lexicon\nconst checkLexicon = function (terms, i, world) {\n  const { model, methods } = world\n  // const fastTag = methods.one.fastTag\n  const setTag = methods.one.setTag\n  const { lexicon } = model.one\n\n  // basic lexicon lookup\n  let t = terms[i]\n  let word = t.machine || t.normal\n  // normal lexicon lookup\n  if (lexicon[word] !== undefined && lexicon.hasOwnProperty(word)) {\n    setTag([t], lexicon[word], world, false, '1-lexicon')\n    return true\n  }\n  // lookup aliases in the lexicon\n  if (t.alias) {\n    let found = t.alias.find(str => lexicon.hasOwnProperty(str))\n    if (found) {\n      setTag([t], lexicon[found], world, false, '1-lexicon-alias')\n      return true\n    }\n  }\n  // prefixing for verbs/adjectives\n  if (prefix.test(word) === true) {\n    let stem = word.replace(prefix, '')\n    if (lexicon.hasOwnProperty(stem) && stem.length > 3) {\n      // only allow prefixes for verbs/adjectives\n      if (allowPrefix.has(lexicon[stem])) {\n        // console.log('->', word, stem, lexicon[stem])\n        setTag([t], lexicon[stem], world, false, '1-lexicon-prefix')\n        return true\n      }\n    }\n  }\n  return null\n}\nexport default checkLexicon\n", "import multiWord from './multi-word.js'\nimport singleWord from './single-word.js'\n\n// tag any words in our lexicon - even if it hasn't been filled-up yet\n// rest of pre-tagger is in ./two/preTagger\nconst lexicon = function (view) {\n  const world = view.world\n  // loop through our terms\n  view.docs.forEach(terms => {\n    for (let i = 0; i < terms.length; i += 1) {\n      if (terms[i].tags.size === 0) {\n        let found = null\n        found = found || multiWord(terms, i, world)\n        // lookup known words\n        found = found || singleWord(terms, i, world)\n      }\n    }\n  })\n}\n\nexport default {\n  lexicon,\n}\n", "// derive clever things from our lexicon key-value pairs\nconst expand = function (words) {\n  // const { methods, model } = world\n  let lex = {}\n  // console.log('start:', Object.keys(lex).length)\n  let _multi = {}\n  // go through each word in this key-value obj:\n  Object.keys(words).forEach(word => {\n    let tag = words[word]\n    // normalize lexicon a little bit\n    word = word.toLowerCase().trim()\n    word = word.replace(/'s\\b/, '')\n    // cache multi-word terms\n    let split = word.split(/ /)\n    if (split.length > 1) {\n      // prefer longer ones\n      if (_multi[split[0]] === undefined || split.length > _multi[split[0]]) {\n        _multi[split[0]] = split.length\n      }\n    }\n    lex[word] = lex[word] || tag\n  })\n  // cleanup\n  delete lex['']\n  delete lex[null]\n  delete lex[' ']\n  return { lex, _multi }\n}\nexport default expand\n", "import expandLexicon from './expand.js'\n\nexport default {\n  one: {\n    expandLexicon,\n  }\n}", "/** insert new words/phrases into the lexicon */\nconst addWords = function (words, isFrozen = false) {\n  const world = this.world()\n  const { methods, model } = world\n  if (!words) {\n    return\n  }\n  // normalize tag vals\n  Object.keys(words).forEach(k => {\n    if (typeof words[k] === 'string' && words[k].startsWith('#')) {\n      words[k] = words[k].replace(/^#/, '')\n    }\n  })\n  // these words go into a seperate lexicon\n  if (isFrozen === true) {\n    let { lex, _multi } = methods.one.expandLexicon(words, world)\n    Object.assign(model.one._multiCache, _multi)\n    Object.assign(model.one.frozenLex, lex)\n    return\n  }\n  // add some words to our lexicon\n  if (methods.two.expandLexicon) {\n    // do fancy ./two version\n    let { lex, _multi } = methods.two.expandLexicon(words, world)\n    Object.assign(model.one.lexicon, lex)\n    Object.assign(model.one._multiCache, _multi)\n  }\n  // do basic ./one version\n  let { lex, _multi } = methods.one.expandLexicon(words, world)\n  Object.assign(model.one.lexicon, lex)\n  Object.assign(model.one._multiCache, _multi)\n}\n\nexport default { addWords }\n", "import compute from './compute/index.js'\nimport methods from './methods/index.js'\nimport lib from './lib.js'\n\nconst model = {\n  one: {\n    lexicon: {}, //setup blank lexicon\n    _multiCache: {},\n    frozenLex: {}, //2nd lexicon\n  },\n}\n\nexport default {\n  model,\n  methods,\n  compute,\n  lib,\n  hooks: ['lexicon'],\n}\n", "// edited by Spencer Kelly\n// credit to https://github.com/BrunoRB/ahocorasick by Bruno Roberto Búrigo.\n\nconst tokenize = function (phrase, world) {\n  const { methods, model } = world\n  let terms = methods.one.tokenize.splitTerms(phrase, model).map(t => methods.one.tokenize.splitWhitespace(t, model))\n  return terms.map(term => term.text.toLowerCase())\n}\n\n// turn an array or object into a compressed aho-corasick structure\nconst buildTrie = function (phrases, world) {\n\n  // const tokenize=methods.one.\n  let goNext = [{}]\n  let endAs = [null]\n  let failTo = [0]\n\n  let xs = []\n  let n = 0\n  phrases.forEach(function (phrase) {\n    let curr = 0\n    // let wordsB = phrase.split(/ /g).filter(w => w)\n    let words = tokenize(phrase, world)\n    for (let i = 0; i < words.length; i++) {\n      let word = words[i]\n      if (goNext[curr] && goNext[curr].hasOwnProperty(word)) {\n        curr = goNext[curr][word]\n      } else {\n        n++\n        goNext[curr][word] = n\n        goNext[n] = {}\n        curr = n\n        endAs[n] = null\n      }\n    }\n    endAs[curr] = [words.length]\n  })\n  // f(s) = 0 for all states of depth 1 (the ones from which the 0 state can transition to)\n  for (let word in goNext[0]) {\n    n = goNext[0][word]\n    failTo[n] = 0\n    xs.push(n)\n  }\n\n  while (xs.length) {\n    let r = xs.shift()\n    // for each symbol a such that g(r, a) = s\n    let keys = Object.keys(goNext[r])\n    for (let i = 0; i < keys.length; i += 1) {\n      let word = keys[i]\n      let s = goNext[r][word]\n      xs.push(s)\n      // set state = f(r)\n      n = failTo[r]\n      while (n > 0 && !goNext[n].hasOwnProperty(word)) {\n        n = failTo[n]\n      }\n      if (goNext.hasOwnProperty(n)) {\n        let fs = goNext[n][word]\n        failTo[s] = fs\n        if (endAs[fs]) {\n          endAs[s] = endAs[s] || []\n          endAs[s] = endAs[s].concat(endAs[fs])\n        }\n      } else {\n        failTo[s] = 0\n      }\n    }\n  }\n  return { goNext, endAs, failTo }\n}\nexport default buildTrie\n\n// console.log(buildTrie(['smart and cool', 'smart and nice']))\n", "// follow our trie structure\nconst scanWords = function (terms, trie, opts) {\n  let n = 0\n  let results = []\n  for (let i = 0; i < terms.length; i++) {\n    let word = terms[i][opts.form] || terms[i].normal\n    // main match-logic loop:\n    while (n > 0 && (trie.goNext[n] === undefined || !trie.goNext[n].hasOwnProperty(word))) {\n      n = trie.failTo[n] || 0 // (usually back to 0)\n    }\n    // did we fail?\n    if (!trie.goNext[n].hasOwnProperty(word)) {\n      continue\n    }\n    n = trie.goNext[n][word]\n    if (trie.endAs[n]) {\n      let arr = trie.endAs[n]\n      for (let o = 0; o < arr.length; o++) {\n        let len = arr[o]\n        let term = terms[i - len + 1]\n        let [no, start] = term.index\n        results.push([no, start, start + len, term.id])\n      }\n    }\n  }\n  return results\n}\n\nconst cacheMiss = function (words, cache) {\n  for (let i = 0; i < words.length; i += 1) {\n    if (cache.has(words[i]) === true) {\n      return false\n    }\n  }\n  return true\n}\n\nconst scan = function (view, trie, opts) {\n  let results = []\n  opts.form = opts.form || 'normal'\n  let docs = view.docs\n  if (!trie.goNext || !trie.goNext[0]) {\n    console.error('Compromise invalid lookup trie')//eslint-disable-line\n    return view.none()\n  }\n  let firstWords = Object.keys(trie.goNext[0])\n  // do each phrase\n  for (let i = 0; i < docs.length; i++) {\n    // can we skip the phrase, all together?\n    if (view._cache && view._cache[i] && cacheMiss(firstWords, view._cache[i]) === true) {\n      continue\n    }\n    let terms = docs[i]\n    let found = scanWords(terms, trie, opts)\n    if (found.length > 0) {\n      results = results.concat(found)\n    }\n  }\n  return view.update(results)\n}\nexport default scan\n", "import build from './buildTrie/index.js'\nimport scan from './scan.js'\n\nconst isObject = val => {\n  return Object.prototype.toString.call(val) === '[object Object]'\n}\n\nexport default function (View) {\n\n  /** find all matches in this document */\n  View.prototype.lookup = function (input, opts = {}) {\n    if (!input) {\n      return this.none()\n    }\n    if (typeof input === 'string') {\n      input = [input]\n    }\n    let trie = isObject(input) ? input : build(input, this.world)\n    let res = scan(this, trie, opts)\n    res = res.settle()\n    return res\n  }\n}", "// chop-off tail of redundant vals at end of array\nconst truncate = (list, val) => {\n  for (let i = list.length - 1; i >= 0; i -= 1) {\n    if (list[i] !== val) {\n      list = list.slice(0, i + 1)\n      return list\n    }\n  }\n  return list\n}\n\n// prune trie a bit\nconst compress = function (trie) {\n  trie.goNext = trie.goNext.map(o => {\n    if (Object.keys(o).length === 0) {\n      return undefined\n    }\n    return o\n  })\n  // chop-off tail of undefined vals in goNext array\n  trie.goNext = truncate(trie.goNext, undefined)\n  // chop-off tail of zeros in failTo array\n  trie.failTo = truncate(trie.failTo, 0)\n  // chop-off tail of nulls in endAs array\n  trie.endAs = truncate(trie.endAs, null)\n  return trie\n}\nexport default compress", "import api from './api/index.js'\nimport compress from './api/buildTrie/compress.js'\nimport build from './api/buildTrie/index.js'\n\n/** pre-compile a list of matches to lookup */\nconst lib = {\n  /** turn an array or object into a compressed trie*/\n  buildTrie: function (input) {\n    const trie = build(input, this.world())\n    return compress(trie)\n  }\n}\n// add alias\nlib.compile = lib.buildTrie\n\nexport default {\n  api,\n  lib\n}\n", "export const relPointer = function (ptrs, parent) {\n  if (!parent) {\n    return ptrs\n  }\n  ptrs.forEach(ptr => {\n    let n = ptr[0]\n    if (parent[n]) {\n      ptr[0] = parent[n][0] //n\n      ptr[1] += parent[n][1] //start\n      ptr[2] += parent[n][1] //end\n    }\n  })\n  return ptrs\n}\n\n// make match-result relative to whole document\nexport const fixPointers = function (res, parent) {\n  let { ptrs, byGroup } = res\n  ptrs = relPointer(ptrs, parent)\n  Object.keys(byGroup).forEach(k => {\n    byGroup[k] = relPointer(byGroup[k], parent)\n  })\n  return { ptrs, byGroup }\n}\n\n// turn any matchable input intp a list of matches\nexport const parseRegs = function (regs, opts, world) {\n  const one = world.methods.one\n  if (typeof regs === 'number') {\n    regs = String(regs)\n  }\n  // support param as string\n  if (typeof regs === 'string') {\n    regs = one.killUnicode(regs, world)\n    regs = one.parseMatch(regs, opts, world)\n  }\n  return regs\n}\n\nconst isObject = val => {\n  return Object.prototype.toString.call(val) === '[object Object]'\n}\n\n// did they pass-in a compromise object?\nexport const isView = val => val && isObject(val) && val.isView === true\n\nexport const isNet = val => val && isObject(val) && val.isNet === true\n", "import { fixPointers, isView, isNet, parseRegs } from './_lib.js'\n\nconst match = function (regs, group, opts) {\n  const one = this.methods.one\n  // support param as view object\n  if (isView(regs)) {\n    return this.intersection(regs)\n  }\n  // support a compiled set of matches\n  if (isNet(regs)) {\n    return this.sweep(regs, { tagger: false }).view.settle()\n  }\n  regs = parseRegs(regs, opts, this.world)\n  let todo = { regs, group }\n  let res = one.match(this.docs, todo, this._cache)\n  let { ptrs, byGroup } = fixPointers(res, this.fullPointer)\n  let view = this.toView(ptrs)\n  view._groups = byGroup\n  return view\n}\n\nconst matchOne = function (regs, group, opts) {\n  const one = this.methods.one\n  // support at view as a param\n  if (isView(regs)) {\n    return this.intersection(regs).eq(0)\n  }\n  // support a compiled set of matches\n  if (isNet(regs)) {\n    return this.sweep(regs, { tagger: false, matchOne: true }).view\n  }\n  regs = parseRegs(regs, opts, this.world)\n  let todo = { regs, group, justOne: true }\n  let res = one.match(this.docs, todo, this._cache)\n  let { ptrs, byGroup } = fixPointers(res, this.fullPointer)\n  let view = this.toView(ptrs)\n  view._groups = byGroup\n  return view\n}\n\nconst has = function (regs, group, opts) {\n  const one = this.methods.one\n  // support view as input\n  if (isView(regs)) {\n    let ptrs = this.intersection(regs).fullPointer\n    return ptrs.length > 0\n  }\n  // support a compiled set of matches\n  if (isNet(regs)) {\n    return this.sweep(regs, { tagger: false }).view.found\n  }\n  regs = parseRegs(regs, opts, this.world)\n  let todo = { regs, group, justOne: true }\n  let ptrs = one.match(this.docs, todo, this._cache).ptrs\n  return ptrs.length > 0\n}\n\n// 'if'\nconst ifFn = function (regs, group, opts) {\n  const one = this.methods.one\n  // support view as input\n  if (isView(regs)) {\n    return this.filter(m => m.intersection(regs).found)\n  }\n  // support a compiled set of matches\n  if (isNet(regs)) {\n    let m = this.sweep(regs, { tagger: false }).view.settle()\n    return this.if(m) //recurse with result\n  }\n  regs = parseRegs(regs, opts, this.world)\n  let todo = { regs, group, justOne: true }\n  let ptrs = this.fullPointer\n  let cache = this._cache || []\n  ptrs = ptrs.filter((ptr, i) => {\n    let m = this.update([ptr])\n    let res = one.match(m.docs, todo, cache[i]).ptrs\n    return res.length > 0\n  })\n  let view = this.update(ptrs)\n  // try and reconstruct the cache\n  if (this._cache) {\n    view._cache = ptrs.map(ptr => cache[ptr[0]])\n  }\n  return view\n}\n\nconst ifNo = function (regs, group, opts) {\n  const { methods } = this\n  const one = methods.one\n  // support a view object as input\n  if (isView(regs)) {\n    return this.filter(m => !m.intersection(regs).found)\n  }\n  // support a compiled set of matches\n  if (isNet(regs)) {\n    let m = this.sweep(regs, { tagger: false }).view.settle()\n    return this.ifNo(m)\n  }\n  // otherwise parse the match string\n  regs = parseRegs(regs, opts, this.world)\n  let cache = this._cache || []\n  let view = this.filter((m, i) => {\n    let todo = { regs, group, justOne: true }\n    let ptrs = one.match(m.docs, todo, cache[i]).ptrs\n    return ptrs.length === 0\n  })\n  // try to reconstruct the cache\n  if (this._cache) {\n    view._cache = view.ptrs.map(ptr => cache[ptr[0]])\n  }\n  return view\n}\n\nexport default { matchOne, match, has, if: ifFn, ifNo }\n", "const before = function (regs, group, opts) {\n  const { indexN } = this.methods.one.pointer\n  let pre = []\n  let byN = indexN(this.fullPointer)\n  Object.keys(byN).forEach(k => {\n    // check only the earliest match in the sentence\n    let first = byN[k].sort((a, b) => (a[1] > b[1] ? 1 : -1))[0]\n    if (first[1] > 0) {\n      pre.push([first[0], 0, first[1]])\n    }\n  })\n  let preWords = this.toView(pre)\n  if (!regs) {\n    return preWords\n  }\n  return preWords.match(regs, group, opts)\n}\n\nconst after = function (regs, group, opts) {\n  const { indexN } = this.methods.one.pointer\n  let post = []\n  let byN = indexN(this.fullPointer)\n  let document = this.document\n  Object.keys(byN).forEach(k => {\n    // check only the latest match in the sentence\n    let last = byN[k].sort((a, b) => (a[1] > b[1] ? -1 : 1))[0]\n    let [n, , end] = last\n    if (end < document[n].length) {\n      post.push([n, end, document[n].length])\n    }\n  })\n  let postWords = this.toView(post)\n  if (!regs) {\n    return postWords\n  }\n  return postWords.match(regs, group, opts)\n}\n\nconst growLeft = function (regs, group, opts) {\n  if (typeof regs === 'string') {\n    regs = this.world.methods.one.parseMatch(regs, opts, this.world)\n  }\n  regs[regs.length - 1].end = true // ensure matches are beside us ←\n  let ptrs = this.fullPointer\n  this.forEach((m, n) => {\n    let more = m.before(regs, group)\n    if (more.found) {\n      let terms = more.terms()\n      ptrs[n][1] -= terms.length\n      ptrs[n][3] = terms.docs[0][0].id\n    }\n  })\n  return this.update(ptrs)\n}\n\nconst growRight = function (regs, group, opts) {\n  if (typeof regs === 'string') {\n    regs = this.world.methods.one.parseMatch(regs, opts, this.world)\n  }\n  regs[0].start = true // ensure matches are beside us →\n  let ptrs = this.fullPointer\n  this.forEach((m, n) => {\n    let more = m.after(regs, group)\n    if (more.found) {\n      let terms = more.terms()\n      ptrs[n][2] += terms.length\n      ptrs[n][4] = null //remove end-id\n    }\n  })\n  return this.update(ptrs)\n}\n\nconst grow = function (regs, group, opts) {\n  return this.growRight(regs, group, opts).growLeft(regs, group, opts)\n}\n\nexport default { before, after, growLeft, growRight, grow }\n", "const combine = function (left, right) {\n  return [left[0], left[1], right[2]]\n}\n\nconst isArray = function (arr) {\n  return Object.prototype.toString.call(arr) === '[object Array]'\n}\n\nconst getDoc = (reg, view, group) => {\n  if (typeof reg === 'string' || isArray(reg)) {\n    return view.match(reg, group)\n  }\n  if (!reg) {\n    return view.none()\n  }\n  return reg\n}\n\nconst addIds = function (ptr, view) {\n  let [n, start, end] = ptr\n  if (view.document[n] && view.document[n][start]) {\n    ptr[3] = ptr[3] || view.document[n][start].id\n    if (view.document[n][end - 1]) {\n      ptr[4] = ptr[4] || view.document[n][end - 1].id\n    }\n  }\n  return ptr\n}\n\nconst methods = {}\n// [before], [match], [after]\nmethods.splitOn = function (m, group) {\n  const { splitAll } = this.methods.one.pointer\n  let splits = getDoc(m, this, group).fullPointer\n  let all = splitAll(this.fullPointer, splits)\n  let res = []\n  all.forEach(o => {\n    res.push(o.passthrough)\n    res.push(o.before)\n    res.push(o.match)\n    res.push(o.after)\n  })\n  res = res.filter(p => p)\n  res = res.map(p => addIds(p, this))\n  return this.update(res)\n}\n\n// [before], [match after]\nmethods.splitBefore = function (m, group) {\n  const { splitAll } = this.methods.one.pointer\n  let splits = getDoc(m, this, group).fullPointer\n  let all = splitAll(this.fullPointer, splits)\n  // repair matches to favor [match, after]\n  // - instead of [before, match]\n  for (let i = 0; i < all.length; i += 1) {\n    // move a before to a preceding after\n    if (!all[i].after && all[i + 1] && all[i + 1].before) {\n      // ensure it's from the same original sentence\n      if (all[i].match && all[i].match[0] === all[i + 1].before[0]) {\n        all[i].after = all[i + 1].before\n        delete all[i + 1].before\n      }\n    }\n  }\n\n  let res = []\n  all.forEach(o => {\n    res.push(o.passthrough)\n    res.push(o.before)\n    // a, [x, b]\n    if (o.match && o.after) {\n      res.push(combine(o.match, o.after))\n    } else {\n      // a, [x], b\n      res.push(o.match)\n    }\n  })\n  res = res.filter(p => p)\n  res = res.map(p => addIds(p, this))\n  return this.update(res)\n}\n\n// [before match], [after]\nmethods.splitAfter = function (m, group) {\n  const { splitAll } = this.methods.one.pointer\n  let splits = getDoc(m, this, group).fullPointer\n  let all = splitAll(this.fullPointer, splits)\n  let res = []\n  all.forEach(o => {\n    res.push(o.passthrough)\n    if (o.before && o.match) {\n      res.push(combine(o.before, o.match))\n    } else {\n      res.push(o.before)\n      res.push(o.match)\n    }\n    res.push(o.after)\n  })\n  res = res.filter(p => p)\n  res = res.map(p => addIds(p, this))\n  return this.update(res)\n}\nmethods.split = methods.splitAfter\n\nexport default methods\n", "// check if two pointers are perfectly consecutive\nconst isNeighbour = function (ptrL, ptrR) {\n  // validate\n  if (!ptrL || !ptrR) {\n    return false\n  }\n  // same sentence\n  if (ptrL[0] !== ptrR[0]) {\n    return false\n  }\n  // ensure R starts where L ends\n  return ptrL[2] === ptrR[1]\n}\n\n// join two neighbouring words, if they both match\nconst mergeIf = function (doc, lMatch, rMatch) {\n  const world = doc.world\n  const parseMatch = world.methods.one.parseMatch\n  lMatch = lMatch || '.$' //defaults\n  rMatch = rMatch || '^.'\n  let leftMatch = parseMatch(lMatch, {}, world)\n  let rightMatch = parseMatch(rMatch, {}, world)\n  // ensure end-requirement to left-match, start-requiremnts to right match\n  leftMatch[leftMatch.length - 1].end = true\n  rightMatch[0].start = true\n  // let's get going.\n  let ptrs = doc.fullPointer\n  let res = [ptrs[0]]\n  for (let i = 1; i < ptrs.length; i += 1) {\n    let ptrL = res[res.length - 1]\n    let ptrR = ptrs[i]\n    let left = doc.update([ptrL])\n    let right = doc.update([ptrR])\n    // should we marge left+right?\n    if (isNeighbour(ptrL, ptrR) && left.has(leftMatch) && right.has(rightMatch)) {\n      // merge right ptr into existing result\n      res[res.length - 1] = [ptrL[0], ptrL[1], ptrR[2], ptrL[3], ptrR[4]]\n    } else {\n      res.push(ptrR)\n    }\n  }\n  // return new pointers\n  return doc.update(res)\n}\n\nconst methods = {\n  //  merge only if conditions are met\n  joinIf: function (lMatch, rMatch) {\n    return mergeIf(this, lMatch, rMatch)\n  },\n  // merge all neighbouring matches\n  join: function () {\n    return mergeIf(this)\n  },\n}\nexport default methods\n", "import match from './match.js'\nimport lookaround from './lookaround.js'\nimport split from './split.js'\nimport join from './join.js'\n\nconst methods = Object.assign({}, match, lookaround, split, join)\n// aliases\nmethods.lookBehind = methods.before\nmethods.lookBefore = methods.before\n\nmethods.lookAhead = methods.after\nmethods.lookAfter = methods.after\n\nmethods.notIf = methods.ifNo\nconst matchAPI = function (View) {\n  Object.assign(View.prototype, methods)\n}\nexport default matchAPI\n", "// match  'foo /yes/' and not 'foo/no/bar'\nconst bySlashes = /(?:^|\\s)([![^]*(?:<[^<]*>)?\\/.*?[^\\\\/]\\/[?\\]+*$~]*)(?:\\s|$)/\n// match '(yes) but not foo(no)bar'\nconst byParentheses = /([!~[^]*(?:<[^<]*>)?\\([^)]+[^\\\\)]\\)[?\\]+*$~]*)(?:\\s|$)/\n// okay\nconst byWord = / /g\n\nconst isBlock = str => {\n  return /^[![^]*(<[^<]*>)?\\(/.test(str) && /\\)[?\\]+*$~]*$/.test(str)\n}\nconst isReg = str => {\n  return /^[![^]*(<[^<]*>)?\\//.test(str) && /\\/[?\\]+*$~]*$/.test(str)\n}\n\nconst cleanUp = function (arr) {\n  arr = arr.map(str => str.trim())\n  arr = arr.filter(str => str)\n  return arr\n}\n\nconst parseBlocks = function (txt) {\n  // parse by /regex/ first\n  let arr = txt.split(bySlashes)\n  let res = []\n  // parse by (blocks), next\n  arr.forEach(str => {\n    if (isReg(str)) {\n      res.push(str)\n      return\n    }\n    res = res.concat(str.split(byParentheses))\n  })\n  res = cleanUp(res)\n  // split by spaces, now\n  let final = []\n  res.forEach(str => {\n    if (isBlock(str)) {\n      final.push(str)\n    } else if (isReg(str)) {\n      final.push(str)\n    } else {\n      final = final.concat(str.split(byWord))\n    }\n  })\n  final = cleanUp(final)\n  return final\n}\nexport default parseBlocks\n", "const hasMinMax = /\\{([0-9]+)?(, *[0-9]*)?\\}/\nconst andSign = /&&/\n// const hasDash = /\\p{Letter}[-–—]\\p{Letter}/u\nconst captureName = new RegExp(/^<\\s*(\\S+)\\s*>/)\n/* break-down a match expression into this:\n{\n  word:'',\n  tag:'',\n  regex:'',\n\n  start:false,\n  end:false,\n  negative:false,\n  anything:false,\n  greedy:false,\n  optional:false,\n\n  named:'',\n  choices:[],\n}\n*/\nconst titleCase = str => str.charAt(0).toUpperCase() + str.substring(1)\nconst end = (str) => str.charAt(str.length - 1)\nconst start = (str) => str.charAt(0)\nconst stripStart = (str) => str.substring(1)\nconst stripEnd = (str) => str.substring(0, str.length - 1)\n\nconst stripBoth = function (str) {\n  str = stripStart(str)\n  str = stripEnd(str)\n  return str\n}\n//\nconst parseToken = function (w, opts) {\n  let obj = {}\n  //collect any flags (do it twice)\n  for (let i = 0; i < 2; i += 1) {\n    //end-flag\n    if (end(w) === '$') {\n      obj.end = true\n      w = stripEnd(w)\n    }\n    //front-flag\n    if (start(w) === '^') {\n      obj.start = true\n      w = stripStart(w)\n    }\n    if (end(w) === '?') {\n      obj.optional = true\n      w = stripEnd(w)\n    }\n    //capture group (this one can span multiple-terms)\n    if (start(w) === '[' || end(w) === ']') {\n      obj.group = null\n      if (start(w) === '[') {\n        obj.groupStart = true\n      }\n      if (end(w) === ']') {\n        obj.groupEnd = true\n      }\n      w = w.replace(/^\\[/, '')\n      w = w.replace(/\\]$/, '')\n      // Use capture group name\n      if (start(w) === '<') {\n        const res = captureName.exec(w)\n        if (res.length >= 2) {\n          obj.group = res[1]\n          w = w.replace(res[0], '')\n        }\n      }\n    }\n    //back-flags\n    if (end(w) === '+') {\n      obj.greedy = true\n      w = stripEnd(w)\n    }\n    if (w !== '*' && end(w) === '*' && w !== '\\\\*') {\n      obj.greedy = true\n      w = stripEnd(w)\n    }\n    if (start(w) === '!') {\n      obj.negative = true\n      // obj.optional = true\n      w = stripStart(w)\n    }\n    //soft-match\n    if (start(w) === '~' && end(w) === '~' && w.length > 2) {\n      w = stripBoth(w)\n      obj.fuzzy = true\n      obj.min = opts.fuzzy || 0.85\n      if (/\\(/.test(w) === false) {\n        obj.word = w\n        return obj\n      }\n    }\n\n    //regex\n    if (start(w) === '/' && end(w) === '/') {\n      w = stripBoth(w)\n      if (opts.caseSensitive) {\n        obj.use = 'text'\n      }\n      obj.regex = new RegExp(w) //potential vuln - security/detect-non-literal-regexp\n      return obj\n    }\n\n    // support foo{1,9}\n    if (hasMinMax.test(w) === true) {\n      w = w.replace(hasMinMax, (_a, b, c) => {\n        if (c === undefined) {\n          // '{3}'\tExactly three times\n          obj.min = Number(b)\n          obj.max = Number(b)\n        } else {\n          c = c.replace(/, */, '')\n          if (b === undefined) {\n            // '{,9}' implied zero min\n            obj.min = 0\n            obj.max = Number(c)\n          } else {\n            // '{2,4}' Two to four times\n            obj.min = Number(b)\n            // '{3,}' Three or more times\n            obj.max = Number(c || 999)\n          }\n        }\n        // use same method as '+'\n        obj.greedy = true\n        // 0 as min means the same as '?'\n        if (!obj.min) {\n          obj.optional = true\n        }\n        return ''\n      })\n    }\n\n    //wrapped-flags\n    if (start(w) === '(' && end(w) === ')') {\n      // support (one && two)\n      if (andSign.test(w)) {\n        obj.choices = w.split(andSign)\n        obj.operator = 'and'\n      } else {\n        obj.choices = w.split('|')\n        obj.operator = 'or'\n      }\n      //remove '(' and ')'\n      obj.choices[0] = stripStart(obj.choices[0])\n      let last = obj.choices.length - 1\n      obj.choices[last] = stripEnd(obj.choices[last])\n      // clean up the results\n      obj.choices = obj.choices.map(s => s.trim())\n      obj.choices = obj.choices.filter(s => s)\n      //recursion alert!\n      obj.choices = obj.choices.map(str => {\n        return str.split(/ /g).map(s => parseToken(s, opts))\n      })\n      w = ''\n    }\n\n    //root/sense overloaded\n    if (start(w) === '{' && end(w) === '}') {\n      w = stripBoth(w)\n      // obj.sense = w\n      obj.root = w\n      if (/\\//.test(w)) {\n        let split = obj.root.split(/\\//)\n        obj.root = split[0]\n        obj.pos = split[1]\n        if (obj.pos === 'adj') {\n          obj.pos = 'Adjective'\n        }\n        // titlecase\n        obj.pos = obj.pos.charAt(0).toUpperCase() + obj.pos.substr(1).toLowerCase()\n        // add sense-number too\n        if (split[2] !== undefined) {\n          obj.sense = split[2]\n        }\n      }\n      return obj\n    }\n    //chunks\n    if (start(w) === '<' && end(w) === '>') {\n      w = stripBoth(w)\n      obj.chunk = titleCase(w)\n      obj.greedy = true\n      return obj\n    }\n    if (start(w) === '%' && end(w) === '%') {\n      w = stripBoth(w)\n      obj.switch = w\n      return obj\n    }\n  }\n  //do the actual token content\n  if (start(w) === '#') {\n    obj.tag = stripStart(w)\n    obj.tag = titleCase(obj.tag)\n    return obj\n  }\n  //dynamic function on a term object\n  if (start(w) === '@') {\n    obj.method = stripStart(w)\n    return obj\n  }\n  if (w === '.') {\n    obj.anything = true\n    return obj\n  }\n  //support alone-astrix\n  if (w === '*') {\n    obj.anything = true\n    obj.greedy = true\n    obj.optional = true\n    return obj\n  }\n  if (w) {\n    //somehow handle encoded-chars?\n    w = w.replace('\\\\*', '*')\n    w = w.replace('\\\\.', '.')\n    if (opts.caseSensitive) {\n      obj.use = 'text'\n    } else {\n      w = w.toLowerCase()\n    }\n    obj.word = w\n  }\n  return obj\n}\nexport default parseToken\n", "const hasDash = /[a-z0-9][-–—][a-z]/i\n\n// match 're-do' -> ['re','do']\nconst splitHyphens = function (regs, world) {\n  let prefixes = world.model.one.prefixes\n  for (let i = regs.length - 1; i >= 0; i -= 1) {\n    let reg = regs[i]\n    if (reg.word && hasDash.test(reg.word)) {\n      let words = reg.word.split(/[-–—]/g)\n      // don't split 're-cycle', etc\n      if (prefixes.hasOwnProperty(words[0])) {\n        continue\n      }\n      words = words.filter(w => w).reverse()\n      regs.splice(i, 1)\n      words.forEach(w => {\n        let obj = Object.assign({}, reg)\n        obj.word = w\n        regs.splice(i, 0, obj)\n      })\n    }\n  }\n  return regs\n}\nexport default splitHyphens", "\n// add all conjugations of this verb\nconst addVerbs = function (token, world) {\n  let { all } = world.methods.two.transform.verb || {}\n  let str = token.root\n  if (!all) {\n    return []\n  }\n  return all(str, world.model)\n}\n\n// add all inflections of this noun\nconst addNoun = function (token, world) {\n  let { all } = world.methods.two.transform.noun || {}\n  if (!all) {\n    return [token.root]\n  }\n  return all(token.root, world.model)\n}\n\n// add all inflections of this adjective\nconst addAdjective = function (token, world) {\n  let { all } = world.methods.two.transform.adjective || {}\n  if (!all) {\n    return [token.root]\n  }\n  return all(token.root, world.model)\n}\n\n// turn '{walk}' into 'walking', 'walked', etc\nconst inflectRoot = function (regs, world) {\n  // do we have compromise/two?\n  regs = regs.map(token => {\n    // a reg to convert '{foo}'\n    if (token.root) {\n      // check if compromise/two is loaded\n      if (world.methods.two && world.methods.two.transform) {\n        let choices = []\n        // have explicitly set from POS - '{sweet/adjective}'\n        if (token.pos) {\n          if (token.pos === 'Verb') {\n            choices = choices.concat(addVerbs(token, world))\n          } else if (token.pos === 'Noun') {\n            choices = choices.concat(addNoun(token, world))\n          } else if (token.pos === 'Adjective') {\n            choices = choices.concat(addAdjective(token, world))\n          }\n        } else {\n          // do verb/noun/adj by default\n          choices = choices.concat(addVerbs(token, world))\n          choices = choices.concat(addNoun(token, world))\n          choices = choices.concat(addAdjective(token, world))\n        }\n        choices = choices.filter(str => str)\n        if (choices.length > 0) {\n          token.operator = 'or'\n          token.fastOr = new Set(choices)\n        }\n      } else {\n        // if no compromise/two, drop down into 'machine' lookup\n        token.machine = token.root\n        delete token.id\n        delete token.root\n      }\n    }\n    return token\n  })\n\n  return regs\n}\nexport default inflectRoot", "// name any [unnamed] capture-groups with a number\nconst nameGroups = function (regs) {\n  let index = 0\n  let inGroup = null\n  //'fill in' capture groups between start-end\n  for (let i = 0; i < regs.length; i++) {\n    const token = regs[i]\n    if (token.groupStart === true) {\n      inGroup = token.group\n      if (inGroup === null) {\n        inGroup = String(index)\n        index += 1\n      }\n    }\n    if (inGroup !== null) {\n      token.group = inGroup\n    }\n    if (token.groupEnd === true) {\n      inGroup = null\n    }\n  }\n  return regs\n}\n\n// optimize an 'or' lookup, when the (a|b|c) list is simple or multi-word\nconst doFastOrMode = function (tokens) {\n  return tokens.map(token => {\n    if (token.choices !== undefined) {\n      // make sure it's an OR\n      if (token.operator !== 'or') {\n        return token\n      }\n      if (token.fuzzy === true) {\n        return token\n      }\n      // are they all straight-up words? then optimize them.\n      let shouldPack = token.choices.every(block => {\n        if (block.length !== 1) {\n          return false\n        }\n        let reg = block[0]\n        // ~fuzzy~ words need more care\n        if (reg.fuzzy === true) {\n          return false\n        }\n        // ^ and $ get lost in fastOr\n        if (reg.start || reg.end) {\n          return false\n        }\n        if (reg.word !== undefined && reg.negative !== true && reg.optional !== true && reg.method !== true) {\n          return true //reg is simple-enough\n        }\n        return false\n      })\n      if (shouldPack === true) {\n        token.fastOr = new Set()\n        token.choices.forEach(block => {\n          token.fastOr.add(block[0].word)\n        })\n        delete token.choices\n      }\n    }\n    return token\n  })\n}\n\n// support ~(a|b|c)~\nconst fuzzyOr = function (regs) {\n  return regs.map(reg => {\n    if (reg.fuzzy && reg.choices) {\n      // pass fuzzy-data to each OR choice\n      reg.choices.forEach(r => {\n        if (r.length === 1 && r[0].word) {\n          r[0].fuzzy = true\n          r[0].min = reg.min\n        }\n      })\n    }\n    return reg\n  })\n}\n\nconst postProcess = function (regs) {\n  // ensure all capture groups names are filled between start and end\n  regs = nameGroups(regs)\n  // convert 'choices' format to 'fastOr' format\n  regs = doFastOrMode(regs)\n  // support ~(foo|bar)~\n  regs = fuzzyOr(regs)\n  return regs\n}\nexport default postProcess\n", "import parseBlocks from './01-parseBlocks.js'\nimport parseToken from './02-parseToken.js'\nimport splitHyphens from './03-splitHyphens.js'\nimport inflectRoot from './04-inflect-root.js'\nimport postProcess from './05-postProcess.js'\n\n/** parse a match-syntax string into json */\nconst syntax = function (input, opts, world) {\n  // fail-fast\n  if (input === null || input === undefined || input === '') {\n    return []\n  }\n  opts = opts || {}\n  if (typeof input === 'number') {\n    input = String(input) //go for it?\n  }\n  let tokens = parseBlocks(input)\n  //turn them into objects\n  tokens = tokens.map(str => parseToken(str, opts))\n  // '~re-do~'\n  tokens = splitHyphens(tokens, world)\n  // '{walk}'\n  tokens = inflectRoot(tokens, world)\n  //clean up anything weird\n  tokens = postProcess(tokens, opts)\n  // console.log(tokens)\n  return tokens\n}\nexport default syntax\n", "const anyIntersection = function (setA, setB) {\n  for (let elem of setB) {\n    if (setA.has(elem)) {\n      return true\n    }\n  }\n  return false\n}\n// check words/tags against our cache\nconst failFast = function (regs, cache) {\n  for (let i = 0; i < regs.length; i += 1) {\n    let reg = regs[i]\n    if (reg.optional === true || reg.negative === true || reg.fuzzy === true) {\n      continue\n    }\n    // is the word missing from the cache?\n    if (reg.word !== undefined && cache.has(reg.word) === false) {\n      return true\n    }\n    // is the tag missing?\n    if (reg.tag !== undefined && cache.has('#' + reg.tag) === false) {\n      return true\n    }\n    // perform a speedup for fast-or\n    if (reg.fastOr && anyIntersection(reg.fastOr, cache) === false) {\n      return false\n    }\n  }\n  return false\n}\nexport default failFast\n", "// fuzzy-match (damerau-levenshtein)\n// Based on  tad-lispy /node-damerau-levenshtein\n// https://github.com/tad-lispy/node-damerau-levenshtein/blob/master/index.js\n// count steps (insertions, deletions, substitutions, or transpositions)\nconst editDistance = function (strA, strB) {\n  let aLength = strA.length,\n    bLength = strB.length\n  // fail-fast\n  if (aLength === 0) {\n    return bLength\n  }\n  if (bLength === 0) {\n    return aLength\n  }\n  // If the limit is not defined it will be calculate from this and that args.\n  let limit = (bLength > aLength ? bLength : aLength) + 1\n  if (Math.abs(aLength - bLength) > (limit || 100)) {\n    return limit || 100\n  }\n  // init the array\n  let matrix = []\n  for (let i = 0; i < limit; i++) {\n    matrix[i] = [i]\n    matrix[i].length = limit\n  }\n  for (let i = 0; i < limit; i++) {\n    matrix[0][i] = i\n  }\n  // Calculate matrix.\n  let j, a_index, b_index, cost, min, t\n  for (let i = 1; i <= aLength; ++i) {\n    a_index = strA[i - 1]\n    for (j = 1; j <= bLength; ++j) {\n      // Check the jagged distance total so far\n      if (i === j && matrix[i][j] > 4) {\n        return aLength\n      }\n      b_index = strB[j - 1]\n      cost = a_index === b_index ? 0 : 1 // Step 5\n      // Calculate the minimum (much faster than Math.min(...)).\n      min = matrix[i - 1][j] + 1 // Deletion.\n      if ((t = matrix[i][j - 1] + 1) < min) min = t // Insertion.\n      if ((t = matrix[i - 1][j - 1] + cost) < min) min = t // Substitution.\n      // Update matrix.\n      let shouldUpdate =\n        i > 1 && j > 1 && a_index === strB[j - 2] && strA[i - 2] === b_index && (t = matrix[i - 2][j - 2] + cost) < min\n      if (shouldUpdate) {\n        matrix[i][j] = t\n      } else {\n        matrix[i][j] = min\n      }\n    }\n  }\n  // return number of steps\n  return matrix[aLength][bLength]\n}\n// score similarity by from 0-1 (steps/length)\nconst fuzzyMatch = function (strA, strB, minLength = 3) {\n  if (strA === strB) {\n    return 1\n  }\n  //don't even bother on tiny strings\n  if (strA.length < minLength || strB.length < minLength) {\n    return 0\n  }\n  const steps = editDistance(strA, strB)\n  let length = Math.max(strA.length, strB.length)\n  let relative = length === 0 ? 0 : steps / length\n  let similarity = 1 - relative\n  return similarity\n}\nexport default fuzzyMatch\n", "// these methods are called with '@hasComma' in the match syntax\n// various unicode quotation-mark formats\nconst startQuote =\n  /([\\u0022\\uFF02\\u0027\\u201C\\u2018\\u201F\\u201B\\u201E\\u2E42\\u201A\\u00AB\\u2039\\u2035\\u2036\\u2037\\u301D\\u0060\\u301F])/\n\nconst endQuote = /([\\u0022\\uFF02\\u0027\\u201D\\u2019\\u00BB\\u203A\\u2032\\u2033\\u2034\\u301E\\u00B4])/\n\nconst hasHyphen = /^[-–—]$/\nconst hasDash = / [-–—]{1,3} /\n\n/** search the term's 'post' punctuation  */\nconst hasPost = (term, punct) => term.post.indexOf(punct) !== -1\n/** search the term's 'pre' punctuation  */\n// const hasPre = (term, punct) => term.pre.indexOf(punct) !== -1\n\nconst methods = {\n  /** does it have a quotation symbol?  */\n  hasQuote: term => startQuote.test(term.pre) || endQuote.test(term.post),\n  /** does it have a comma?  */\n  hasComma: term => hasPost(term, ','),\n  /** does it end in a period? */\n  hasPeriod: term => hasPost(term, '.') === true && hasPost(term, '...') === false,\n  /** does it end in an exclamation */\n  hasExclamation: term => hasPost(term, '!'),\n  /** does it end with a question mark? */\n  hasQuestionMark: term => hasPost(term, '?') || hasPost(term, '¿'),\n  /** is there a ... at the end? */\n  hasEllipses: term => hasPost(term, '..') || hasPost(term, '…'),\n  /** is there a semicolon after term word? */\n  hasSemicolon: term => hasPost(term, ';'),\n  /** is there a colon after term word? */\n  hasColon: term => hasPost(term, ':'),\n  /** is there a slash '/' in term word? */\n  hasSlash: term => /\\//.test(term.text),\n  /** a hyphen connects two words like-term */\n  hasHyphen: term => hasHyphen.test(term.post) || hasHyphen.test(term.pre),\n  /** a dash separates words - like that */\n  hasDash: term => hasDash.test(term.post) || hasDash.test(term.pre),\n  /** is it multiple words combinded */\n  hasContraction: term => Boolean(term.implicit),\n  /** is it an acronym */\n  isAcronym: term => term.tags.has('Acronym'),\n  /** does it have any tags */\n  isKnown: term => term.tags.size > 0,\n  /** uppercase first letter, then a lowercase */\n  isTitleCase: term => /^\\p{Lu}[a-z'\\u00C0-\\u00FF]/u.test(term.text),\n  /** uppercase all letters */\n  isUpperCase: term => /^\\p{Lu}+$/u.test(term.text),\n}\n// aliases\nmethods.hasQuotation = methods.hasQuote\n\nexport default methods\n", "import fuzzy from './_fuzzy.js'\nimport methods from '../../termMethods.js' //this should load off of 'methods.one.termMethods'\n\n//declare it up here\nlet wrapMatch = function () { }\n/** ignore optional/greedy logic, straight-up term match*/\nconst doesMatch = function (term, reg, index, length) {\n  // support '.'\n  if (reg.anything === true) {\n    return true\n  }\n  // support '^' (in parentheses)\n  if (reg.start === true && index !== 0) {\n    return false\n  }\n  // support '$' (in parentheses)\n  if (reg.end === true && index !== length - 1) {\n    return false\n  }\n  // match an id\n  if (reg.id !== undefined && reg.id === term.id) {\n    return true\n  }\n  //support a text match\n  if (reg.word !== undefined) {\n    // check case-sensitivity, etc\n    if (reg.use) {\n      return reg.word === term[reg.use]\n    }\n    //match contractions, machine-form\n    if (term.machine !== null && term.machine === reg.word) {\n      return true\n    }\n    // term aliases for slashes and things\n    if (term.alias !== undefined && term.alias.hasOwnProperty(reg.word)) {\n      return true\n    }\n    // support ~ fuzzy match\n    if (reg.fuzzy === true) {\n      if (reg.word === term.root) {\n        return true\n      }\n      let score = fuzzy(reg.word, term.normal)\n      if (score >= reg.min) {\n        return true\n      }\n    }\n    // match slashes and things\n    if (term.alias && term.alias.some(str => str === reg.word)) {\n      return true\n    }\n    //match either .normal or .text\n    return reg.word === term.text || reg.word === term.normal\n  }\n  //support #Tag\n  if (reg.tag !== undefined) {\n    return term.tags.has(reg.tag) === true\n  }\n  //support @method\n  if (reg.method !== undefined) {\n    if (typeof methods[reg.method] === 'function' && methods[reg.method](term) === true) {\n      return true\n    }\n    return false\n  }\n  //support whitespace/punctuation\n  if (reg.pre !== undefined) {\n    return term.pre && term.pre.includes(reg.pre)\n  }\n  if (reg.post !== undefined) {\n    return term.post && term.post.includes(reg.post)\n  }\n  //support /reg/\n  if (reg.regex !== undefined) {\n    let str = term.normal\n    if (reg.use) {\n      str = term[reg.use]\n    }\n    return reg.regex.test(str)\n  }\n  //support <chunk>\n  if (reg.chunk !== undefined) {\n    return term.chunk === reg.chunk\n  }\n  //support %Noun|Verb%\n  if (reg.switch !== undefined) {\n    return term.switch === reg.switch\n  }\n  //support {machine}\n  if (reg.machine !== undefined) {\n    return term.normal === reg.machine || term.machine === reg.machine || term.root === reg.machine\n  }\n  //support {word/sense}\n  if (reg.sense !== undefined) {\n    return term.sense === reg.sense\n  }\n  // support optimized (one|two)\n  if (reg.fastOr !== undefined) {\n    // {work/verb} must be a verb\n    if (reg.pos && !term.tags.has(reg.pos)) {\n      return null\n    }\n    let str = term.root || term.implicit || term.machine || term.normal\n    return reg.fastOr.has(str) || reg.fastOr.has(term.text)\n  }\n  //support slower (one|two)\n  if (reg.choices !== undefined) {\n    // try to support && operator\n    if (reg.operator === 'and') {\n      // must match them all\n      return reg.choices.every(r => wrapMatch(term, r, index, length))\n    }\n    // or must match one\n    return reg.choices.some(r => wrapMatch(term, r, index, length))\n  }\n  return false\n}\n// wrap result for !negative match logic\nwrapMatch = function (t, reg, index, length) {\n  let result = doesMatch(t, reg, index, length)\n  if (reg.negative === true) {\n    return !result\n  }\n  return result\n}\nexport default wrapMatch\n", "import doesMatch from '../../term/doesMatch.js'\n\n// for greedy checking, we no longer care about the reg.start\n// value, and leaving it can cause failures for anchored greedy\n// matches.  ditto for end-greedy matches: we need an earlier non-\n// ending match to succceed until we get to the actual end.\nconst getGreedy = function (state, endReg) {\n  let reg = Object.assign({}, state.regs[state.r], { start: false, end: false })\n  let start = state.t\n  for (; state.t < state.terms.length; state.t += 1) {\n    //stop for next-reg match\n    if (endReg && doesMatch(state.terms[state.t], endReg, state.start_i + state.t, state.phrase_length)) {\n      return state.t\n    }\n    let count = state.t - start + 1\n    // is it max-length now?\n    if (reg.max !== undefined && count === reg.max) {\n      return state.t\n    }\n    //stop here\n    if (doesMatch(state.terms[state.t], reg, state.start_i + state.t, state.phrase_length) === false) {\n      // is it too short?\n      if (reg.min !== undefined && count < reg.min) {\n        return null\n      }\n      return state.t\n    }\n  }\n  return state.t\n}\n\nconst greedyTo = function (state, nextReg) {\n  let t = state.t\n  //if there's no next one, just go off the end!\n  if (!nextReg) {\n    return state.terms.length\n  }\n  //otherwise, we're looking for the next one\n  for (; t < state.terms.length; t += 1) {\n    if (doesMatch(state.terms[t], nextReg, state.start_i + t, state.phrase_length) === true) {\n      // console.log(`greedyTo ${state.terms[t].normal}`)\n      return t\n    }\n  }\n  //guess it doesn't exist, then.\n  return null\n}\n\nconst isEndGreedy = function (reg, state) {\n  if (reg.end === true && reg.greedy === true) {\n    if (state.start_i + state.t < state.phrase_length - 1) {\n      let tmpReg = Object.assign({}, reg, { end: false })\n      if (doesMatch(state.terms[state.t], tmpReg, state.start_i + state.t, state.phrase_length) === true) {\n        // console.log(`endGreedy ${state.terms[state.t].normal}`)\n        return true\n      }\n    }\n  }\n  return false\n}\n\nexport { isEndGreedy, greedyTo, getGreedy }", "\n\nexport const getGroup = function (state, term_index) {\n  if (state.groups[state.inGroup]) {\n    return state.groups[state.inGroup]\n  }\n  state.groups[state.inGroup] = {\n    start: term_index,\n    length: 0,\n  }\n  return state.groups[state.inGroup]\n}\n", "import { greedyTo } from './logic/greedy.js'\nimport { getGroup } from '../_lib.js'\n\n//support 'unspecific greedy' .* properly\n// its logic is 'greedy until', where it's looking for the next token\n// '.+ foo' means we check for 'foo', indefinetly\nconst doAstrix = function (state) {\n  let { regs } = state\n  let reg = regs[state.r]\n\n  let skipto = greedyTo(state, regs[state.r + 1])\n  //maybe we couldn't find it\n  if (skipto === null || skipto === 0) {\n    return null\n  }\n  // ensure it's long enough\n  if (reg.min !== undefined && skipto - state.t < reg.min) {\n    return null\n  }\n  // reduce it back, if it's too long\n  if (reg.max !== undefined && skipto - state.t > reg.max) {\n    state.t = state.t + reg.max\n    return true\n  }\n  // set the group result\n  if (state.hasGroup === true) {\n    const g = getGroup(state, state.t)\n    g.length = skipto - state.t\n  }\n  state.t = skipto\n  // log(`✓ |greedy|`)\n  return true\n}\nexport default doAstrix", "import doesMatch from '../../term/doesMatch.js'\n\nconst isArray = function (arr) {\n  return Object.prototype.toString.call(arr) === '[object Array]'\n}\n\nexport const doOrBlock = function (state, skipN = 0) {\n  let block = state.regs[state.r]\n  let wasFound = false\n  // do each multiword sequence\n  for (let c = 0; c < block.choices.length; c += 1) {\n    // try to match this list of tokens\n    let regs = block.choices[c]\n    if (!isArray(regs)) {\n      return false\n    }\n    wasFound = regs.every((cr, w_index) => {\n      let extra = 0\n      let t = state.t + w_index + skipN + extra\n      if (state.terms[t] === undefined) {\n        return false\n      }\n      let foundBlock = doesMatch(state.terms[t], cr, t + state.start_i, state.phrase_length)\n      // this can be greedy - '(foo+ bar)'\n      if (foundBlock === true && cr.greedy === true) {\n        for (let i = 1; i < state.terms.length; i += 1) {\n          let term = state.terms[t + i]\n          if (term) {\n            let keepGoing = doesMatch(term, cr, state.start_i + i, state.phrase_length)\n            if (keepGoing === true) {\n              extra += 1\n            } else {\n              break\n            }\n          }\n        }\n      }\n      skipN += extra\n      return foundBlock\n    })\n    if (wasFound) {\n      skipN += regs.length\n      break\n    }\n  }\n  // we found a match -  is it greedy though?\n  if (wasFound && block.greedy === true) {\n    return doOrBlock(state, skipN) // try it again!\n  }\n  return skipN\n}\n\nconst doAndBlock = function (state) {\n  let longest = 0\n  // all blocks must match, and we return the greediest match\n  let reg = state.regs[state.r]\n  let allDidMatch = reg.choices.every(block => {\n    //  for multi-word blocks, all must match\n    let allWords = block.every((cr, w_index) => {\n      let tryTerm = state.t + w_index\n      if (state.terms[tryTerm] === undefined) {\n        return false\n      }\n      return doesMatch(state.terms[tryTerm], cr, tryTerm, state.phrase_length)\n    })\n    if (allWords === true && block.length > longest) {\n      longest = block.length\n    }\n    return allWords\n  })\n  if (allDidMatch === true) {\n    // console.log(`doAndBlock ${state.terms[state.t].normal}`)\n    return longest\n  }\n  return false\n}\nexport { doAndBlock }", "import { doOrBlock } from './logic/and-or.js'\nimport { getGroup } from '../_lib.js'\n\nconst orBlock = function (state) {\n  const { regs } = state\n  let reg = regs[state.r]\n  let skipNum = doOrBlock(state)\n  // did we find a match?\n  if (skipNum) {\n    // handle 'not' logic\n    if (reg.negative === true) {\n      return null // die\n    }\n    // tuck in as named-group\n    if (state.hasGroup === true) {\n      const g = getGroup(state, state.t)\n      g.length += skipNum\n    }\n    // ensure we're at the end\n    if (reg.end === true) {\n      let end = state.phrase_length\n      if (state.t + state.start_i + skipNum !== end) {\n        return null\n      }\n    }\n    state.t += skipNum\n    // log(`✓ |found-or|`)\n    return true\n  } else if (!reg.optional) {\n    return null //die\n  }\n  return true\n}\nexport default orBlock", "import { doAndBlock } from './logic/and-or.js'\nimport { getGroup } from '../_lib.js'\n\n// '(foo && #Noun)' - require all matches on the term\nconst andBlock = function (state) {\n  const { regs } = state\n  let reg = regs[state.r]\n\n  let skipNum = doAndBlock(state)\n  if (skipNum) {\n    // handle 'not' logic\n    if (reg.negative === true) {\n      return null // die\n    }\n    if (state.hasGroup === true) {\n      const g = getGroup(state, state.t)\n      g.length += skipNum\n    }\n    // ensure we're at the end\n    if (reg.end === true) {\n      let end = state.phrase_length - 1\n      if (state.t + state.start_i !== end) {\n        return null\n      }\n    }\n    state.t += skipNum\n    // log(`✓ |found-and|`)\n    return true\n  } else if (!reg.optional) {\n    return null //die\n  }\n  return true\n}\nexport default andBlock", "import doesMatch from '../../term/doesMatch.js'\n\nconst negGreedy = function (state, reg, nextReg) {\n  let skip = 0\n  for (let t = state.t; t < state.terms.length; t += 1) {\n    let found = doesMatch(state.terms[t], reg, state.start_i + state.t, state.phrase_length)\n    // we don't want a match, here\n    if (found) {\n      break//stop going\n    }\n    // are we doing 'greedy-to'?\n    // - \"!foo+ after\"  should stop at 'after'\n    if (nextReg) {\n      found = doesMatch(state.terms[t], nextReg, state.start_i + state.t, state.phrase_length)\n      if (found) {\n        break\n      }\n    }\n    skip += 1\n    // is it max-length now?\n    if (reg.max !== undefined && skip === reg.max) {\n      break\n    }\n  }\n  if (skip === 0) {\n    return false //dead\n  }\n  // did we satisfy min for !foo{min,max}\n  if (reg.min && reg.min > skip) {\n    return false//dead\n  }\n  state.t += skip\n  // state.r += 1\n  return true\n}\n\nexport default negGreedy", "import matchTerm from '../term/doesMatch.js'\nimport negGreedy from './logic/negative-greedy.js'\n\n// '!foo' should match anything that isn't 'foo'\n// if it matches, return false\nconst doNegative = function (state) {\n  const { regs } = state\n  let reg = regs[state.r]\n\n  // match *anything* but this term\n  let tmpReg = Object.assign({}, reg)\n  tmpReg.negative = false // try removing it\n\n  // found it? if so, we die here\n  let found = matchTerm(state.terms[state.t], tmpReg, state.start_i + state.t, state.phrase_length)\n  if (found) {\n    return false//bye\n  }\n  // should we skip the term too?\n  if (reg.optional) {\n    // \"before after\" - \"before !foo? after\"\n    // does the next reg match the this term?\n    let nextReg = regs[state.r + 1]\n    if (nextReg) {\n      let fNext = matchTerm(state.terms[state.t], nextReg, state.start_i + state.t, state.phrase_length)\n      if (fNext) {\n        state.r += 1\n      } else if (nextReg.optional && regs[state.r + 2]) {\n        // ugh. ok,\n        // support \"!foo? extra? need\"\n        // but don't scan ahead more than that.\n        let fNext2 = matchTerm(state.terms[state.t], regs[state.r + 2], state.start_i + state.t, state.phrase_length)\n        if (fNext2) {\n          state.r += 2\n        }\n      }\n    }\n  }\n  // negative greedy - !foo+  - super hard!\n  if (reg.greedy) {\n    return negGreedy(state, tmpReg, regs[state.r + 1])\n  }\n  state.t += 1\n  return true\n}\nexport default doNegative", "import matchTerm from '../term/doesMatch.js'\n\n// 'foo? foo' matches are tricky.\nconst foundOptional = function (state) {\n  const { regs } = state\n  let reg = regs[state.r]\n  let term = state.terms[state.t]\n  // does the next reg match it too?\n  let nextRegMatched = matchTerm(term, regs[state.r + 1], state.start_i + state.t, state.phrase_length)\n  if (reg.negative || nextRegMatched) {\n    // but does the next reg match the next term??\n    // only skip if it doesn't\n    let nextTerm = state.terms[state.t + 1]\n    if (!nextTerm || !matchTerm(nextTerm, regs[state.r + 1], state.start_i + state.t, state.phrase_length)) {\n      state.r += 1\n    }\n  }\n}\n\nexport default foundOptional", "import { getGreedy } from './logic/greedy.js'\n\n// keep 'foo+' or 'foo*' going..\nconst greedyMatch = function (state) {\n  const { regs, phrase_length } = state\n  let reg = regs[state.r]\n  state.t = getGreedy(state, regs[state.r + 1])\n  if (state.t === null) {\n    return null //greedy was too short\n  }\n  // foo{2,4} - has a greed-minimum\n  if (reg.min && reg.min > state.t) {\n    return null //greedy was too short\n  }\n  // 'foo+$' - if also an end-anchor, ensure we really reached the end\n  if (reg.end === true && state.start_i + state.t !== phrase_length) {\n    return null //greedy didn't reach the end\n  }\n  return true\n}\nexport default greedyMatch", "// for: ['we', 'have']\n// a match for \"we have\" should work as normal\n// but matching \"we've\" should skip over implict terms\nconst contractionSkip = function (state) {\n  let term = state.terms[state.t]\n  let reg = state.regs[state.r]\n  // did we match the first part of a contraction?\n  if (term.implicit && state.terms[state.t + 1]) {\n    let nextTerm = state.terms[state.t + 1]\n    // ensure next word is implicit\n    if (!nextTerm.implicit) {\n      return\n    }\n    // we matched \"we've\" - skip-over [we, have]\n    if (reg.word === term.normal) {\n      state.t += 1\n    }\n    // also skip for @hasContraction\n    if (reg.method === 'hasContraction') {\n      state.t += 1\n    }\n  }\n}\nexport default contractionSkip", "import { getGroup } from '../_lib.js'\nimport foundOptional from './optional-match.js'\nimport greedyMatch from './greedy-match.js'\nimport contractionSkip from './contraction-skip.js'\n\n\n// '[foo]' should also be logged as a group\nconst setGroup = function (state, startAt) {\n  let reg = state.regs[state.r]\n  // Get or create capture group\n  const g = getGroup(state, startAt)\n  // Update group - add greedy or increment length\n  if (state.t > 1 && reg.greedy) {\n    g.length += state.t - startAt\n  } else {\n    g.length++\n  }\n}\n\n// when a reg matches a term\nconst simpleMatch = function (state) {\n  const { regs } = state\n  let reg = regs[state.r]\n  let term = state.terms[state.t]\n  let startAt = state.t\n  // if it's a negative optional match... :0\n  if (reg.optional && regs[state.r + 1] && reg.negative) {\n    return true\n  }\n  // okay, it was a match, but if it's optional too,\n  // we should check the next reg too, to skip it?\n  if (reg.optional && regs[state.r + 1]) {\n    foundOptional(state)\n  }\n  // Contraction skip:\n  // did we match the first part of a contraction?\n  if (term.implicit && state.terms[state.t + 1]) {\n    contractionSkip(state)\n  }\n  //advance to the next term!\n  state.t += 1\n  //check any ending '$' flags\n  //if this isn't the last term, refuse the match\n  if (reg.end === true && state.t !== state.terms.length && reg.greedy !== true) {\n    return null //die\n  }\n  // keep 'foo+' going...\n  if (reg.greedy === true) {\n    let alive = greedyMatch(state)\n    if (!alive) {\n      return null\n    }\n  }\n  // log '[foo]' as a group\n  if (state.hasGroup === true) {\n    setGroup(state, startAt)\n  }\n  return true\n}\nexport default simpleMatch", "import doAstrix from './steps/astrix.js'\nimport doOrBlock from './steps/or-block.js'\nimport doAndBlock from './steps/and-block.js'\nimport doNegative from './steps/negative.js'\nimport simpleMatch from './steps/simple-match.js'\nimport { isEndGreedy } from './steps/logic/greedy.js'\nimport matchTerm from './term/doesMatch.js'\n// i formally apologize for how complicated this is.\n\n/** \n * try a sequence of match tokens ('regs') \n * on a sequence of terms, \n * starting at this certain term.\n */\nconst tryHere = function (terms, regs, start_i, phrase_length) {\n  // console.log(`\\n\\n:start: '${terms[0].text}':`)\n  if (terms.length === 0 || regs.length === 0) {\n    return null\n  }\n  // all the variables that matter\n  let state = {\n    t: 0,\n    terms: terms,\n    r: 0,\n    regs: regs,\n    groups: {},\n    start_i: start_i,\n    phrase_length: phrase_length,\n    inGroup: null,\n  }\n\n  // we must satisfy every token in 'regs'\n  // if we get to the end, we have a match.\n  for (; state.r < regs.length; state.r += 1) {\n    let reg = regs[state.r]\n    // Check if this reg has a named capture group\n    state.hasGroup = Boolean(reg.group)\n    // Reuse previous capture group if same\n    if (state.hasGroup === true) {\n      state.inGroup = reg.group\n    } else {\n      state.inGroup = null\n    }\n    //have we run-out of terms?\n    if (!state.terms[state.t]) {\n      //are all remaining regs optional or negative?\n      const alive = regs.slice(state.r).some(remain => !remain.optional)\n      if (alive === false) {\n        break //done!\n      }\n      return null // die\n    }\n    // support 'unspecific greedy' .* properly\n    if (reg.anything === true && reg.greedy === true) {\n      let alive = doAstrix(state)\n      if (!alive) {\n        return null\n      }\n      continue\n    }\n    // slow-OR - multi-word OR (a|b|foo bar)\n    if (reg.choices !== undefined && reg.operator === 'or') {\n      let alive = doOrBlock(state)\n      if (!alive) {\n        return null\n      }\n      continue\n    }\n    // slow-AND - multi-word AND (#Noun && foo) blocks\n    if (reg.choices !== undefined && reg.operator === 'and') {\n      let alive = doAndBlock(state)\n      if (!alive) {\n        return null\n      }\n      continue\n    }\n    // support '.' as any-single\n    if (reg.anything === true) {\n      // '!.' negative anything should insta-fail\n      if (reg.negative && reg.anything) {\n        return null\n      }\n      let alive = simpleMatch(state)\n      if (!alive) {\n        return null\n      }\n      continue\n    }\n    // support 'foo*$' until the end\n    if (isEndGreedy(reg, state) === true) {\n      let alive = simpleMatch(state)\n      if (!alive) {\n        return null\n      }\n      continue\n    }\n    // ok, it doesn't match - but maybe it wasn't *supposed* to?\n    if (reg.negative) {\n      // we want *anything* but this term\n      let alive = doNegative(state)\n      if (!alive) {\n        return null\n      }\n      continue\n    }\n    // ok, finally test the term-reg\n    let hasMatch = matchTerm(state.terms[state.t], reg, state.start_i + state.t, state.phrase_length)\n    if (hasMatch === true) {\n      let alive = simpleMatch(state)\n      if (!alive) {\n        return null\n      }\n      continue\n    }\n    //ok who cares, keep going\n    if (reg.optional === true) {\n      continue\n    }\n\n    // finally, we die\n    return null\n  }\n  //return our results, as pointers\n  let pntr = [null, start_i, state.t + start_i]\n  if (pntr[1] === pntr[2]) {\n    return null //found 0 terms\n  }\n  let groups = {}\n  Object.keys(state.groups).forEach(k => {\n    let o = state.groups[k]\n    let start = start_i + o.start\n    groups[k] = [null, start, start + o.length]\n  })\n  return { pointer: pntr, groups: groups }\n}\nexport default tryHere\n", "// support returning a subset of a match\n// like 'foo [bar] baz' -> bar\nconst getGroup = function (res, group) {\n  let ptrs = []\n  let byGroup = {}\n  if (res.length === 0) {\n    return { ptrs, byGroup }\n  }\n  if (typeof group === 'number') {\n    group = String(group)\n  }\n  if (group) {\n    res.forEach(r => {\n      if (r.groups[group]) {\n        ptrs.push(r.groups[group])\n      }\n    })\n  } else {\n    res.forEach(r => {\n      ptrs.push(r.pointer)\n      Object.keys(r.groups).forEach(k => {\n        byGroup[k] = byGroup[k] || []\n        byGroup[k].push(r.groups[k])\n      })\n    })\n  }\n  return { ptrs, byGroup }\n}\nexport default getGroup\n", "import fromHere from './02-from-here.js'\n\nconst notIf = function (results, not, docs) {\n  results = results.filter(res => {\n    let [n, start, end] = res.pointer\n    let terms = docs[n].slice(start, end)\n    for (let i = 0; i < terms.length; i += 1) {\n      let slice = terms.slice(i)\n      let found = fromHere(slice, not, i, terms.length)\n      if (found !== null) {\n        return false\n      }\n    }\n    return true\n  })\n  return results\n}\n\nexport default notIf", "import failFast from './01-failFast.js'\nimport fromHere from './02-from-here.js'\nimport getGroup from './03-getGroup.js'\nimport notIf from './03-notIf.js'\n\n\n// make proper pointers\nconst addSentence = function (res, n) {\n  res.pointer[0] = n\n  Object.keys(res.groups).forEach(k => {\n    res.groups[k][0] = n\n  })\n  return res\n}\n\nconst handleStart = function (terms, regs, n) {\n  let res = fromHere(terms, regs, 0, terms.length)\n  if (res) {\n    res = addSentence(res, n)\n    return res //getGroup([res], group)\n  }\n  return null\n}\n\n// ok, here we go.\nconst runMatch = function (docs, todo, cache) {\n  cache = cache || []\n  let { regs, group, justOne } = todo\n  let results = []\n  if (!regs || regs.length === 0) {\n    return { ptrs: [], byGroup: {} }\n  }\n\n  const minLength = regs.filter(r => r.optional !== true && r.negative !== true).length\n  docs: for (let n = 0; n < docs.length; n += 1) {\n    let terms = docs[n]\n    // let index = terms[0].index || []\n    // can we skip this sentence?\n    if (cache[n] && failFast(regs, cache[n])) {\n      continue\n    }\n    // ^start regs only run once, per phrase\n    if (regs[0].start === true) {\n      let foundStart = handleStart(terms, regs, n, group)\n      if (foundStart) {\n        results.push(foundStart)\n      }\n      continue\n    }\n    //ok, try starting the match now from every term\n    for (let i = 0; i < terms.length; i += 1) {\n      let slice = terms.slice(i)\n      // ensure it's long-enough\n      if (slice.length < minLength) {\n        break\n      }\n      let res = fromHere(slice, regs, i, terms.length)\n      // did we find a result?\n      if (res) {\n        // res = addSentence(res, index[0])\n        res = addSentence(res, n)\n        results.push(res)\n        // should we stop here?\n        if (justOne === true) {\n          break docs\n        }\n        // skip ahead, over these results\n        let end = res.pointer[2]\n        if (Math.abs(end - 1) > i) {\n          i = Math.abs(end - 1)\n        }\n      }\n    }\n  }\n  // ensure any end-results ($) match until the last term\n  if (regs[regs.length - 1].end === true) {\n    results = results.filter(res => {\n      let n = res.pointer[0]\n      return docs[n].length === res.pointer[2]\n    })\n  }\n  if (todo.notIf) {\n    results = notIf(results, todo.notIf, docs)\n  }\n  // grab the requested group\n  results = getGroup(results, group)\n  // add ids to pointers\n  results.ptrs.forEach(ptr => {\n    let [n, start, end] = ptr\n    ptr[3] = docs[n][start].id//start-id\n    ptr[4] = docs[n][end - 1].id//end-id\n  })\n  return results\n}\n\nexport default runMatch\n", "import parseMatch from './parseMatch/index.js'\nimport match from './match/index.js'\nimport termMethods from './termMethods.js'\n\nconst methods = {\n  one: {\n    termMethods,\n    parseMatch,\n    match,\n  },\n}\n\nexport default methods\n", "\nexport default {\n  /** pre-parse any match statements */\n  parseMatch: function (str, opts) {\n    const world = this.world()\n    let killUnicode = world.methods.one.killUnicode\n    if (killUnicode) {\n      str = killUnicode(str, world)\n    }\n    return world.methods.one.parseMatch(str, opts, world)\n  }\n}", "import api from './api/index.js'\nimport methods from './methods/index.js'\nimport lib from './lib.js'\n\nexport default {\n  api,\n  methods,\n  lib,\n}\n", "const isClass = /^\\../\nconst isId = /^#./\n\nconst escapeXml = str => {\n  str = str.replace(/&/g, '&amp;')\n  str = str.replace(/</g, '&lt;')\n  str = str.replace(/>/g, '&gt;')\n  str = str.replace(/\"/g, '&quot;')\n  str = str.replace(/'/g, '&apos;')\n  return str\n}\n\n// interpret .class, #id, tagName\nconst toTag = function (k) {\n  let start = ''\n  let end = '</span>'\n  k = escapeXml(k)\n  if (isClass.test(k)) {\n    start = `<span class=\"${k.replace(/^\\./, '')}\"`\n  } else if (isId.test(k)) {\n    start = `<span id=\"${k.replace(/^#/, '')}\"`\n  } else {\n    start = `<${k}`\n    end = `</${k}>`\n  }\n  start += '>'\n  return { start, end }\n}\n\nconst getIndex = function (doc, obj) {\n  let starts = {}\n  let ends = {}\n  Object.keys(obj).forEach(k => {\n    let res = obj[k]\n    let tag = toTag(k)\n    if (typeof res === 'string') {\n      res = doc.match(res)\n    }\n    res.docs.forEach(terms => {\n      // don't highlight implicit terms\n      if (terms.every(t => t.implicit)) {\n        return\n      }\n      let a = terms[0].id\n      starts[a] = starts[a] || []\n      starts[a].push(tag.start)\n      let b = terms[terms.length - 1].id\n      ends[b] = ends[b] || []\n      ends[b].push(tag.end)\n    })\n  })\n  return { starts, ends }\n}\n\nconst html = function (obj) {\n  // index ids to highlight\n  let { starts, ends } = getIndex(this, obj)\n  // create the text output\n  let out = ''\n  this.docs.forEach(terms => {\n    for (let i = 0; i < terms.length; i += 1) {\n      let t = terms[i]\n      // do a span tag\n      if (starts.hasOwnProperty(t.id)) {\n        out += starts[t.id].join('')\n      }\n      out += t.pre || ''\n      out += t.text || ''\n      if (ends.hasOwnProperty(t.id)) {\n        out += ends[t.id].join('')\n      }\n      out += t.post || ''\n    }\n  })\n  return out\n}\nexport default { html }\n", "const trimEnd = /[,:;)\\]*.?~!\\u0022\\uFF02\\u201D\\u2019\\u00BB\\u203A\\u2032\\u2033\\u2034\\u301E\\u00B4—-]+$/\nconst trimStart =\n  /^[(['\"*~\\uFF02\\u201C\\u2018\\u201F\\u201B\\u201E\\u2E42\\u201A\\u00AB\\u2039\\u2035\\u2036\\u2037\\u301D\\u0060\\u301F]+/\n\nconst punctToKill = /[,:;)('\"\\u201D\\]]/\nconst isHyphen = /^[-–—]$/\nconst hasSpace = / /\n\nconst textFromTerms = function (terms, opts, keepSpace = true) {\n  let txt = ''\n  terms.forEach(t => {\n    let pre = t.pre || ''\n    let post = t.post || ''\n    if (opts.punctuation === 'some') {\n      pre = pre.replace(trimStart, '')\n      // replace a hyphen with a space\n      if (isHyphen.test(post)) {\n        post = ' '\n      }\n      post = post.replace(punctToKill, '')\n      // cleanup exclamations\n      post = post.replace(/\\?!+/, '?')\n      post = post.replace(/!+/, '!')\n      post = post.replace(/\\?+/, '?')\n      // kill elipses\n      post = post.replace(/\\.{2,}/, '')\n      // kill abbreviation periods\n      if (t.tags.has('Abbreviation')) {\n        post = post.replace(/\\./, '')\n      }\n    }\n    if (opts.whitespace === 'some') {\n      pre = pre.replace(/\\s/, '') //remove pre-whitespace\n      post = post.replace(/\\s+/, ' ') //replace post-whitespace with a space\n    }\n    if (!opts.keepPunct) {\n      pre = pre.replace(trimStart, '')\n      if (post === '-') {\n        post = ' '\n      } else {\n        post = post.replace(trimEnd, '')\n      }\n    }\n    // grab the correct word format\n    let word = t[opts.form || 'text'] || t.normal || ''\n    if (opts.form === 'implicit') {\n      word = t.implicit || t.text\n    }\n    if (opts.form === 'root' && t.implicit) {\n      word = t.root || t.implicit || t.normal\n    }\n    // add an implicit space, for contractions\n    if ((opts.form === 'machine' || opts.form === 'implicit' || opts.form === 'root') && t.implicit) {\n      if (!post || !hasSpace.test(post)) {\n        post += ' '\n      }\n    }\n    txt += pre + word + post\n  })\n  if (keepSpace === false) {\n    txt = txt.trim()\n  }\n  if (opts.lowerCase === true) {\n    txt = txt.toLowerCase()\n  }\n  return txt\n}\n\nconst textFromDoc = function (docs, opts) {\n  let text = ''\n  if (!docs || !docs[0] || !docs[0][0]) {\n    return text\n  }\n  for (let i = 0; i < docs.length; i += 1) {\n    // middle\n    text += textFromTerms(docs[i], opts, true)\n  }\n  if (!opts.keepSpace) {\n    text = text.trim()\n  }\n  if (opts.keepEndPunct === false) {\n    // don't remove ':)' etc\n    if (!docs[0][0].tags.has('Emoticon')) {\n      text = text.replace(trimStart, '')\n    }\n    // remove ending periods\n    let last = docs[docs.length - 1]\n    if (!last[last.length - 1].tags.has('Emoticon')) {\n      text = text.replace(trimEnd, '')\n    }\n    // kill end quotations\n    if (text.endsWith(`'`) && !text.endsWith(`s'`)) {\n      text = text.replace(/'/, '')\n    }\n  }\n  if (opts.cleanWhitespace === true) {\n    text = text.trim()\n  }\n  return text\n}\nexport { textFromDoc, textFromTerms }\n", "const fmts = {\n  text: {\n    form: 'text',\n  },\n  normal: {\n    whitespace: 'some',\n    punctuation: 'some',\n    case: 'some',\n    unicode: 'some',\n    form: 'normal',\n  },\n  machine: {\n    keepSpace: false,\n    whitespace: 'some',\n    punctuation: 'some',\n    case: 'none',\n    unicode: 'some',\n    form: 'machine',\n  },\n  root: {\n    keepSpace: false,\n    whitespace: 'some',\n    punctuation: 'some',\n    case: 'some',\n    unicode: 'some',\n    form: 'root',\n  },\n  implicit: {\n    form: 'implicit',\n  }\n}\nfmts.clean = fmts.normal\nfmts.reduced = fmts.root\nexport default fmts", "/* eslint-disable no-bitwise */\n/* eslint-disable no-mixed-operators */\n/* eslint-disable no-multi-assign */\n\n// https://github.com/jbt/tiny-hashes/\nlet k = [],\n  i = 0\nfor (; i < 64; ) {\n  k[i] = 0 | (Math.sin(++i % Math.PI) * 4294967296)\n}\n\nconst md5 = function (s) {\n  let b,\n    c,\n    d,\n    h = [(b = 0x67452301), (c = 0xefcdab89), ~b, ~c],\n    words = [],\n    j = decodeURI(encodeURI(s)) + '\\x80',\n    a = j.length\n\n  s = (--a / 4 + 2) | 15\n\n  words[--s] = a * 8\n\n  for (; ~a; ) {\n    words[a >> 2] |= j.charCodeAt(a) << (8 * a--)\n  }\n\n  for (i = j = 0; i < s; i += 16) {\n    a = h\n\n    for (\n      ;\n      j < 64;\n      a = [\n        (d = a[3]),\n        b +\n          (((d =\n            a[0] +\n            [(b & c) | (~b & d), (d & b) | (~d & c), b ^ c ^ d, c ^ (b | ~d)][(a = j >> 4)] +\n            k[j] +\n            ~~words[i | ([j, 5 * j + 1, 3 * j + 5, 7 * j][a] & 15)]) <<\n            (a = [7, 12, 17, 22, 5, 9, 14, 20, 4, 11, 16, 23, 6, 10, 15, 21][4 * a + (j++ % 4)])) |\n            (d >>> -a)),\n        b,\n        c,\n      ]\n    ) {\n      b = a[1] | 0\n      c = a[2]\n    }\n    for (j = 4; j; ) h[--j] += a[j]\n  }\n\n  for (s = ''; j < 32; ) {\n    s += ((h[j >> 3] >> ((1 ^ j++) * 4)) & 15).toString(16)\n  }\n\n  return s\n}\nexport default md5\n// console.log(md5('food-safety'))\n", "import { textFromTerms } from './_text.js'\nimport fmts from './_fmts.js'\nimport hash from '../methods/hash.js'\n\nconst defaults = {\n  text: true,\n  terms: true,\n}\n\nlet opts = { case: 'none', unicode: 'some', form: 'machine', punctuation: 'some' }\n\nconst merge = function (a, b) {\n  return Object.assign({}, a, b)\n}\n\nconst fns = {\n  text: terms => textFromTerms(terms, { keepPunct: true }, false),\n  normal: terms => textFromTerms(terms, merge(fmts.normal, { keepPunct: true }), false),\n  implicit: terms => textFromTerms(terms, merge(fmts.implicit, { keepPunct: true }), false),\n\n  machine: terms => textFromTerms(terms, opts, false),\n  root: terms => textFromTerms(terms, merge(opts, { form: 'root' }), false),\n\n  hash: terms => hash(textFromTerms(terms, { keepPunct: true }, false)),\n\n  offset: terms => {\n    let len = fns.text(terms).length\n    return {\n      index: terms[0].offset.index,\n      start: terms[0].offset.start,\n      length: len,\n    }\n  },\n  terms: terms => {\n    return terms.map(t => {\n      let term = Object.assign({}, t)\n      term.tags = Array.from(t.tags)\n      return term\n    })\n  },\n  confidence: (_terms, view, i) => view.eq(i).confidence(),\n  syllables: (_terms, view, i) => view.eq(i).syllables(),\n  sentence: (_terms, view, i) => view.eq(i).fullSentence().text(),\n  dirty: terms => terms.some(t => t.dirty === true),\n}\nfns.sentences = fns.sentence\nfns.clean = fns.normal\nfns.reduced = fns.root\n\nconst toJSON = function (view, option) {\n  option = option || {}\n  if (typeof option === 'string') {\n    option = {}\n  }\n  option = Object.assign({}, defaults, option)\n  // run any necessary upfront steps\n  if (option.offset) {\n    view.compute('offset')\n  }\n  return view.docs.map((terms, i) => {\n    let res = {}\n    Object.keys(option).forEach(k => {\n      if (option[k] && fns[k]) {\n        res[k] = fns[k](terms, view, i)\n      }\n    })\n    return res\n  })\n}\n\nconst methods = {\n  /** return data */\n  json: function (n) {\n    let res = toJSON(this, n)\n    if (typeof n === 'number') {\n      return res[n]\n    }\n    return res\n  },\n}\nmethods.data = methods.json\nexport default methods\n", "const isClientSide = () => typeof window !== 'undefined' && window.document\n\n//output some helpful stuff to the console\nconst debug = function (fmt) {\n  let debugMethods = this.methods.one.debug || {}\n  // see if method name exists\n  if (fmt && debugMethods.hasOwnProperty(fmt)) {\n    debugMethods[fmt](this)\n    return this\n  }\n  // log default client-side view\n  if (isClientSide()) {\n    debugMethods.clientSide(this)\n    return this\n  }\n  // else, show regular server-side tags view\n  debugMethods.tags(this)\n  return this\n}\nexport default debug\n", "const toText = function (term) {\n  let pre = term.pre || ''\n  let post = term.post || ''\n  return pre + term.text + post\n}\n\nconst findStarts = function (doc, obj) {\n  let starts = {}\n  Object.keys(obj).forEach(reg => {\n    let m = doc.match(reg)\n    m.fullPointer.forEach(a => {\n      starts[a[3]] = { fn: obj[reg], end: a[2] }\n    })\n  })\n  return starts\n}\n\nconst wrap = function (doc, obj) {\n  // index ids to highlight\n  let starts = findStarts(doc, obj)\n  let text = ''\n  doc.docs.forEach((terms, n) => {\n    for (let i = 0; i < terms.length; i += 1) {\n      let t = terms[i]\n      // do a span tag\n      if (starts.hasOwnProperty(t.id)) {\n        let { fn, end } = starts[t.id]\n        let m = doc.update([[n, i, end]])\n        text += terms[i].pre || ''\n        text += fn(m)\n        i = end - 1\n        text += terms[i].post || ''\n      } else {\n        text += toText(t)\n      }\n    }\n  })\n  return text\n}\nexport default wrap", "import debug from './debug.js'\nimport wrap from './wrap.js'\nimport hash from '../methods/hash.js'\n\nconst isObject = val => {\n  return Object.prototype.toString.call(val) === '[object Object]'\n}\n\n// sort by frequency\nconst topk = function (arr) {\n  let obj = {}\n  arr.forEach(a => {\n    obj[a] = obj[a] || 0\n    obj[a] += 1\n  })\n  let res = Object.keys(obj).map(k => {\n    return { normal: k, count: obj[k] }\n  })\n  return res.sort((a, b) => (a.count > b.count ? -1 : 0))\n}\n\n/** some named output formats */\nconst out = function (method) {\n  // support custom outputs\n  if (isObject(method)) {\n    return wrap(this, method)\n  }\n  // text out formats\n  if (method === 'text') {\n    return this.text()\n  }\n  if (method === 'normal') {\n    return this.text('normal')\n  }\n  if (method === 'root') {\n    return this.text('root')\n  }\n  if (method === 'machine' || method === 'reduced') {\n    return this.text('machine')\n  }\n  if (method === 'hash' || method === 'md5') {\n    return hash(this.text())\n  }\n\n  // json data formats\n  if (method === 'json') {\n    return this.json()\n  }\n  if (method === 'offset' || method === 'offsets') {\n    this.compute('offset')\n    return this.json({ offset: true })\n  }\n  if (method === 'array') {\n    let arr = this.docs.map(terms => {\n      return terms\n        .reduce((str, t) => {\n          return str + t.pre + t.text + t.post\n        }, '')\n        .trim()\n    })\n    return arr.filter(str => str)\n  }\n  // return terms sorted by frequency\n  if (method === 'freq' || method === 'frequency' || method === 'topk') {\n    return topk(this.json({ normal: true }).map(o => o.normal))\n  }\n\n  // some handy ad-hoc outputs\n  if (method === 'terms') {\n    let list = []\n    this.docs.forEach(terms => {\n      let words = terms.map(t => t.text)\n      words = words.filter(t => t)\n      list = list.concat(words)\n    })\n    return list\n  }\n  if (method === 'tags') {\n    return this.docs.map(terms => {\n      return terms.reduce((h, t) => {\n        h[t.implicit || t.normal] = Array.from(t.tags)\n        return h\n      }, {})\n    })\n  }\n  if (method === 'debug') {\n    return this.debug() //allow\n  }\n  return this.text()\n}\n\nconst methods = {\n  /** */\n  debug: debug,\n  /** */\n  out,\n  /** */\n  wrap: function (obj) {\n    return wrap(this, obj)\n  },\n}\n\nexport default methods\n", "import { textFromDoc } from './_text.js'\nimport fmts from './_fmts.js'\n\nconst isObject = val => {\n  return Object.prototype.toString.call(val) === '[object Object]'\n}\n\nexport default {\n  /** */\n  text: function (fmt) {\n    let opts = {}\n    if (fmt && typeof fmt === 'string' && fmts.hasOwnProperty(fmt)) {\n      opts = Object.assign({}, fmts[fmt])\n    } else if (fmt && isObject(fmt)) {\n      opts = Object.assign({}, fmt) //todo: fixme\n    }\n    // is it a full document?\n    if (opts.keepSpace === undefined && !this.isFull()) {\n      //\n      opts.keepSpace = false\n    }\n    if (opts.keepEndPunct === undefined && this.pointer) {\n      let ptr = this.pointer[0]\n      if (ptr && ptr[1]) {\n        opts.keepEndPunct = false\n      } else {\n        opts.keepEndPunct = true\n      }\n    }\n    // set defaults\n    if (opts.keepPunct === undefined) {\n      opts.keepPunct = true\n    }\n    if (opts.keepSpace === undefined) {\n      opts.keepSpace = true\n    }\n    return textFromDoc(this.docs, opts)\n  },\n}\n", "import html from './html.js'\nimport json from './json.js'\nimport out from './out.js'\nimport text from './text.js'\n\nconst methods = Object.assign({}, out, text, json, html)\n\nconst addAPI = function (View) {\n  Object.assign(View.prototype, methods)\n}\nexport default addAPI\n", "/* eslint-disable no-console */\nconst logClientSide = function (view) {\n  console.log('%c -=-=- ', 'background-color:#6699cc;')\n  view.forEach(m => {\n    console.groupCollapsed(m.text())\n    let terms = m.docs[0]\n    let out = terms.map(t => {\n      let text = t.text || '-'\n      if (t.implicit) {\n        text = '[' + t.implicit + ']'\n      }\n      let tags = '[' + Array.from(t.tags).join(', ') + ']'\n      return { text, tags }\n    })\n    console.table(out, ['text', 'tags'])\n    console.groupEnd()\n  })\n}\nexport default logClientSide\n", "// https://stackoverflow.com/questions/9781218/how-to-change-node-jss-console-font-color\nconst reset = '\\x1b[0m'\n\n//cheaper than requiring chalk\nconst cli = {\n  green: str => '\\x1b[32m' + str + reset,\n  red: str => '\\x1b[31m' + str + reset,\n  blue: str => '\\x1b[34m' + str + reset,\n  magenta: str => '\\x1b[35m' + str + reset,\n  cyan: str => '\\x1b[36m' + str + reset,\n  yellow: str => '\\x1b[33m' + str + reset,\n  black: str => '\\x1b[30m' + str + reset,\n  dim: str => '\\x1b[2m' + str + reset,\n  i: str => '\\x1b[3m' + str + reset,\n}\nexport default cli\n", "/* eslint-disable no-console */\nimport cli from './_color.js'\n\nconst tagString = function (tags, model) {\n  if (model.one.tagSet) {\n    tags = tags.map(tag => {\n      if (!model.one.tagSet.hasOwnProperty(tag)) {\n        return tag\n      }\n      const c = model.one.tagSet[tag].color || 'blue'\n      return cli[c](tag)\n    })\n  }\n  return tags.join(', ')\n}\n\nconst showTags = function (view) {\n  let { docs, model } = view\n  if (docs.length === 0) {\n    console.log(cli.blue('\\n     ──────'))\n  }\n  docs.forEach(terms => {\n    console.log(cli.blue('\\n  ┌─────────'))\n    terms.forEach(t => {\n      let tags = [...(t.tags || [])]\n      let text = t.text || '-'\n      if (t.sense) {\n        text = `{${t.normal}/${t.sense}}`\n      }\n      if (t.implicit) {\n        text = '[' + t.implicit + ']'\n      }\n      text = cli.yellow(text)\n      let word = \"'\" + text + \"'\"\n      if (t.reference) {\n        let str = view.update([t.reference]).text('normal')\n        word += ` - ${cli.dim(cli.i('[' + str + ']'))}`\n      }\n      word = word.padEnd(18)\n      let str = cli.blue('  │ ') + cli.i(word) + '  - ' + tagString(tags, model)\n      console.log(str)\n    })\n  })\n  console.log('\\n')\n}\nexport default showTags\n", "/* eslint-disable no-console */\nimport cli from './_color.js'\n\nconst showChunks = function (view) {\n  let { docs } = view\n  console.log('')\n  docs.forEach(terms => {\n    let out = []\n    terms.forEach(term => {\n      if (term.chunk === 'Noun') {\n        out.push(cli.blue(term.implicit || term.normal))\n      } else if (term.chunk === 'Verb') {\n        out.push(cli.green(term.implicit || term.normal))\n      } else if (term.chunk === 'Adjective') {\n        out.push(cli.yellow(term.implicit || term.normal))\n      } else if (term.chunk === 'Pivot') {\n        out.push(cli.red(term.implicit || term.normal))\n      } else {\n        out.push(term.implicit || term.normal)\n      }\n    })\n    console.log(out.join(' '), '\\n')\n  })\n  console.log('\\n')\n}\nexport default showChunks\n", "/* eslint-disable no-console */\nimport cli from './_color.js'\n\nconst split = (txt, offset, index) => {\n  let buff = index * 9 //there are 9 new chars addded to each highlight\n  let start = offset.start + buff\n  let end = start + offset.length\n  let pre = txt.substring(0, start)\n  let mid = txt.substring(start, end)\n  let post = txt.substring(end, txt.length)\n  return [pre, mid, post]\n}\n\nconst spliceIn = function (txt, offset, index) {\n  let parts = split(txt, offset, index)\n  return `${parts[0]}${cli.blue(parts[1])}${parts[2]}`\n}\n\nconst showHighlight = function (doc) {\n  if (!doc.found) {\n    return\n  }\n  let bySentence = {}\n  doc.fullPointer.forEach(ptr => {\n    bySentence[ptr[0]] = bySentence[ptr[0]] || []\n    bySentence[ptr[0]].push(ptr)\n  })\n  Object.keys(bySentence).forEach(k => {\n    let full = doc.update([[Number(k)]])\n    let txt = full.text()\n    let matches = doc.update(bySentence[k])\n    let json = matches.json({ offset: true })\n    json.forEach((obj, i) => {\n      txt = spliceIn(txt, obj.offset, i)\n    })\n    console.log(txt)\n  })\n  console.log('\\n')\n}\nexport default showHighlight\n", "import clientSide from './client-side.js'\nimport tags from './tags.js'\nimport chunks from './chunks.js'\nimport highlight from './highlight.js'\n\nconst debug = {\n  tags,\n  clientSide,\n  chunks,\n  highlight,\n}\nexport default debug\n", "import api from './api/index.js'\nimport { debug, hash } from './methods/index.js'\n\nexport default {\n  api,\n  methods: {\n    one: {\n      hash,\n      debug,\n    },\n  },\n}\n", "// do the pointers intersect?\nexport const doesOverlap = function (a, b) {\n  if (a[0] !== b[0]) {\n    return false\n  }\n  let [, startA, endA] = a\n  let [, startB, endB] = b\n  // [a,a,a,-,-,-,]\n  // [-,-,b,b,b,-,]\n  if (startA <= startB && endA > startB) {\n    return true\n  }\n  // [-,-,-,a,a,-,]\n  // [-,-,b,b,b,-,]\n  if (startB <= startA && endB > startA) {\n    return true\n  }\n  return false\n}\n\n// get widest min/max\nexport const getExtent = function (ptrs) {\n  let min = ptrs[0][1]\n  let max = ptrs[0][2]\n  ptrs.forEach(ptr => {\n    if (ptr[1] < min) {\n      min = ptr[1]\n    }\n    if (ptr[2] > max) {\n      max = ptr[2]\n    }\n  })\n  return [ptrs[0][0], min, max]\n}\n\n// collect pointers by sentence number\nexport const indexN = function (ptrs) {\n  let byN = {}\n  ptrs.forEach(ref => {\n    byN[ref[0]] = byN[ref[0]] || []\n    byN[ref[0]].push(ref)\n  })\n  return byN\n}\n\n// remove exact duplicates\nexport const uniquePtrs = function (arr) {\n  let obj = {}\n  for (let i = 0; i < arr.length; i += 1) {\n    obj[arr[i].join(',')] = arr[i]\n  }\n  return Object.values(obj)\n}\n\n// a before b\n// console.log(doesOverlap([0, 0, 4], [0, 2, 5]))\n// // b before a\n// console.log(doesOverlap([0, 3, 4], [0, 1, 5]))\n// // disjoint\n// console.log(doesOverlap([0, 0, 3], [0, 4, 5]))\n// neighbours\n// console.log(doesOverlap([0, 1, 3], [0, 3, 5]))\n// console.log(doesOverlap([0, 3, 5], [0, 1, 3]))\n\n// console.log(\n//   getExtent([\n//     [0, 3, 4],\n//     [0, 4, 5],\n//     [0, 1, 2],\n//   ])\n// )\n", "import { indexN } from './_lib.js'\n\n// split a pointer, by match pointer\nconst pivotBy = function (full, m) {\n  let [n, start] = full\n  let mStart = m[1]\n  let mEnd = m[2]\n  let res = {}\n  // is there space before the match?\n  if (start < mStart) {\n    let end = mStart < full[2] ? mStart : full[2] // find closest end-point\n    res.before = [n, start, end] //before segment\n  }\n  res.match = m\n  // is there space after the match?\n  if (full[2] > mEnd) {\n    res.after = [n, mEnd, full[2]] //after segment\n  }\n  return res\n}\n\nconst doesMatch = function (full, m) {\n  return full[1] <= m[1] && m[2] <= full[2]\n}\n\nconst splitAll = function (full, m) {\n  let byN = indexN(m)\n  let res = []\n  full.forEach(ptr => {\n    let [n] = ptr\n    let matches = byN[n] || []\n    matches = matches.filter(p => doesMatch(ptr, p))\n    if (matches.length === 0) {\n      res.push({ passthrough: ptr })\n      return\n    }\n    // ensure matches are in-order\n    matches = matches.sort((a, b) => a[1] - b[1])\n    // start splitting our left-to-right\n    let carry = ptr\n    matches.forEach((p, i) => {\n      let found = pivotBy(carry, p)\n      // last one\n      if (!matches[i + 1]) {\n        res.push(found)\n      } else {\n        res.push({ before: found.before, match: found.match })\n        if (found.after) {\n          carry = found.after\n        }\n      }\n    })\n  })\n  return res\n}\n\nexport default splitAll\n", "const max = 20\n\n// sweep-around looking for our start term uuid\nconst blindSweep = function (id, doc, n) {\n  for (let i = 0; i < max; i += 1) {\n    // look up a sentence\n    if (doc[n - i]) {\n      let index = doc[n - i].findIndex(term => term.id === id)\n      if (index !== -1) {\n        return [n - i, index]\n      }\n    }\n    // look down a sentence\n    if (doc[n + i]) {\n      let index = doc[n + i].findIndex(term => term.id === id)\n      if (index !== -1) {\n        return [n + i, index]\n      }\n    }\n  }\n  return null\n}\n\nconst repairEnding = function (ptr, document) {\n  let [n, start, , , endId] = ptr\n  let terms = document[n]\n  // look for end-id\n  let newEnd = terms.findIndex(t => t.id === endId)\n  if (newEnd === -1) {\n    // if end-term wasn't found, so go all the way to the end\n    ptr[2] = document[n].length\n    ptr[4] = terms.length ? terms[terms.length - 1].id : null\n  } else {\n    ptr[2] = newEnd // repair ending pointer\n  }\n  return document[n].slice(start, ptr[2] + 1)\n}\n\n/** return a subset of the document, from a pointer */\nconst getDoc = function (ptrs, document) {\n  let doc = []\n  ptrs.forEach((ptr, i) => {\n    if (!ptr) {\n      return\n    }\n    let [n, start, end, id, endId] = ptr //parsePointer(ptr)\n    let terms = document[n] || []\n    if (start === undefined) {\n      start = 0\n    }\n    if (end === undefined) {\n      end = terms.length\n    }\n    if (id && (!terms[start] || terms[start].id !== id)) {\n      // console.log('  repairing pointer...')\n      let wild = blindSweep(id, document, n)\n      if (wild !== null) {\n        let len = end - start\n        terms = document[wild[0]].slice(wild[1], wild[1] + len)\n        // actually change the pointer\n        let startId = terms[0] ? terms[0].id : null\n        ptrs[i] = [wild[0], wild[1], wild[1] + len, startId]\n      }\n    } else {\n      terms = terms.slice(start, end)\n    }\n    if (terms.length === 0) {\n      return\n    }\n    if (start === end) {\n      return\n    }\n    // test end-id, if it exists\n    if (endId && terms[terms.length - 1].id !== endId) {\n      terms = repairEnding(ptr, document)\n    }\n    // otherwise, looks good!\n    doc.push(terms)\n  })\n  doc = doc.filter(a => a.length > 0)\n  return doc\n}\nexport default getDoc", "import { indexN } from '../api/lib/_lib.js'\nimport splitAll from '../api/lib/split.js'\nimport getDoc from './getDoc.js'\n\n// flat list of terms from nested document\nconst termList = function (docs) {\n  let arr = []\n  for (let i = 0; i < docs.length; i += 1) {\n    for (let t = 0; t < docs[i].length; t += 1) {\n      arr.push(docs[i][t])\n    }\n  }\n  return arr\n}\n\nexport default {\n  one: {\n    termList,\n    getDoc,\n    pointer: {\n      indexN,\n      splitAll,\n    }\n  },\n}\n", "import { doesOverlap, getExtent, indexN, uniquePtrs } from './_lib.js'\n\n// a union is a + b, minus duplicates\nconst getUnion = function (a, b) {\n  let both = a.concat(b)\n  let byN = indexN(both)\n  let res = []\n  both.forEach(ptr => {\n    let [n] = ptr\n    if (byN[n].length === 1) {\n      // we're alone on this sentence, so we're good\n      res.push(ptr)\n      return\n    }\n    // there may be overlaps\n    let hmm = byN[n].filter(m => doesOverlap(ptr, m))\n    hmm.push(ptr)\n    let range = getExtent(hmm)\n    res.push(range)\n  })\n  res = uniquePtrs(res)\n  return res\n}\nexport default getUnion\n\n// two disjoint\n// console.log(getUnion([[1, 3, 4]], [[0, 1, 2]]))\n// two disjoint\n// console.log(getUnion([[0, 3, 4]], [[0, 1, 2]]))\n// overlap-plus\n// console.log(getUnion([[0, 1, 4]], [[0, 2, 6]]))\n// overlap\n// console.log(getUnion([[0, 1, 4]], [[0, 2, 3]]))\n// neighbours\n// console.log(getUnion([[0, 1, 3]], [[0, 3, 5]]))\n", "import splitAll from './split.js'\n\nconst subtract = function (refs, not) {\n  let res = []\n  let found = splitAll(refs, not)\n  found.forEach(o => {\n    if (o.passthrough) {\n      res.push(o.passthrough)\n    }\n    if (o.before) {\n      res.push(o.before)\n    }\n    if (o.after) {\n      res.push(o.after)\n    }\n  })\n  return res\n}\nexport default subtract\n\n// console.log(subtract([[0, 0, 2]], [[0, 0, 1]]))\n// console.log(subtract([[0, 0, 2]], [[0, 1, 2]]))\n", "import { doesOverlap, indexN } from './_lib.js'\n\n// [a,a,a,a,-,-,]\n// [-,-,b,b,b,-,]\n// [-,-,x,x,-,-,]\nconst intersection = function (a, b) {\n  // find the latest-start\n  let start = a[1] < b[1] ? b[1] : a[1]\n  // find the earliest-end\n  let end = a[2] > b[2] ? b[2] : a[2]\n  // does it form a valid pointer?\n  if (start < end) {\n    return [a[0], start, end]\n  }\n  return null\n}\n\nconst getIntersection = function (a, b) {\n  let byN = indexN(b)\n  let res = []\n  a.forEach(ptr => {\n    let hmm = byN[ptr[0]] || []\n    hmm = hmm.filter(p => doesOverlap(ptr, p))\n    // no sentence-pairs, so no intersection\n    if (hmm.length === 0) {\n      return\n    }\n    hmm.forEach(h => {\n      let overlap = intersection(ptr, h)\n      if (overlap) {\n        res.push(overlap)\n      }\n    })\n  })\n  return res\n}\nexport default getIntersection\n\n// console.log(getIntersection([[0, 1, 3]], [[0, 2, 4]]))\n", "import getUnion from './lib/union.js'\nimport getDifference from './lib/difference.js'\nimport getIntersection from './lib/intersection.js'\n\nconst isArray = function (arr) {\n  return Object.prototype.toString.call(arr) === '[object Array]'\n}\n\nconst getDoc = (m, view) => {\n  if (typeof m === 'string' || isArray(m)) {\n    return view.match(m)\n  }\n  if (!m) {\n    return view.none()\n  }\n  // support pre-parsed reg object\n  return m\n}\n\n// 'harden' our json pointers, again\nconst addIds = function (ptrs, docs) {\n  return ptrs.map(ptr => {\n    let [n, start] = ptr\n    if (docs[n] && docs[n][start]) {\n      ptr[3] = docs[n][start].id\n    }\n    return ptr\n  })\n}\n\nconst methods = {}\n\n// all parts, minus duplicates\nmethods.union = function (m) {\n  m = getDoc(m, this)\n  let ptrs = getUnion(this.fullPointer, m.fullPointer)\n  ptrs = addIds(ptrs, this.document)\n  return this.toView(ptrs)\n}\nmethods.and = methods.union\n\n// only parts they both have\nmethods.intersection = function (m) {\n  m = getDoc(m, this)\n  let ptrs = getIntersection(this.fullPointer, m.fullPointer)\n  ptrs = addIds(ptrs, this.document)\n  return this.toView(ptrs)\n}\n\n// only parts of a that b does not have\nmethods.not = function (m) {\n  m = getDoc(m, this)\n  let ptrs = getDifference(this.fullPointer, m.fullPointer)\n  ptrs = addIds(ptrs, this.document)\n  return this.toView(ptrs)\n}\nmethods.difference = methods.not\n\n// get opposite of a match\nmethods.complement = function () {\n  let doc = this.all()\n  let ptrs = getDifference(doc.fullPointer, this.fullPointer)\n  ptrs = addIds(ptrs, this.document)\n  return this.toView(ptrs)\n}\n\n// remove overlaps\nmethods.settle = function () {\n  let ptrs = this.fullPointer\n  ptrs.forEach(ptr => {\n    ptrs = getUnion(ptrs, [ptr])\n  })\n  ptrs = addIds(ptrs, this.document)\n  return this.update(ptrs)\n}\n\nconst addAPI = function (View) {\n  // add set/intersection/union\n  Object.assign(View.prototype, methods)\n}\nexport default addAPI\n", "import methods from './methods/index.js'\nimport api from './api/index.js'\n\nexport default {\n  methods,\n  api,\n}\n", "export default {\n  // compile a list of matches into a match-net\n  buildNet: function (matches) {\n    const methods = this.methods()\n    let net = methods.one.buildNet(matches, this.world())\n    net.isNet = true\n    return net\n  }\n}", "const api = function (View) {\n\n  /** speedy match a sequence of matches */\n  View.prototype.sweep = function (net, opts = {}) {\n    const { world, docs } = this\n    const { methods } = world\n    let found = methods.one.bulkMatch(docs, net, this.methods, opts)\n\n    // apply any changes\n    if (opts.tagger !== false) {\n      methods.one.bulkTagger(found, docs, this.world)\n    }\n    // fix the pointers\n    // collect all found results into a View\n    found = found.map(o => {\n      let ptr = o.pointer\n      let term = docs[ptr[0]][ptr[1]]\n      let len = ptr[2] - ptr[1]\n      if (term.index) {\n        o.pointer = [\n          term.index[0],\n          term.index[1],\n          ptr[1] + len\n        ]\n      }\n      return o\n    })\n    let ptrs = found.map(o => o.pointer)\n    // cleanup results a bit\n    found = found.map(obj => {\n      obj.view = this.update([obj.pointer])\n      delete obj.regs\n      delete obj.needs\n      delete obj.pointer\n      delete obj._expanded\n      return obj\n    })\n    return {\n      view: this.update(ptrs),\n      found\n    }\n  }\n\n}\nexport default api", "// extract the clear needs for an individual match token\nconst getTokenNeeds = function (reg) {\n  // negatives can't be cached\n  if (reg.optional === true || reg.negative === true) {\n    return null\n  }\n  if (reg.tag) {\n    return '#' + reg.tag\n  }\n  if (reg.word) {\n    return reg.word\n  }\n  if (reg.switch) {\n    return `%${reg.switch}%`\n  }\n  return null\n}\n\nconst getNeeds = function (regs) {\n  let needs = []\n  regs.forEach(reg => {\n    needs.push(getTokenNeeds(reg))\n    // support AND (foo && tag)\n    if (reg.operator === 'and' && reg.choices) {\n      reg.choices.forEach(oneSide => {\n        oneSide.forEach(r => {\n          needs.push(getTokenNeeds(r))\n        })\n      })\n    }\n  })\n  return needs.filter(str => str)\n}\n\nconst getWants = function (regs) {\n  let wants = []\n  let count = 0\n  regs.forEach(reg => {\n    if (reg.operator === 'or' && !reg.optional && !reg.negative) {\n      // add fast-or terms\n      if (reg.fastOr) {\n        Array.from(reg.fastOr).forEach(w => {\n          wants.push(w)\n        })\n      }\n      // add slow-or\n      if (reg.choices) {\n        reg.choices.forEach(rs => {\n          rs.forEach(r => {\n            let n = getTokenNeeds(r)\n            if (n) {\n              wants.push(n)\n            }\n          })\n        })\n      }\n      count += 1\n    }\n  })\n  return { wants, count }\n}\n\nconst parse = function (matches, world) {\n  const parseMatch = world.methods.one.parseMatch\n  matches.forEach(obj => {\n    obj.regs = parseMatch(obj.match, {}, world)\n    // wrap these ifNo properties into an array\n    if (typeof obj.ifNo === 'string') {\n      obj.ifNo = [obj.ifNo]\n    }\n    if (obj.notIf) {\n      obj.notIf = parseMatch(obj.notIf, {}, world)\n    }\n    // cache any requirements up-front \n    obj.needs = getNeeds(obj.regs)\n    let { wants, count } = getWants(obj.regs)\n    obj.wants = wants\n    obj.minWant = count\n    // get rid of tiny sentences\n    obj.minWords = obj.regs.filter(o => !o.optional).length\n  })\n  return matches\n}\n\nexport default parse\n", "import parse from './01-parse.js'\n\n// do some indexing on the list of matches\nconst buildNet = function (matches, world) {\n  // turn match-syntax into json\n  matches = parse(matches, world)\n\n  // collect by wants and needs\n  let hooks = {}\n  matches.forEach(obj => {\n    // add needs\n    obj.needs.forEach(str => {\n      hooks[str] = Array.isArray(hooks[str]) ? hooks[str] : []\n      hooks[str].push(obj)\n    })\n    // add wants\n    obj.wants.forEach(str => {\n      hooks[str] = Array.isArray(hooks[str]) ? hooks[str] : []\n      hooks[str].push(obj)\n    })\n  })\n  // remove duplicates\n  Object.keys(hooks).forEach(k => {\n    let already = {}\n    hooks[k] = hooks[k].filter(obj => {\n      if (typeof already[obj.match] === 'boolean') {\n        return false\n      }\n      already[obj.match] = true\n      return true\n    })\n  })\n\n  // keep all un-cacheable matches (those with no needs) \n  let always = matches.filter(o => o.needs.length === 0 && o.wants.length === 0)\n  return {\n    hooks,\n    always\n  }\n}\n\nexport default buildNet\n", "// for each cached-sentence, find a list of possible matches\nconst getHooks = function (docCaches, hooks) {\n  return docCaches.map((set, i) => {\n    let maybe = []\n    Object.keys(hooks).forEach(k => {\n      if (docCaches[i].has(k)) {\n        maybe = maybe.concat(hooks[k])\n      }\n    })\n    // remove duplicates\n    let already = {}\n    maybe = maybe.filter(m => {\n      if (typeof already[m.match] === 'boolean') {\n        return false\n      }\n      already[m.match] = true\n      return true\n    })\n    return maybe\n  })\n}\n\nexport default getHooks\n", "// filter-down list of maybe-matches\nconst localTrim = function (maybeList, docCache) {\n  return maybeList.map((list, n) => {\n    let haves = docCache[n]\n    // ensure all stated-needs of the match are met\n    list = list.filter(obj => {\n      return obj.needs.every(need => haves.has(need))\n    })\n    // ensure nothing matches in our 'ifNo' property\n    list = list.filter(obj => {\n      if (obj.ifNo !== undefined && obj.ifNo.some(no => haves.has(no)) === true) {\n        return false\n      }\n      return true\n    })\n    // ensure atleast one(?) of the wants is found\n    list = list.filter(obj => {\n      if (obj.wants.length === 0) {\n        return true\n      }\n      // ensure there's one cache-hit\n      let found = obj.wants.filter(str => haves.has(str)).length\n      return found >= obj.minWant\n    })\n    return list\n  })\n}\nexport default localTrim\n", "// finally,\n// actually run these match-statements on the terms\nconst runMatch = function (maybeList, document, docCache, methods, opts) {\n  let results = []\n  for (let n = 0; n < maybeList.length; n += 1) {\n    for (let i = 0; i < maybeList[n].length; i += 1) {\n      let m = maybeList[n][i]\n      // ok, actually do the work.\n      let res = methods.one.match([document[n]], m)\n      // found something.\n      if (res.ptrs.length > 0) {\n        res.ptrs.forEach(ptr => {\n          ptr[0] = n // fix the sentence pointer\n          // check ifNo\n          // if (m.ifNo !== undefined) {\n          //   let terms = document[n].slice(ptr[1], ptr[2])\n          //   for (let k = 0; k < m.ifNo.length; k += 1) {\n          //     const no = m.ifNo[k]\n          //     // quick-check cache\n          //     if (docCache[n].has(no)) {\n          //       if (no.startsWith('#')) {\n          //         let tag = no.replace(/^#/, '')\n          //         if (terms.find(t => t.tags.has(tag))) {\n          //           console.log('+' + tag)\n          //           return\n          //         }\n          //       } else if (terms.find(t => t.normal === no || t.tags.has(no))) {\n          //         console.log('+' + no)\n          //         return\n          //       }\n          //     }\n          //   }\n          // }\n          let todo = Object.assign({}, m, { pointer: ptr })\n          if (m.unTag !== undefined) {\n            todo.unTag = m.unTag\n          }\n          results.push(todo)\n        })\n        //ok cool, can we stop early?\n        if (opts.matchOne === true) {\n          return [results[0]]\n        }\n      }\n    }\n  }\n  return results\n}\nexport default runMatch\n", "import getHooks from './01-getHooks.js'\nimport trimDown from './02-trim-down.js'\n// import getWants from './03-get-wants.js'\nimport runMatch from './04-runMatch.js'\n\n\nconst tooSmall = function (maybeList, document) {\n  return maybeList.map((arr, i) => {\n    let termCount = document[i].length\n    arr = arr.filter(o => {\n      return termCount >= o.minWords\n    })\n    return arr\n  })\n}\n\nconst sweep = function (document, net, methods, opts = {}) {\n  // find suitable matches to attempt, on each sentence\n  let docCache = methods.one.cacheDoc(document)\n  // collect possible matches for this document\n  let maybeList = getHooks(docCache, net.hooks)\n  // ensure all defined needs are met for each match\n  maybeList = trimDown(maybeList, docCache, document)\n  // add unchacheable matches to each sentence's todo-list\n  if (net.always.length > 0) {\n    maybeList = maybeList.map(arr => arr.concat(net.always))\n  }\n  // if we don't have enough words\n  maybeList = tooSmall(maybeList, document)\n\n  // now actually run the matches\n  let results = runMatch(maybeList, document, docCache, methods, opts)\n  // console.dir(results, { depth: 5 })\n  return results\n}\nexport default sweep\n", "// is this tag consistent with the tags they already have?\nconst canBe = function (terms, tag, model) {\n  let tagSet = model.one.tagSet\n  if (!tagSet.hasOwnProperty(tag)) {\n    return true\n  }\n  let not = tagSet[tag].not || []\n  for (let i = 0; i < terms.length; i += 1) {\n    let term = terms[i]\n    for (let k = 0; k < not.length; k += 1) {\n      if (term.tags.has(not[k]) === true) {\n        return false //found a tag conflict - bail!\n      }\n    }\n  }\n  return true\n}\nexport default canBe\n", "import canBe from './canBe.js'\n\nconst tagger = function (list, document, world) {\n  const { model, methods } = world\n  const { getDoc, setTag, unTag } = methods.one\n  const looksPlural = methods.two.looksPlural\n  if (list.length === 0) {\n    return list\n  }\n  // some logging for debugging\n  const env = typeof process === 'undefined' || !process.env ? self.env || {} : process.env\n  if (env.DEBUG_TAGS) {\n    console.log(`\\n\\n  \\x1b[32m→ ${list.length} post-tagger:\\x1b[0m`) //eslint-disable-line\n  }\n  return list.map(todo => {\n    if (!todo.tag && !todo.chunk && !todo.unTag) {\n      return\n    }\n    let reason = todo.reason || todo.match\n    let terms = getDoc([todo.pointer], document)[0]\n    // handle 'safe' tag\n    if (todo.safe === true) {\n      // check for conflicting tags\n      if (canBe(terms, todo.tag, model) === false) {\n        return\n      }\n      // dont tag half of a hyphenated word\n      if (terms[terms.length - 1].post === '-') {\n        return\n      }\n    }\n    if (todo.tag !== undefined) {\n      setTag(terms, todo.tag, world, todo.safe, `[post] '${reason}'`)\n      // quick and dirty plural tagger 😕\n      if (todo.tag === 'Noun' && looksPlural) {\n        let term = terms[terms.length - 1]\n        if (looksPlural(term.text)) {\n          setTag([term], 'Plural', world, todo.safe, 'quick-plural')\n        } else {\n          setTag([term], 'Singular', world, todo.safe, 'quick-singular')\n        }\n      }\n      // allow freezing this match, too\n      if (todo.freeze === true) {\n        terms.forEach(term => (term.frozen = true))\n      }\n    }\n    if (todo.unTag !== undefined) {\n      unTag(terms, todo.unTag, world, todo.safe, reason)\n    }\n    // allow setting chunks, too\n    if (todo.chunk) {\n      terms.forEach(t => (t.chunk = todo.chunk))\n    }\n  })\n}\nexport default tagger\n", "import buildNet from './buildNet/index.js'\nimport bulkMatch from './sweep/index.js'\nimport bulkTagger from './tagger/index.js'\n\nexport default {\n  buildNet,\n  bulkMatch,\n  bulkTagger\n}", "import lib from './lib.js'\nimport api from './api.js'\nimport methods from './methods/index.js'\n\nexport default {\n  lib,\n  api,\n  methods: {\n    one: methods,\n  }\n}", "const isMulti = / /\n\nconst addChunk = function (term, tag) {\n  if (tag === 'Noun') {\n    term.chunk = tag\n  }\n  if (tag === 'Verb') {\n    term.chunk = tag\n  }\n}\n\nconst tagTerm = function (term, tag, tagSet, isSafe) {\n  // does it already have this tag?\n  if (term.tags.has(tag) === true) {\n    return null\n  }\n  // allow this shorthand in multiple-tag strings\n  if (tag === '.') {\n    return null\n  }\n  // don't overwrite any tags, if term is frozen\n  if (term.frozen === true) {\n    isSafe = true\n  }\n  // for known tags, do logical dependencies first\n  let known = tagSet[tag]\n  if (known) {\n    // first, we remove any conflicting tags\n    if (known.not && known.not.length > 0) {\n      for (let o = 0; o < known.not.length; o += 1) {\n        // if we're in tagSafe, skip this term.\n        if (isSafe === true && term.tags.has(known.not[o])) {\n          return null\n        }\n        term.tags.delete(known.not[o])\n      }\n    }\n    // add parent tags\n    if (known.parents && known.parents.length > 0) {\n      for (let o = 0; o < known.parents.length; o += 1) {\n        term.tags.add(known.parents[o])\n        addChunk(term, known.parents[o])\n      }\n    }\n  }\n  // finally, add our tag\n  term.tags.add(tag)\n  // now it's dirty?\n  term.dirty = true\n  // add a chunk too, if it's easy\n  addChunk(term, tag)\n  return true\n}\n\n// support '#Noun . #Adjective' syntax\nconst multiTag = function (terms, tagString, tagSet, isSafe) {\n  let tags = tagString.split(isMulti)\n  terms.forEach((term, i) => {\n    let tag = tags[i]\n    if (tag) {\n      tag = tag.replace(/^#/, '')\n      tagTerm(term, tag, tagSet, isSafe)\n    }\n  })\n}\n\nconst isArray = function (arr) {\n  return Object.prototype.toString.call(arr) === '[object Array]'\n}\n\n// verbose-mode tagger debuging\nconst log = (terms, tag, reason = '') => {\n  const yellow = str => '\\x1b[33m\\x1b[3m' + str + '\\x1b[0m'\n  const i = str => '\\x1b[3m' + str + '\\x1b[0m'\n  let word = terms\n    .map(t => {\n      return t.text || '[' + t.implicit + ']'\n    })\n    .join(' ')\n  if (typeof tag !== 'string' && tag.length > 2) {\n    tag = tag.slice(0, 2).join(', #') + ' +' //truncate the list of tags\n  }\n  tag = typeof tag !== 'string' ? tag.join(', #') : tag\n  console.log(` ${yellow(word).padEnd(24)} \\x1b[32m→\\x1b[0m #${tag.padEnd(22)}  ${i(reason)}`) // eslint-disable-line\n}\n\n// add a tag to all these terms\nconst setTag = function (terms, tag, world = {}, isSafe, reason) {\n  const tagSet = world.model.one.tagSet || {}\n  if (!tag) {\n    return\n  }\n  // some logging for debugging\n  const env = typeof process === 'undefined' || !process.env ? self.env || {} : process.env\n  if (env && env.DEBUG_TAGS) {\n    log(terms, tag, reason)\n  }\n  if (isArray(tag) === true) {\n    tag.forEach(tg => setTag(terms, tg, world, isSafe))\n    return\n  }\n  if (typeof tag !== 'string') {\n    console.warn(`compromise: Invalid tag '${tag}'`) // eslint-disable-line\n    return\n  }\n  tag = tag.trim()\n  // support '#Noun . #Adjective' syntax\n  if (isMulti.test(tag)) {\n    multiTag(terms, tag, tagSet, isSafe)\n    return\n  }\n  tag = tag.replace(/^#/, '')\n  // let set = false\n  for (let i = 0; i < terms.length; i += 1) {\n    tagTerm(terms[i], tag, tagSet, isSafe)\n  }\n}\nexport default setTag\n", "// remove this tag, and its children, from these terms\nconst unTag = function (terms, tag, tagSet) {\n  tag = tag.trim().replace(/^#/, '')\n  for (let i = 0; i < terms.length; i += 1) {\n    let term = terms[i]\n    // don't untag anything if term is frozen\n    if (term.frozen === true) {\n      continue\n    }\n    // support clearing all tags, with '*'\n    if (tag === '*') {\n      term.tags.clear()\n      continue\n    }\n    // for known tags, do logical dependencies first\n    let known = tagSet[tag]\n    // removing #Verb should also remove #PastTense\n    if (known && known.children.length > 0) {\n      for (let o = 0; o < known.children.length; o += 1) {\n        term.tags.delete(known.children[o])\n      }\n    }\n    term.tags.delete(tag)\n  }\n}\nexport default unTag\n", "// quick check if this tag will require any untagging\nconst canBe = function (term, tag, tagSet) {\n  if (!tagSet.hasOwnProperty(tag)) {\n    return true // everything can be an unknown tag\n  }\n  let not = tagSet[tag].not || []\n  for (let i = 0; i < not.length; i += 1) {\n    if (term.tags.has(not[i])) {\n      return false\n    }\n  }\n  return true\n}\nexport default canBe\n", "const e=function(e){return e.children=e.children||[],e._cache=e._cache||{},e.props=e.props||{},e._cache.parents=e._cache.parents||[],e._cache.children=e._cache.children||[],e},t=/^ *(#|\\/\\/)/,n=function(t){let n=t.trim().split(/->/),r=[];n.forEach((t=>{r=r.concat(function(t){if(!(t=t.trim()))return null;if(/^\\[/.test(t)&&/\\]$/.test(t)){let n=(t=(t=t.replace(/^\\[/,\"\")).replace(/\\]$/,\"\")).split(/,/);return n=n.map((e=>e.trim())).filter((e=>e)),n=n.map((t=>e({id:t}))),n}return[e({id:t})]}(t))})),r=r.filter((e=>e));let i=r[0];for(let e=1;e<r.length;e+=1)i.children.push(r[e]),i=r[e];return r[0]},r=(e,t)=>{let n=[],r=[e];for(;r.length>0;){let e=r.pop();n.push(e),e.children&&e.children.forEach((n=>{t&&t(e,n),r.push(n)}))}return n},i=e=>\"[object Array]\"===Object.prototype.toString.call(e),c=e=>(e=e||\"\").trim(),s=function(c=[]){return\"string\"==typeof c?function(r){let i=r.split(/\\r?\\n/),c=[];i.forEach((e=>{if(!e.trim()||t.test(e))return;let r=(e=>{const t=/^( {2}|\\t)/;let n=0;for(;t.test(e);)e=e.replace(t,\"\"),n+=1;return n})(e);c.push({indent:r,node:n(e)})}));let s=function(e){let t={children:[]};return e.forEach(((n,r)=>{0===n.indent?t.children=t.children.concat(n.node):e[r-1]&&function(e,t){let n=e[t].indent;for(;t>=0;t-=1)if(e[t].indent<n)return e[t];return e[0]}(e,r).node.children.push(n.node)})),t}(c);return s=e(s),s}(c):i(c)?function(t){let n={};t.forEach((e=>{n[e.id]=e}));let r=e({});return t.forEach((t=>{if((t=e(t)).parent)if(n.hasOwnProperty(t.parent)){let e=n[t.parent];delete t.parent,e.children.push(t)}else console.warn(`[Grad] - missing node '${t.parent}'`);else r.children.push(t)})),r}(c):(r(s=c).forEach(e),s);var s},h=e=>\"\u001B[31m\"+e+\"\u001B[0m\",o=e=>\"\u001B[2m\"+e+\"\u001B[0m\",l=function(e,t){let n=\"-> \";t&&(n=o(\"→ \"));let i=\"\";return r(e).forEach(((e,r)=>{let c=e.id||\"\";if(t&&(c=h(c)),0===r&&!e.id)return;let s=e._cache.parents.length;i+=\"    \".repeat(s)+n+c+\"\\n\"})),i},a=function(e){let t=r(e);t.forEach((e=>{delete(e=Object.assign({},e)).children}));let n=t[0];return n&&!n.id&&0===Object.keys(n.props).length&&t.shift(),t},p={text:l,txt:l,array:a,flat:a},d=function(e,t){return\"nested\"===t||\"json\"===t?e:\"debug\"===t?(console.log(l(e,!0)),null):p.hasOwnProperty(t)?p[t](e):e},u=e=>{r(e,((e,t)=>{e.id&&(e._cache.parents=e._cache.parents||[],t._cache.parents=e._cache.parents.concat([e.id]))}))},f=(e,t)=>(Object.keys(t).forEach((n=>{if(t[n]instanceof Set){let r=e[n]||new Set;e[n]=new Set([...r,...t[n]])}else{if((e=>e&&\"object\"==typeof e&&!Array.isArray(e))(t[n])){let r=e[n]||{};e[n]=Object.assign({},t[n],r)}else i(t[n])?e[n]=t[n].concat(e[n]||[]):void 0===e[n]&&(e[n]=t[n])}})),e),j=/\\//;class g{constructor(e={}){Object.defineProperty(this,\"json\",{enumerable:!1,value:e,writable:!0})}get children(){return this.json.children}get id(){return this.json.id}get found(){return this.json.id||this.json.children.length>0}props(e={}){let t=this.json.props||{};return\"string\"==typeof e&&(t[e]=!0),this.json.props=Object.assign(t,e),this}get(t){if(t=c(t),!j.test(t)){let e=this.json.children.find((e=>e.id===t));return new g(e)}let n=((e,t)=>{let n=(e=>\"string\"!=typeof e?e:(e=e.replace(/^\\//,\"\")).split(/\\//))(t=t||\"\");for(let t=0;t<n.length;t+=1){let r=e.children.find((e=>e.id===n[t]));if(!r)return null;e=r}return e})(this.json,t)||e({});return new g(n)}add(t,n={}){if(i(t))return t.forEach((e=>this.add(c(e),n))),this;t=c(t);let r=e({id:t,props:n});return this.json.children.push(r),new g(r)}remove(e){return e=c(e),this.json.children=this.json.children.filter((t=>t.id!==e)),this}nodes(){return r(this.json).map((e=>(delete(e=Object.assign({},e)).children,e)))}cache(){return(e=>{let t=r(e,((e,t)=>{e.id&&(e._cache.parents=e._cache.parents||[],e._cache.children=e._cache.children||[],t._cache.parents=e._cache.parents.concat([e.id]))})),n={};t.forEach((e=>{e.id&&(n[e.id]=e)})),t.forEach((e=>{e._cache.parents.forEach((t=>{n.hasOwnProperty(t)&&n[t]._cache.children.push(e.id)}))})),e._cache.children=Object.keys(n)})(this.json),this}list(){return r(this.json)}fillDown(){var e;return e=this.json,r(e,((e,t)=>{t.props=f(t.props,e.props)})),this}depth(){u(this.json);let e=r(this.json),t=e.length>1?1:0;return e.forEach((e=>{if(0===e._cache.parents.length)return;let n=e._cache.parents.length+1;n>t&&(t=n)})),t}out(e){return u(this.json),d(this.json,e)}debug(){return u(this.json),d(this.json,\"debug\"),this}}const _=function(e){let t=s(e);return new g(t)};_.prototype.plugin=function(e){e(this)};export{_ as default};\n", "// i just made these up\nconst colors = {\n  Noun: 'blue',\n  Verb: 'green',\n  Negative: 'green',\n  Date: 'red',\n  Value: 'red',\n  Adjective: 'magenta',\n  Preposition: 'cyan',\n  Conjunction: 'cyan',\n  Determiner: 'cyan',\n  Hyphenated: 'cyan',\n  Adverb: 'cyan',\n}\n\nexport default colors", "import colors from './_colors.js'\n\nconst getColor = function (node) {\n  if (colors.hasOwnProperty(node.id)) {\n    return colors[node.id]\n  }\n  if (colors.hasOwnProperty(node.is)) {\n    return colors[node.is]\n  }\n  let found = node._cache.parents.find(c => colors[c])\n  return colors[found]\n}\n\n// convert tags to our final format\nconst fmt = function (nodes) {\n  const res = {}\n  nodes.forEach(node => {\n    let { not, also, is, novel } = node.props\n    let parents = node._cache.parents\n    if (also) {\n      parents = parents.concat(also)\n    }\n    res[node.id] = {\n      is,\n      not,\n      novel,\n      also,\n      parents,\n      children: node._cache.children,\n      color: getColor(node)\n    }\n  })\n  // lastly, add all children of all nots\n  Object.keys(res).forEach(k => {\n    let nots = new Set(res[k].not)\n    res[k].not.forEach(not => {\n      if (res[not]) {\n        res[not].children.forEach(tag => nots.add(tag))\n      }\n    })\n    res[k].not = Array.from(nots)\n  })\n  return res\n}\n\nexport default fmt", "\nconst toArr = function (input) {\n  if (!input) {\n    return []\n  }\n  if (typeof input === 'string') {\n    return [input]\n  }\n  return input\n}\n\nconst addImplied = function (tags, already) {\n  Object.keys(tags).forEach(k => {\n    // support deprecated fmts\n    if (tags[k].isA) {\n      tags[k].is = tags[k].isA\n    }\n    if (tags[k].notA) {\n      tags[k].not = tags[k].notA\n    }\n    // add any implicit 'is' tags\n    if (tags[k].is && typeof tags[k].is === 'string') {\n      if (!already.hasOwnProperty(tags[k].is) && !tags.hasOwnProperty(tags[k].is)) {\n        tags[tags[k].is] = {}\n      }\n    }\n    // add any implicit 'not' tags\n    if (tags[k].not && typeof tags[k].not === 'string' && !tags.hasOwnProperty(tags[k].not)) {\n      if (!already.hasOwnProperty(tags[k].not) && !tags.hasOwnProperty(tags[k].not)) {\n        tags[tags[k].not] = {}\n      }\n    }\n  })\n  return tags\n}\n\n\nconst validate = function (tags, already) {\n\n  tags = addImplied(tags, already)\n\n  // property validation\n  Object.keys(tags).forEach(k => {\n    tags[k].children = toArr(tags[k].children)\n    tags[k].not = toArr(tags[k].not)\n  })\n  // not links are bi-directional\n  // add any incoming not tags\n  Object.keys(tags).forEach(k => {\n    let nots = tags[k].not || []\n    nots.forEach(no => {\n      if (tags[no] && tags[no].not) {\n        tags[no].not.push(k)\n      }\n    })\n  })\n  return tags\n}\nexport default validate", "import grad from 'grad-school'\nimport fmt from './02-fmt.js'\nimport validate from './01-validate.js'\n\n// 'fill-down' parent logic inference\nconst compute = function (allTags) {\n  // setup graph-lib format\n  const flatList = Object.keys(allTags).map(k => {\n    let o = allTags[k]\n    const props = { not: new Set(o.not), also: o.also, is: o.is, novel: o.novel }\n    return { id: k, parent: o.is, props, children: [] }\n  })\n  const graph = grad(flatList).cache().fillDown()\n  return graph.out('array')\n}\n\nconst fromUser = function (tags) {\n  Object.keys(tags).forEach(k => {\n    tags[k] = Object.assign({}, tags[k])\n    tags[k].novel = true\n  })\n  return tags\n}\n\nconst addTags = function (tags, already) {\n  // are these tags internal ones, or user-generated?\n  if (Object.keys(already).length > 0) {\n    tags = fromUser(tags)\n  }\n  tags = validate(tags, already)\n\n  let allTags = Object.assign({}, already, tags)\n  // do some basic setting-up\n  // 'fill-down' parent logic\n  const nodes = compute(allTags)\n  // convert it to our final format\n  const res = fmt(nodes)\n  return res\n}\nexport default addTags\n", "import setTag from './setTag.js'\nimport unTag from './unTag.js'\nimport canBe from './canBe.js'\nimport addTags from './addTags/index.js'\n\nexport default {\n  one: {\n    setTag,\n    unTag,\n    addTags,\n    canBe,\n  },\n}\n", "/* eslint no-console: 0 */\nconst isArray = function (arr) {\n  return Object.prototype.toString.call(arr) === '[object Array]'\n}\nconst fns = {\n  /** add a given tag, to all these terms */\n  tag: function (input, reason = '', isSafe) {\n    if (!this.found || !input) {\n      return this\n    }\n    let terms = this.termList()\n    if (terms.length === 0) {\n      return this\n    }\n    const { methods, verbose, world } = this\n    // logger\n    if (verbose === true) {\n      console.log(' +  ', input, reason || '')\n    }\n    if (isArray(input)) {\n      input.forEach(tag => methods.one.setTag(terms, tag, world, isSafe, reason))\n    } else {\n      methods.one.setTag(terms, input, world, isSafe, reason)\n    }\n    // uncache\n    this.uncache()\n    return this\n  },\n\n  /** add a given tag, only if it is consistent */\n  tagSafe: function (input, reason = '') {\n    return this.tag(input, reason, true)\n  },\n\n  /** remove a given tag from all these terms */\n  unTag: function (input, reason) {\n    if (!this.found || !input) {\n      return this\n    }\n    let terms = this.termList()\n    if (terms.length === 0) {\n      return this\n    }\n    const { methods, verbose, model } = this\n    // logger\n    if (verbose === true) {\n      console.log(' -  ', input, reason || '')\n    }\n    let tagSet = model.one.tagSet\n    if (isArray(input)) {\n      input.forEach(tag => methods.one.unTag(terms, tag, tagSet))\n    } else {\n      methods.one.unTag(terms, input, tagSet)\n    }\n    // uncache\n    this.uncache()\n    return this\n  },\n\n  /** return only the terms that can be this tag  */\n  canBe: function (tag) {\n    tag = tag.replace(/^#/, '')\n    let tagSet = this.model.one.tagSet\n    let canBe = this.methods.one.canBe\n    let nope = []\n    this.document.forEach((terms, n) => {\n      terms.forEach((term, i) => {\n        if (!canBe(term, tag, tagSet)) {\n          nope.push([n, i, i + 1])\n        }\n      })\n    })\n    let noDoc = this.update(nope)\n    return this.difference(noDoc)\n  },\n}\nexport default fns\n", "import tag from './tag.js'\n\nconst tagAPI = function (View) {\n  Object.assign(View.prototype, tag)\n}\nexport default tagAPI\n", "// wire-up more pos-tags to our model\nconst addTags = function (tags) {\n  const { model, methods } = this.world()\n  const tagSet = model.one.tagSet\n  const fn = methods.one.addTags\n  let res = fn(tags, tagSet)\n  model.one.tagSet = res\n  return this\n}\n\nexport default { addTags }", "const boringTags = new Set(['Auxiliary', 'Possessive'])\n\nconst sortByKids = function (tags, tagSet) {\n  tags = tags.sort((a, b) => {\n    // (unknown tags are interesting)\n    if (boringTags.has(a) || !tagSet.hasOwnProperty(b)) {\n      return 1\n    }\n    if (boringTags.has(b) || !tagSet.hasOwnProperty(a)) {\n      return -1\n    }\n    let kids = tagSet[a].children || []\n    let aKids = kids.length\n    kids = tagSet[b].children || []\n    let bKids = kids.length\n    return aKids - bKids\n  })\n  return tags\n}\n\nconst tagRank = function (view) {\n  const { document, world } = view\n  const tagSet = world.model.one.tagSet\n  document.forEach(terms => {\n    terms.forEach(term => {\n      let tags = Array.from(term.tags)\n      term.tagRank = sortByKids(tags, tagSet)\n    })\n  })\n}\nexport default tagRank\n", "import methods from './methods/index.js'\nimport api from './api/index.js'\nimport lib from './lib.js'\nimport tagRank from './compute/tagRank.js'\n\n\nexport default {\n  model: {\n    one: { tagSet: {} }\n  },\n  compute: {\n    tagRank\n  },\n  methods,\n  api,\n  lib\n}\n", "// split by periods, question marks, unicode ⁇, etc\nconst initSplit = /([.!?\\u203D\\u2E18\\u203C\\u2047-\\u2049\\u3002]+\\s)/g\n// merge these back into prev sentence\nconst splitsOnly = /^[.!?\\u203D\\u2E18\\u203C\\u2047-\\u2049\\u3002]+\\s$/\nconst newLine = /((?:\\r?\\n|\\r)+)/ // Match different new-line formats\n\n// Start with a regex:\nconst basicSplit = function (text) {\n  let all = []\n  //first, split by newline\n  let lines = text.split(newLine)\n  for (let i = 0; i < lines.length; i++) {\n    //split by period, question-mark, and exclamation-mark\n    let arr = lines[i].split(initSplit)\n    for (let o = 0; o < arr.length; o++) {\n      // merge 'foo' + '.'\n      if (arr[o + 1] && splitsOnly.test(arr[o + 1]) === true) {\n        arr[o] += arr[o + 1]\n        arr[o + 1] = ''\n      }\n      if (arr[o] !== '') {\n        all.push(arr[o])\n      }\n    }\n  }\n  return all\n}\nexport default basicSplit\n", "const hasLetter = /[a-z0-9\\u00C0-\\u00FF\\u00a9\\u00ae\\u2000-\\u3300\\ud000-\\udfff]/i\nconst hasSomething = /\\S/\n\nconst notEmpty = function (splits) {\n  let chunks = []\n  for (let i = 0; i < splits.length; i++) {\n    let s = splits[i]\n    if (s === undefined || s === '') {\n      continue\n    }\n    //this is meaningful whitespace\n    if (hasSomething.test(s) === false || hasLetter.test(s) === false) {\n      //add it to the last one\n      if (chunks[chunks.length - 1]) {\n        chunks[chunks.length - 1] += s\n        continue\n      } else if (splits[i + 1]) {\n        //add it to the next one\n        splits[i + 1] = s + splits[i + 1]\n        continue\n      }\n    }\n    //else, only whitespace, no terms, no sentence\n    chunks.push(s)\n  }\n  return chunks\n}\nexport default notEmpty", "\n//loop through these chunks, and join the non-sentence chunks back together..\nconst smartMerge = function (chunks, world) {\n  const isSentence = world.methods.one.tokenize.isSentence\n  const abbrevs = world.model.one.abbreviations || new Set()\n\n  let sentences = []\n  for (let i = 0; i < chunks.length; i++) {\n    let c = chunks[i]\n    //should this chunk be combined with the next one?\n    if (chunks[i + 1] && isSentence(c, abbrevs) === false) {\n      chunks[i + 1] = c + (chunks[i + 1] || '')\n    } else if (c && c.length > 0) {\n      //this chunk is a proper sentence..\n      sentences.push(c)\n      chunks[i] = ''\n    }\n  }\n  return sentences\n}\nexport default smartMerge", "/* eslint-disable regexp/no-dupe-characters-character-class */\n\n// merge embedded quotes into 1 sentence\n// like - 'he said \"no!\" and left.'\nconst MAX_QUOTE = 280// ¯\\_(ツ)_/¯\n\n// don't support single-quotes for multi-sentences\nconst pairs = {\n  '\\u0022': '\\u0022', // 'StraightDoubleQuotes'\n  '\\uFF02': '\\uFF02', // 'StraightDoubleQuotesWide'\n  // '\\u0027': '\\u0027', // 'StraightSingleQuotes'\n  '\\u201C': '\\u201D', // 'CommaDoubleQuotes'\n  // '\\u2018': '\\u2019', // 'CommaSingleQuotes'\n  '\\u201F': '\\u201D', // 'CurlyDoubleQuotesReversed'\n  // '\\u201B': '\\u2019', // 'CurlySingleQuotesReversed'\n  '\\u201E': '\\u201D', // 'LowCurlyDoubleQuotes'\n  '\\u2E42': '\\u201D', // 'LowCurlyDoubleQuotesReversed'\n  '\\u201A': '\\u2019', // 'LowCurlySingleQuotes'\n  '\\u00AB': '\\u00BB', // 'AngleDoubleQuotes'\n  '\\u2039': '\\u203A', // 'AngleSingleQuotes'\n  '\\u2035': '\\u2032', // 'PrimeSingleQuotes'\n  '\\u2036': '\\u2033', // 'PrimeDoubleQuotes'\n  '\\u2037': '\\u2034', // 'PrimeTripleQuotes'\n  '\\u301D': '\\u301E', // 'PrimeDoubleQuotes'\n  // '\\u0060': '\\u00B4', // 'PrimeSingleQuotes'\n  '\\u301F': '\\u301E', // 'LowPrimeDoubleQuotesReversed'\n}\nconst openQuote = RegExp('[' + Object.keys(pairs).join('') + ']', 'g')\nconst closeQuote = RegExp('[' + Object.values(pairs).join('') + ']', 'g')\n\nconst closesQuote = function (str) {\n  if (!str) {\n    return false\n  }\n  let m = str.match(closeQuote)\n  if (m !== null && m.length === 1) {\n    return true\n  }\n  return false\n}\n\n// allow micro-sentences when inside a quotation, like:\n// the doc said \"no sir. i will not beg\" and walked away.\nconst quoteMerge = function (splits) {\n  let arr = []\n  for (let i = 0; i < splits.length; i += 1) {\n    let split = splits[i]\n    // do we have an open-quote and not a closed one?\n    let m = split.match(openQuote)\n    if (m !== null && m.length === 1) {\n\n      // look at the next sentence for a closing quote,\n      if (closesQuote(splits[i + 1]) && splits[i + 1].length < MAX_QUOTE) {\n        splits[i] += splits[i + 1]// merge them\n        arr.push(splits[i])\n        splits[i + 1] = ''\n        i += 1\n        continue\n      }\n      // look at n+2 for a closing quote,\n      if (closesQuote(splits[i + 2])) {\n        let toAdd = splits[i + 1] + splits[i + 2]// merge them all\n        //make sure it's not too-long\n        if (toAdd.length < MAX_QUOTE) {\n          splits[i] += toAdd\n          arr.push(splits[i])\n          splits[i + 1] = ''\n          splits[i + 2] = ''\n          i += 2\n          continue\n        }\n      }\n    }\n    arr.push(splits[i])\n  }\n  return arr\n}\nexport default quoteMerge\n", "const MAX_LEN = 250// ¯\\_(ツ)_/¯\n\n// support unicode variants?\n// https://stackoverflow.com/questions/13535172/list-of-all-unicodes-open-close-brackets\nconst hasOpen = /\\(/g\nconst hasClosed = /\\)/g\nconst mergeParens = function (splits) {\n  let arr = []\n  for (let i = 0; i < splits.length; i += 1) {\n    let split = splits[i]\n    let m = split.match(hasOpen)\n    if (m !== null && m.length === 1) {\n      // look at next sentence, for closing parenthesis\n      if (splits[i + 1] && splits[i + 1].length < MAX_LEN) {\n        let m2 = splits[i + 1].match(hasClosed)\n        if (m2 !== null && m.length === 1 && !hasOpen.test(splits[i + 1])) {\n          // merge in 2nd sentence\n          splits[i] += splits[i + 1]\n          arr.push(splits[i])\n          splits[i + 1] = ''\n          i += 1\n          continue\n        }\n      }\n    }\n    arr.push(splits[i])\n  }\n  return arr\n}\nexport default mergeParens", "import simpleSplit from './01-simple-split.js'\nimport simpleMerge from './02-simple-merge.js'\nimport smartMerge from './03-smart-merge.js'\nimport quoteMerge from './04-quote-merge.js'\nimport parensMerge from './05-parens-merge.js'\n//(Rule-based sentence boundary segmentation) - chop given text into its proper sentences.\n// Ignore periods/questions/exclamations used in acronyms/abbreviations/numbers, etc.\n//regs-\nconst hasSomething = /\\S/\nconst startWhitespace = /^\\s+/\n\nconst splitSentences = function (text, world) {\n  text = text || ''\n  text = String(text)\n  // Ensure it 'smells like' a sentence\n  if (!text || typeof text !== 'string' || hasSomething.test(text) === false) {\n    return []\n  }\n  // cleanup unicode-spaces\n  text = text.replace('\\xa0', ' ')\n  // First do a greedy-split..\n  let splits = simpleSplit(text)\n  // Filter-out the crap ones\n  let sentences = simpleMerge(splits)\n  //detection of non-sentence chunks:\n  sentences = smartMerge(sentences, world)\n  // allow 'he said \"no sir.\" and left.'\n  sentences = quoteMerge(sentences)\n  // allow 'i thought (no way!) and left.'\n  sentences = parensMerge(sentences)\n  //if we never got a sentence, return the given text\n  if (sentences.length === 0) {\n    return [text]\n  }\n  //move whitespace to the ends of sentences, when possible\n  //['hello',' world'] -> ['hello ','world']\n  for (let i = 1; i < sentences.length; i += 1) {\n    let ws = sentences[i].match(startWhitespace)\n    if (ws !== null) {\n      sentences[i - 1] += ws[0]\n      sentences[i] = sentences[i].replace(startWhitespace, '')\n    }\n  }\n  return sentences\n}\nexport default splitSentences\n", "const hasHyphen = function (str, model) {\n  let parts = str.split(/[-–—]/)\n  if (parts.length <= 1) {\n    return false\n  }\n  const { prefixes, suffixes } = model.one\n\n  // l-theanine, x-ray\n  if (parts[0].length === 1 && /[a-z]/i.test(parts[0])) {\n    return false\n  }\n  //dont split 're-do'\n  if (prefixes.hasOwnProperty(parts[0])) {\n    return false\n  }\n  //dont split 'flower-like'\n  parts[1] = parts[1].trim().replace(/[.?!]$/, '')\n  if (suffixes.hasOwnProperty(parts[1])) {\n    return false\n  }\n  //letter-number 'aug-20'\n  let reg = /^([a-z\\u00C0-\\u00FF`\"'/]+)[-–—]([a-z0-9\\u00C0-\\u00FF].*)/i\n  if (reg.test(str) === true) {\n    return true\n  }\n  //number-letter '20-aug'\n  let reg2 = /^[('\"]?([0-9]{1,4})[-–—]([a-z\\u00C0-\\u00FF`\"'/-]+[)'\"]?$)/i\n  if (reg2.test(str) === true) {\n    return true\n  }\n  return false\n}\n\nconst splitHyphens = function (word) {\n  let arr = []\n  //support multiple-hyphenated-terms\n  const hyphens = word.split(/[-–—]/)\n  let whichDash = '-'\n  let found = word.match(/[-–—]/)\n  if (found && found[0]) {\n    whichDash = found\n  }\n  for (let o = 0; o < hyphens.length; o++) {\n    if (o === hyphens.length - 1) {\n      arr.push(hyphens[o])\n    } else {\n      arr.push(hyphens[o] + whichDash)\n    }\n  }\n  return arr\n}\n\nexport { splitHyphens, hasHyphen }\n", "// combine '2 - 5' like '2-5' is\n// 2-4: 2, 4\nconst combineRanges = function (arr) {\n  const startRange = /^[0-9]{1,4}(:[0-9][0-9])?([a-z]{1,2})? ?[-–—] ?$/\n  const endRange = /^[0-9]{1,4}([a-z]{1,2})? ?$/\n  for (let i = 0; i < arr.length - 1; i += 1) {\n    if (arr[i + 1] && startRange.test(arr[i]) && endRange.test(arr[i + 1])) {\n      arr[i] = arr[i] + arr[i + 1]\n      arr[i + 1] = null\n    }\n  }\n  return arr\n}\nexport default combineRanges\n", "const isSlash = /\\p{L} ?\\/ ?\\p{L}+$/u\n\n// 'he / she' should be one word\nconst combineSlashes = function (arr) {\n  for (let i = 1; i < arr.length - 1; i++) {\n    if (isSlash.test(arr[i])) {\n      arr[i - 1] += arr[i] + arr[i + 1]\n      arr[i] = null\n      arr[i + 1] = null\n    }\n  }\n  return arr\n}\nexport default combineSlashes\n", "import { hasHyphen, splitHyphens } from './01-hyphens.js'\nimport combineRanges from './03-ranges.js'\nimport combineSlashes from './02-slashes.js'\n\nconst wordlike = /\\S/\nconst isBoundary = /^[!?.]+$/\nconst naiiveSplit = /(\\S+)/\n\nlet notWord = [\n  '.',\n  '?',\n  '!',\n  ':',\n  ';',\n  '-',\n  '–',\n  '—',\n  '--',\n  '...',\n  '(',\n  ')',\n  '[',\n  ']',\n  '\"',\n  \"'\",\n  '`',\n  '«',\n  '»',\n  '*',\n  '•',\n]\nnotWord = notWord.reduce((h, c) => {\n  h[c] = true\n  return h\n}, {})\n\nconst isArray = function (arr) {\n  return Object.prototype.toString.call(arr) === '[object Array]'\n}\n\n//turn a string into an array of strings (naiive for now, lumped later)\nconst splitWords = function (str, model) {\n  let result = []\n  let arr = []\n  //start with a naiive split\n  str = str || ''\n  if (typeof str === 'number') {\n    str = String(str)\n  }\n  if (isArray(str)) {\n    return str\n  }\n  const words = str.split(naiiveSplit)\n  for (let i = 0; i < words.length; i++) {\n    //split 'one-two'\n    if (hasHyphen(words[i], model) === true) {\n      arr = arr.concat(splitHyphens(words[i]))\n      continue\n    }\n    arr.push(words[i])\n  }\n  //greedy merge whitespace+arr to the right\n  let carry = ''\n  for (let i = 0; i < arr.length; i++) {\n    let word = arr[i]\n    //if it's more than a whitespace\n    if (wordlike.test(word) === true && notWord.hasOwnProperty(word) === false && isBoundary.test(word) === false) {\n      //put whitespace on end of previous term, if possible\n      if (result.length > 0) {\n        result[result.length - 1] += carry\n        result.push(word)\n      } else {\n        //otherwise, but whitespace before\n        result.push(carry + word)\n      }\n      carry = ''\n    } else {\n      carry += word\n    }\n  }\n  //handle last one\n  if (carry) {\n    if (result.length === 0) {\n      result[0] = ''\n    }\n    result[result.length - 1] += carry //put it on the end\n  }\n  // combine 'one / two'\n  result = combineSlashes(result)\n  result = combineRanges(result)\n  // remove empty results\n  result = result.filter(s => s)\n  return result\n}\nexport default splitWords\n", "//all punctuation marks, from https://en.wikipedia.org/wiki/Punctuation\n\n//we have slightly different rules for start/end - like #hashtags.\nconst isLetter = /\\p{Letter}/u\nconst isNumber = /[\\p{Number}\\p{Currency_Symbol}]/u\nconst hasAcronym = /^[a-z]\\.([a-z]\\.)+/i\nconst chillin = /[sn]['’]$/\n\nconst normalizePunctuation = function (str, model) {\n  // quick lookup for allowed pre/post punctuation\n  let { prePunctuation, postPunctuation, emoticons } = model.one\n  let original = str\n  let pre = ''\n  let post = ''\n  let chars = Array.from(str)\n\n  // punctuation-only words, like '<3'\n  if (emoticons.hasOwnProperty(str.trim())) {\n    return { str: str.trim(), pre, post: ' ' } //not great\n  }\n\n  // pop any punctuation off of the start\n  let len = chars.length\n  for (let i = 0; i < len; i += 1) {\n    let c = chars[0]\n    // keep any declared chars\n    if (prePunctuation[c] === true) {\n      continue//keep it\n    }\n    // keep '+' or '-' only before a number\n    if ((c === '+' || c === '-') && isNumber.test(chars[1])) {\n      break//done\n    }\n    // '97 - year short-form\n    if (c === \"'\" && c.length === 3 && isNumber.test(chars[1])) {\n      break//done\n    }\n    // start of word\n    if (isLetter.test(c) || isNumber.test(c)) {\n      break //done\n    }\n    // punctuation\n    pre += chars.shift()//keep going\n  }\n\n  // pop any punctuation off of the end\n  len = chars.length\n  for (let i = 0; i < len; i += 1) {\n    let c = chars[chars.length - 1]\n    // keep any declared chars\n    if (postPunctuation[c] === true) {\n      continue//keep it\n    }\n    // start of word\n    if (isLetter.test(c) || isNumber.test(c)) {\n      break //done\n    }\n    // F.B.I.\n    if (c === '.' && hasAcronym.test(original) === true) {\n      continue//keep it\n    }\n    //  keep s-apostrophe - \"flanders'\" or \"chillin'\"\n    if (c === \"'\" && chillin.test(original) === true) {\n      continue//keep it\n    }\n    // punctuation\n    post = chars.pop() + post//keep going\n  }\n  str = chars.join('')\n  //we went too far..\n  if (str === '') {\n    // do a very mild parse, and hope for the best.\n    original = original.replace(/ *$/, after => {\n      post = after || ''\n      return ''\n    })\n    str = original\n    pre = ''\n  }\n  return { str, pre, post }\n}\nexport default normalizePunctuation\n", "import tokenize from './tokenize.js'\n\nconst parseTerm = (txt, model) => {\n  // cleanup any punctuation as whitespace\n  let { str, pre, post } = tokenize(txt, model)\n  const parsed = {\n    text: str,\n    pre: pre,\n    post: post,\n    tags: new Set(),\n  }\n  return parsed\n}\nexport default parseTerm\n", "// 'Björk' to 'Bjork'.\nconst killUnicode = function (str, world) {\n  const unicode = world.model.one.unicode || {}\n  str = str || ''\n  let chars = str.split('')\n  chars.forEach((s, i) => {\n    if (unicode[s]) {\n      chars[i] = unicode[s]\n    }\n  })\n  return chars.join('')\n}\nexport default killUnicode\n", "/** some basic operations on a string to reduce noise */\nconst clean = function (str) {\n  str = str || ''\n  str = str.toLowerCase()\n  str = str.trim()\n  let original = str\n  //punctuation\n  str = str.replace(/[,;.!?]+$/, '')\n  //coerce Unicode ellipses\n  str = str.replace(/\\u2026/g, '...')\n  //en-dash\n  str = str.replace(/\\u2013/g, '-')\n  //strip leading & trailing grammatical punctuation\n  if (/^[:;]/.test(str) === false) {\n    str = str.replace(/\\.{3,}$/g, '')\n    str = str.replace(/[\",.!:;?)]+$/g, '')\n    str = str.replace(/^['\"(]+/g, '')\n  }\n  // remove zero-width characters\n  str = str.replace(/[\\u200B-\\u200D\\uFEFF]/g, '')\n  //do this again..\n  str = str.trim()\n  //oh shucks,\n  if (str === '') {\n    str = original\n  }\n  //no-commas in numbers\n  str = str.replace(/([0-9]),([0-9])/g, '$1$2')\n  return str\n}\nexport default clean\n", "// do acronyms need to be ASCII?  ... kind of?\nconst periodAcronym = /([A-Z]\\.)+[A-Z]?,?$/\nconst oneLetterAcronym = /^[A-Z]\\.,?$/\nconst noPeriodAcronym = /[A-Z]{2,}('s|,)?$/\nconst lowerCaseAcronym = /([a-z]\\.)+[a-z]\\.?$/\n\nconst isAcronym = function (str) {\n  //like N.D.A\n  if (periodAcronym.test(str) === true) {\n    return true\n  }\n  //like c.e.o\n  if (lowerCaseAcronym.test(str) === true) {\n    return true\n  }\n  //like 'F.'\n  if (oneLetterAcronym.test(str) === true) {\n    return true\n  }\n  //like NDA\n  if (noPeriodAcronym.test(str) === true) {\n    return true\n  }\n  return false\n}\n\nconst doAcronym = function (str) {\n  if (isAcronym(str)) {\n    str = str.replace(/\\./g, '')\n  }\n  return str\n}\nexport default doAcronym\n", "import cleanup from './01-cleanup.js'\n// import doUnicode from './02-unicode.js'\nimport doAcronyms from './02-acronyms.js'\n\nconst normalize = function (term, world) {\n  const killUnicode = world.methods.one.killUnicode\n  // console.log(world.methods.one)\n  let str = term.text || ''\n  str = cleanup(str)\n  //(very) rough ASCII transliteration -  bjŏrk -> bjork\n  str = killUnicode(str, world)\n  str = doAcronyms(str)\n  term.normal = str\n}\nexport default normalize\n", "import normalize from '../compute/normal/index.js'\n\n// turn a string input into a 'document' json format\nconst parse = function (input, world) {\n  const { methods, model } = world\n  const { splitSentences, splitTerms, splitWhitespace } = methods.one.tokenize\n  input = input || ''\n  // split into sentences\n  let sentences = splitSentences(input, world)\n  // split into word objects\n  input = sentences.map((txt) => {\n    let terms = splitTerms(txt, model)\n    // split into [pre-text-post]\n    terms = terms.map(t => splitWhitespace(t, model))\n    // add normalized term format, always\n    terms.forEach((t) => {\n      normalize(t, world)\n    })\n    return terms\n  })\n  return input\n}\nexport default parse", "const isAcronym = /[ .][A-Z]\\.? *$/i //asci - 'n.s.a.'\nconst hasEllipse = /(?:\\u2026|\\.{2,}) *$/ // '...'\nconst hasLetter = /\\p{L}/u\nconst hasPeriod = /\\. *$/\nconst leadInit = /^[A-Z]\\. $/ // \"W. Kensington\"\n\n/** does this look like a sentence? */\nconst isSentence = function (str, abbrevs) {\n  // must have a letter\n  if (hasLetter.test(str) === false) {\n    return false\n  }\n  // check for 'F.B.I.'\n  if (isAcronym.test(str) === true) {\n    return false\n  }\n  // check for leading initial - \"W. Kensington\"\n  if (str.length === 3 && leadInit.test(str)) {\n    return false\n  }\n  //check for '...'\n  if (hasEllipse.test(str) === true) {\n    return false\n  }\n  let txt = str.replace(/[.!?\\u203D\\u2E18\\u203C\\u2047-\\u2049] *$/, '')\n  let words = txt.split(' ')\n  let lastWord = words[words.length - 1].toLowerCase()\n  // check for 'Mr.' (and not mr?)\n  if (abbrevs.hasOwnProperty(lastWord) === true && hasPeriod.test(str) === true) {\n    return false\n  }\n  // //check for jeopardy!\n  // if (blacklist.hasOwnProperty(lastWord)) {\n  //   return false\n  // }\n  return true\n}\nexport default isSentence\n", "import splitSentences from './01-sentences/index.js'\nimport splitTerms from './02-terms/index.js'\nimport splitWhitespace from './03-whitespace/index.js'\nimport killUnicode from './unicode.js'\nimport fromString from './parse.js'\nimport isSentence from './01-sentences/is-sentence.js'\n\nexport default {\n  one: {\n    killUnicode,\n    tokenize: {\n      splitSentences,\n      isSentence,\n      splitTerms,\n      splitWhitespace,\n      fromString,\n    },\n  },\n}\n", "const aliases = {\n  '&': 'and',\n  '@': 'at',\n  '%': 'percent',\n  'plz': 'please',\n  'bein': 'being',\n}\nexport default aliases\n", "export default [\n  'approx',\n  'apt',\n  'bc',\n  'cyn',\n  'eg',\n  'esp',\n  'est',\n  'etc',\n  'ex',\n  'exp',\n  'prob', //probably\n  'pron', // Pronunciation\n  'gal', //gallon\n  'min',\n  'pseud',\n  'fig', //figure\n  'jd',\n  'lat', //latitude\n  'lng', //longitude\n  'vol', //volume\n  'fm', //not am\n  'def', //definition\n  'misc',\n  'plz', //please\n  'ea', //each\n  'ps',\n  'sec', //second\n  'pt',\n  'pref', //preface\n  'pl', //plural\n  'pp', //pages\n  'qt', //quarter\n  'fr', //french\n  'sq',\n  'nee', //given name at birth\n  'ss', //ship, or sections\n  'tel',\n  'temp',\n  'vet',\n  'ver', //version\n  'fem', //feminine\n  'masc', //masculine\n  'eng', //engineering/english\n  'adj', //adjective\n  'vb', //verb\n  'rb', //adverb\n  'inf', //infinitive\n  'situ', // in situ\n  'vivo',\n  'vitro',\n  'wr', //world record\n]\n", "export default [\n  'adj',\n  'adm',\n  'adv',\n  'asst',\n  'atty',\n  'bldg',\n  'brig',\n  'capt',\n  'cmdr',\n  'comdr',\n  'cpl',\n  'det',\n  'dr',\n  'esq',\n  'gen',\n  'gov',\n  'hon',\n  'jr',\n  'llb',\n  'lt',\n  'maj',\n  'messrs',\n  'mlle',\n  'mme',\n  'mr',\n  'mrs',\n  'ms',\n  'mstr',\n  'phd',\n  'prof',\n  'pvt',\n  'rep',\n  'reps',\n  'res',\n  'rev',\n  'sen',\n  'sens',\n  'sfc',\n  'sgt',\n  'sir',\n  'sr',\n  'supt',\n  'surg'\n  //miss\n  //misses\n]\n", "export default ['jan', 'feb', 'mar', 'apr', 'jun', 'jul', 'aug', 'sep', 'sept', 'oct', 'nov', 'dec']\n", "export default [\n  'ad',\n  'al',\n  'arc',\n  'ba',\n  'bl',\n  'ca',\n  'cca',\n  'col',\n  'corp',\n  'ft',\n  'fy',\n  'ie',\n  'lit',\n  'ma',\n  'md',\n  'pd',\n  'tce',\n]\n", "export default ['dept', 'univ', 'assn', 'bros', 'inc', 'ltd', 'co']\n", "export default [\n  'rd',\n  'st',\n  'dist',\n  'mt',\n  'ave',\n  'blvd',\n  'cl',\n  // 'ct',\n  'cres',\n  'hwy',\n  //states\n  'ariz',\n  'cal',\n  'calif',\n  'colo',\n  'conn',\n  'fla',\n  'fl',\n  'ga',\n  'ida',\n  'ia',\n  'kan',\n  'kans',\n\n  'minn',\n  'neb',\n  'nebr',\n  'okla',\n  'penna',\n  'penn',\n  'pa',\n  'dak',\n  'tenn',\n  'tex',\n  'ut',\n  'vt',\n  'va',\n  'wis',\n  'wisc',\n  'wy',\n  'wyo',\n  'usafa',\n  'alta',\n  'ont',\n  'que',\n  'sask',\n]\n", "// units that are abbreviations too\nexport default [\n  'dl',\n  'ml',\n  'gal',\n  // 'ft', //ambiguous\n  'qt',\n  'pt',\n  'tbl',\n  'tsp',\n  'tbsp',\n  'km',\n  'dm', //decimeter\n  'cm',\n  'mm',\n  'mi',\n  'td',\n  'hr', //hour\n  'hrs', //hour\n  'kg',\n  'hg',\n  'dg', //decigram\n  'cg', //centigram\n  'mg', //milligram\n  'µg', //microgram\n  'lb', //pound\n  'oz', //ounce\n  'sq ft',\n  'hz', //hertz\n  'mps', //meters per second\n  'mph',\n  'kmph', //kilometers per hour\n  'kb', //kilobyte\n  'mb', //megabyte\n  // 'gb', //ambig\n  'tb', //terabyte\n  'lx', //lux\n  'lm', //lumen\n  // 'pa', //ambig\n  'fl oz', //\n  'yb',\n]\n", "import misc from './abbreviations/misc.js'\nimport honorifics from './abbreviations/honorifics.js'\nimport months from './abbreviations/months.js'\nimport nouns from './abbreviations/nouns.js'\nimport organizations from './abbreviations/organizations.js'\nimport places from './abbreviations/places.js'\nimport units from './abbreviations/units.js'\n\n// add our abbreviation list to our lexicon\nlet list = [\n  [misc],\n  [units, 'Unit'],\n  [nouns, 'Noun'],\n  [honorifics, 'Honorific'],\n  [months, 'Month'],\n  [organizations, 'Organization'],\n  [places, 'Place'],\n]\n// create key-val for sentence-tokenizer\nlet abbreviations = {}\n// add them to a future lexicon\nlet lexicon = {}\n\nlist.forEach(a => {\n  a[0].forEach(w => {\n    // sentence abbrevs\n    abbreviations[w] = true\n    // future-lexicon\n    lexicon[w] = 'Abbreviation'\n    if (a[1] !== undefined) {\n      lexicon[w] = [lexicon[w], a[1]]\n    }\n  })\n})\n\nexport { lexicon, abbreviations }\n", "// dashed prefixes that are not independent words\n//  'mid-century', 'pre-history'\nexport default [\n  'anti',\n  'bi',\n  'co',\n  'contra',\n  'de',\n  'extra',\n  'infra',\n  'inter',\n  'intra',\n  'macro',\n  'micro',\n  'mis',\n  'mono',\n  'multi',\n  'peri',\n  'pre',\n  'pro',\n  'proto',\n  'pseudo',\n  're',\n  'sub',\n  'supra',\n  'trans',\n  'tri',\n  'un',\n  'out', //out-lived\n  'ex',//ex-wife\n\n  // 'counter',\n  // 'mid',\n  // 'out',\n  // 'non',\n  // 'over',\n  // 'post',\n  // 'semi',\n  // 'super', //'super-cool'\n  // 'ultra', //'ulta-cool'\n  // 'under',\n  // 'whole',\n].reduce((h, str) => {\n  h[str] = true\n  return h\n}, {})", "// dashed suffixes that are not independent words\n//  'flower-like', 'president-elect'\nexport default {\n  'like': true,\n  'ish': true,\n  'less': true,\n  'able': true,\n  'elect': true,\n  'type': true,\n  'designate': true,\n  // 'fold':true,\n}", "//a hugely-ignorant, and widely subjective transliteration of latin, cryllic, greek unicode characters to english ascii.\n//approximate visual (not semantic or phonetic) relationship between unicode and ascii characters\n//http://en.wikipedia.org/wiki/List_of_Unicode_characters\n//https://docs.google.com/spreadsheet/ccc?key=0Ah46z755j7cVdFRDM1A2YVpwa1ZYWlpJM2pQZ003M0E\nlet compact = {\n  '!': '¡',\n  '?': '¿Ɂ',\n  '\"': '“”\"❝❞',\n  \"'\": '‘‛❛❜’',\n  '-': '—–',\n  a: 'ªÀÁÂÃÄÅàáâãäåĀāĂăĄąǍǎǞǟǠǡǺǻȀȁȂȃȦȧȺΆΑΔΛάαλАаѦѧӐӑӒӓƛæ',\n  b: 'ßþƀƁƂƃƄƅɃΒβϐϦБВЪЬвъьѢѣҌҍ',\n  c: '¢©ÇçĆćĈĉĊċČčƆƇƈȻȼͻͼϲϹϽϾСсєҀҁҪҫ',\n  d: 'ÐĎďĐđƉƊȡƋƌ',\n  e: 'ÈÉÊËèéêëĒēĔĕĖėĘęĚěƐȄȅȆȇȨȩɆɇΈΕΞΣέεξϵЀЁЕеѐёҼҽҾҿӖӗễ',\n  f: 'ƑƒϜϝӺӻҒғſ',\n  g: 'ĜĝĞğĠġĢģƓǤǥǦǧǴǵ',\n  h: 'ĤĥĦħƕǶȞȟΉΗЂЊЋНнђћҢңҤҥҺһӉӊ',\n  I: 'ÌÍÎÏ',\n  i: 'ìíîïĨĩĪīĬĭĮįİıƖƗȈȉȊȋΊΐΪίιϊІЇіїi̇',\n  j: 'ĴĵǰȷɈɉϳЈј',\n  k: 'ĶķĸƘƙǨǩΚκЌЖКжкќҚқҜҝҞҟҠҡ',\n  l: 'ĹĺĻļĽľĿŀŁłƚƪǀǏǐȴȽΙӀӏ',\n  m: 'ΜϺϻМмӍӎ',\n  n: 'ÑñŃńŅņŇňŉŊŋƝƞǸǹȠȵΝΠήηϞЍИЙЛПийлпѝҊҋӅӆӢӣӤӥπ',\n  o: 'ÒÓÔÕÖØðòóôõöøŌōŎŏŐőƟƠơǑǒǪǫǬǭǾǿȌȍȎȏȪȫȬȭȮȯȰȱΌΘΟθοσόϕϘϙϬϴОФоѲѳӦӧӨөӪӫ',\n  p: 'ƤΡρϷϸϼРрҎҏÞ',\n  q: 'Ɋɋ',\n  r: 'ŔŕŖŗŘřƦȐȑȒȓɌɍЃГЯгяѓҐґ',\n  s: 'ŚśŜŝŞşŠšƧƨȘșȿЅѕ',\n  t: 'ŢţŤťŦŧƫƬƭƮȚțȶȾΓΤτϮТт',\n  u: 'ÙÚÛÜùúûüŨũŪūŬŭŮůŰűŲųƯưƱƲǓǔǕǖǗǘǙǚǛǜȔȕȖȗɄΰυϋύ',\n  v: 'νѴѵѶѷ',\n  w: 'ŴŵƜωώϖϢϣШЩшщѡѿ',\n  x: '×ΧχϗϰХхҲҳӼӽӾӿ',\n  y: 'ÝýÿŶŷŸƳƴȲȳɎɏΎΥΫγψϒϓϔЎУучўѰѱҮүҰұӮӯӰӱӲӳ',\n  z: 'ŹźŻżŽžƵƶȤȥɀΖ',\n}\n//decompress data into two hashes\nlet unicode = {}\nObject.keys(compact).forEach(function (k) {\n  compact[k].split('').forEach(function (s) {\n    unicode[s] = k\n  })\n})\nexport default unicode\n", "// https://util.unicode.org/UnicodeJsps/list-unicodeset.jsp?a=%5Cp%7Bpunctuation%7D\n\n// punctuation to keep at start of word\nconst prePunctuation = {\n  '#': true, //#hastag\n  '@': true, //@atmention\n  '_': true,//underscore\n  '°': true,\n  // '+': true,//+4\n  // '\\\\-',//-4  (escape)\n  // '.',//.4\n  // zero-width chars\n  '\\u200B': true,\n  '\\u200C': true,\n  '\\u200D': true,\n  '\\uFEFF': true\n}\n\n// punctuation to keep at end of word\nconst postPunctuation = {\n  '%': true,//88%\n  '_': true,//underscore\n  '°': true,//degrees, italian ordinal\n  // '\\'',// sometimes\n  // zero-width chars\n  '\\u200B': true,\n  '\\u200C': true,\n  '\\u200D': true,\n  '\\uFEFF': true\n}\n\nconst emoticons = {\n  '<3': true,\n  '</3': true,\n  '<\\\\3': true,\n  ':^P': true,\n  ':^p': true,\n  ':^O': true,\n  ':^3': true,\n}\n\nexport { prePunctuation, postPunctuation, emoticons }", "import aliases from './aliases.js'\nimport { lexicon, abbreviations } from './lexicon.js'\nimport prefixes from './prefixes.js'\nimport suffixes from './suffixes.js'\nimport unicode from './unicode.js'\nimport { prePunctuation, postPunctuation, emoticons } from './punctuation.js'\n\nexport default {\n  one: {\n    aliases,\n    abbreviations,\n    prefixes,\n    suffixes,\n    prePunctuation,\n    postPunctuation,\n    lexicon, //give this one forward\n    unicode,\n    emoticons\n  },\n}\n", "const hasSlash = /\\//\nconst hasDomain = /[a-z]\\.[a-z]/i\nconst isMath = /[0-9]/\n// const hasSlash = /[a-z\\u00C0-\\u00FF] ?\\/ ?[a-z\\u00C0-\\u00FF]/\n// const hasApostrophe = /['’]s$/\n\nconst addAliases = function (term, world) {\n  let str = term.normal || term.text || term.machine\n  const aliases = world.model.one.aliases\n  // lookup known aliases like '&'\n  if (aliases.hasOwnProperty(str)) {\n    term.alias = term.alias || []\n    term.alias.push(aliases[str])\n  }\n  // support slashes as aliases\n  if (hasSlash.test(str) && !hasDomain.test(str) && !isMath.test(str)) {\n    let arr = str.split(hasSlash)\n    // don't split urls and things\n    if (arr.length <= 3) {\n      arr.forEach(word => {\n        word = word.trim()\n        if (word !== '') {\n          term.alias = term.alias || []\n          term.alias.push(word)\n        }\n      })\n    }\n  }\n  // aliases for apostrophe-s\n  // if (hasApostrophe.test(str)) {\n  //   let main = str.replace(hasApostrophe, '').trim()\n  //   term.alias = term.alias || []\n  //   term.alias.push(main)\n  // }\n  return term\n}\nexport default addAliases\n", "const hasDash = /^\\p{Letter}+-\\p{Letter}+$/u\n// 'machine' is a normalized form that looses human-readability\nconst doMachine = function (term) {\n  let str = term.implicit || term.normal || term.text\n  // remove apostrophes\n  str = str.replace(/['’]s$/, '')\n  str = str.replace(/s['’]$/, 's')\n  //lookin'->looking (make it easier for conjugation)\n  str = str.replace(/([aeiou][ktrp])in'$/, '$1ing')\n  //turn re-enactment to reenactment\n  if (hasDash.test(str)) {\n    str = str.replace(/-/g, '')\n  }\n  //#tags, @mentions\n  str = str.replace(/^[#@]/, '')\n  if (str !== term.normal) {\n    term.machine = str\n  }\n}\nexport default doMachine\n", "// sort words by frequency\nconst freq = function (view) {\n  let docs = view.docs\n  let counts = {}\n  for (let i = 0; i < docs.length; i += 1) {\n    for (let t = 0; t < docs[i].length; t += 1) {\n      let term = docs[i][t]\n      let word = term.machine || term.normal\n      counts[word] = counts[word] || 0\n      counts[word] += 1\n    }\n  }\n  // add counts on each term\n  for (let i = 0; i < docs.length; i += 1) {\n    for (let t = 0; t < docs[i].length; t += 1) {\n      let term = docs[i][t]\n      let word = term.machine || term.normal\n      term.freq = counts[word]\n    }\n  }\n}\nexport default freq\n", "// get all character startings in doc\nconst offset = function (view) {\n  let elapsed = 0\n  let index = 0\n  let docs = view.document //start from the actual-top\n  for (let i = 0; i < docs.length; i += 1) {\n    for (let t = 0; t < docs[i].length; t += 1) {\n      let term = docs[i][t]\n      term.offset = {\n        index: index,\n        start: elapsed + term.pre.length,\n        length: term.text.length,\n      }\n      elapsed += term.pre.length + term.text.length + term.post.length\n      index += 1\n    }\n  }\n}\n\n\nexport default offset\n", "// cheat- add the document's pointer to the terms\nconst index = function (view) {\n  // console.log('reindex')\n  let document = view.document\n  for (let n = 0; n < document.length; n += 1) {\n    for (let i = 0; i < document[n].length; i += 1) {\n      document[n][i].index = [n, i]\n    }\n  }\n  // let ptrs = b.fullPointer\n  // console.log(ptrs)\n  // for (let i = 0; i < docs.length; i += 1) {\n  //   const [n, start] = ptrs[i]\n  //   for (let t = 0; t < docs[i].length; t += 1) {\n  //     let term = docs[i][t]\n  //     term.index = [n, start + t]\n  //   }\n  // }\n}\n\nexport default index", "const wordCount = function (view) {\n  let n = 0\n  let docs = view.docs\n  for (let i = 0; i < docs.length; i += 1) {\n    for (let t = 0; t < docs[i].length; t += 1) {\n      if (docs[i][t].normal === '') {\n        continue //skip implicit words\n      }\n      n += 1\n      docs[i][t].wordCount = n\n    }\n  }\n}\n\nexport default wordCount\n", "import alias from './alias.js'\nimport normal from './normal/index.js'\nimport machine from './machine.js'\nimport freq from './freq.js'\nimport offset from './offset.js'\nimport index from './reindex.js'\nimport wordCount from './wordCount.js'\n\n// cheat-method for a quick loop\nconst termLoop = function (view, fn) {\n  let docs = view.docs\n  for (let i = 0; i < docs.length; i += 1) {\n    for (let t = 0; t < docs[i].length; t += 1) {\n      fn(docs[i][t], view.world)\n    }\n  }\n}\n\nconst methods = {\n  alias: (view) => termLoop(view, alias),\n  machine: (view) => termLoop(view, machine),\n  normal: (view) => termLoop(view, normal),\n  freq,\n  offset,\n  index,\n  wordCount,\n}\nexport default methods\n", "import methods from './methods/index.js'\nimport model from './model/index.js'\nimport compute from './compute/index.js'\n\nexport default {\n  compute,\n  methods,\n  model,\n  hooks: ['alias', 'machine', 'index', 'id'],\n}\n\n// const plugin = function (world) {\n//   let { methods, model, parsers } = world\n//   Object.assign({}, methods, _methods)\n//   Object.assign(model, _model)\n//   methods.one.tokenize.fromString = tokenize\n//   parsers.push('normal')\n//   parsers.push('alias')\n//   parsers.push('machine')\n//   // extend View class\n//   // addMethods(View)\n// }\n// export default plugin\n", "// lookup last word in the type-ahead prefixes\nconst typeahead = function (view) {\n  const prefixes = view.model.one.typeahead\n  const docs = view.docs\n  if (docs.length === 0 || Object.keys(prefixes).length === 0) {\n    return\n  }\n  let lastPhrase = docs[docs.length - 1] || []\n  let lastTerm = lastPhrase[lastPhrase.length - 1]\n  // if we've already put whitespace, end.\n  if (lastTerm.post) {\n    return\n  }\n  // if we found something\n  if (prefixes.hasOwnProperty(lastTerm.normal)) {\n    let found = prefixes[lastTerm.normal]\n    // add full-word as an implicit result\n    lastTerm.implicit = found\n    lastTerm.machine = found\n    lastTerm.typeahead = true\n    // tag it, as our assumed term\n    if (view.compute.preTagger) {\n      view.last().unTag('*').compute(['lexicon', 'preTagger'])\n    }\n  }\n}\n\nexport default { typeahead }\n", "// assume any discovered prefixes\nconst autoFill = function () {\n  const docs = this.docs\n  if (docs.length === 0) {\n    return this\n  }\n  let lastPhrase = docs[docs.length - 1] || []\n  let term = lastPhrase[lastPhrase.length - 1]\n  if (term.typeahead === true && term.machine) {\n    term.text = term.machine\n    term.normal = term.machine\n  }\n  return this\n}\n\nconst api = function (View) {\n  View.prototype.autoFill = autoFill\n}\nexport default api", "// generate all the possible prefixes up-front\nconst getPrefixes = function (arr, opts, world) {\n  let index = {}\n  let collisions = []\n  let existing = world.prefixes || {}\n  arr.forEach((str) => {\n    str = str.toLowerCase().trim()\n    let max = str.length\n    if (opts.max && max > opts.max) {\n      max = opts.max\n    }\n    for (let size = opts.min; size < max; size += 1) {\n      let prefix = str.substring(0, size)\n      // ensure prefix is not a word\n      if (opts.safe && world.model.one.lexicon.hasOwnProperty(prefix)) {\n        continue\n      }\n      // does it already exist?\n      if (existing.hasOwnProperty(prefix) === true) {\n        collisions.push(prefix)\n        continue\n      }\n      if (index.hasOwnProperty(prefix) === true) {\n        collisions.push(prefix)\n        continue\n      }\n      index[prefix] = str\n    }\n  })\n  // merge with existing prefixes\n  index = Object.assign({}, existing, index)\n  // remove ambiguous-prefixes\n  collisions.forEach((str) => {\n    delete index[str]\n  })\n  return index\n}\n\nexport default getPrefixes\n", "import allPrefixes from './allPrefixes.js'\n\nconst isObject = val => {\n  return Object.prototype.toString.call(val) === '[object Object]'\n}\n\nconst defaults = {\n  safe: true,\n  min: 3,\n}\n\nconst prepare = function (words = [], opts = {}) {\n  let model = this.model()\n  opts = Object.assign({}, defaults, opts)\n  if (isObject(words)) {\n    Object.assign(model.one.lexicon, words)\n    words = Object.keys(words)\n  }\n  let prefixes = allPrefixes(words, opts, this.world())\n  // manually combine these with any existing prefixes\n  Object.keys(prefixes).forEach(str => {\n    // explode any overlaps\n    if (model.one.typeahead.hasOwnProperty(str)) {\n      delete model.one.typeahead[str]\n      return\n    }\n    model.one.typeahead[str] = prefixes[str]\n  })\n  return this\n}\n\nexport default {\n  typeahead: prepare\n}", "import compute from './compute.js'\nimport api from './api.js'\nimport lib from './lib/index.js'\n\nconst model = {\n  one: {\n    typeahead: {} //set a blank key-val\n  }\n}\nexport default {\n  model,\n  api,\n  lib,\n  compute,\n  hooks: ['typeahead']\n}\n\n", "import nlp from './nlp.js' // 5kb\nimport cache from './1-one/cache/plugin.js'\nimport change from './1-one/change/plugin.js'\nimport contractions from './1-one/contraction-one/plugin.js'\nimport freeze from './1-one/freeze/plugin.js'\nimport lexicon from './1-one/lexicon/plugin.js'\nimport lookup from './1-one/lookup/plugin.js'\nimport match from './1-one/match/plugin.js'\nimport output from './1-one/output/plugin.js'\nimport pointers from './1-one/pointers/plugin.js'\nimport sweep from './1-one/sweep/plugin.js'\nimport tag from './1-one/tag/plugin.js'\nimport tokenize from './1-one/tokenize/plugin.js'\nimport typeahead from './1-one/typeahead/plugin.js'\n\n// order here matters\nnlp.extend(change) //0kb\nnlp.extend(output) //0kb\nnlp.extend(match) //10kb\nnlp.extend(pointers) //2kb\nnlp.extend(tag) //2kb\nnlp.plugin(contractions) //~6kb\nnlp.extend(tokenize) //7kb\nnlp.extend(freeze) //\nnlp.plugin(cache) //~1kb\nnlp.extend(lookup) //7kb\nnlp.extend(typeahead) //1kb\nnlp.extend(lexicon) //1kb\nnlp.extend(sweep) //1kb\n\nexport default nlp // 40kb\n", "//nouns with irregular plural/singular forms\n//used in nouns.toPlural(), and also in the lexicon.\n\nexport default {\n  // -a\n  addendum: 'addenda',\n  corpus: 'corpora',\n  criterion: 'criteria',\n  curriculum: 'curricula',\n  genus: 'genera',\n  memorandum: 'memoranda',\n  opus: 'opera',\n  ovum: 'ova',\n  phenomenon: 'phenomena',\n  referendum: 'referenda',\n\n  // -ae\n  alga: 'algae',\n  alumna: 'alumnae',\n  antenna: 'antennae',\n  formula: 'formulae',\n  larva: 'larvae',\n  nebula: 'nebulae',\n  vertebra: 'vertebrae',\n\n  // -is\n  analysis: 'analyses',\n  axis: 'axes',\n  diagnosis: 'diagnoses',\n  parenthesis: 'parentheses',\n  prognosis: 'prognoses',\n  synopsis: 'synopses',\n  thesis: 'theses',\n  neurosis: 'neuroses',\n  // -x\n  appendix: 'appendices',\n  index: 'indices',\n  matrix: 'matrices',\n  ox: 'oxen',\n  sex: 'sexes',\n\n  // -i\n  alumnus: 'alumni',\n  bacillus: 'bacilli',\n  cactus: 'cacti',\n  fungus: 'fungi',\n  hippopotamus: 'hippopotami',\n  libretto: 'libretti',\n  modulus: 'moduli',\n  nucleus: 'nuclei',\n  octopus: 'octopi',\n  radius: 'radii',\n  stimulus: 'stimuli',\n  syllabus: 'syllabi',\n\n  // -ie\n  cookie: 'cookies',\n  calorie: 'calories',\n  auntie: 'aunties',\n  movie: 'movies',\n  pie: 'pies',\n  rookie: 'rookies',\n  tie: 'ties',\n  zombie: 'zombies',\n\n  // -f\n  leaf: 'leaves',\n  loaf: 'loaves',\n  thief: 'thieves',\n\n  // ee-\n  foot: 'feet',\n  goose: 'geese',\n  tooth: 'teeth',\n\n  // -eaux\n  beau: 'beaux',\n  chateau: 'chateaux',\n  tableau: 'tableaux',\n\n  // -ses\n  bus: 'buses',\n  gas: 'gases',\n  circus: 'circuses',\n  crisis: 'crises',\n  virus: 'viruses',\n  database: 'databases',\n  excuse: 'excuses',\n  abuse: 'abuses',\n\n  avocado: 'avocados',\n  barracks: 'barracks',\n  child: 'children',\n  clothes: 'clothes',\n  echo: 'echoes',\n  embargo: 'embargoes',\n  epoch: 'epochs',\n  deer: 'deer',\n  halo: 'halos',\n  man: 'men',\n  woman: 'women',\n  mosquito: 'mosquitoes',\n  mouse: 'mice',\n  person: 'people',\n  quiz: 'quizzes',\n  rodeo: 'rodeos',\n  shoe: 'shoes',\n  sombrero: 'sombreros',\n  stomach: 'stomachs',\n  tornado: 'tornados',\n  tuxedo: 'tuxedos',\n  volcano: 'volcanoes',\n\n}\n", "// generated in ./lib/lexicon\nexport default {\n  \"Comparative\": \"true¦bett1f0;arth0ew0in0;er\",\n  \"Superlative\": \"true¦earlier\",\n  \"PresentTense\": \"true¦bests,sounds\",\n  \"Condition\": \"true¦lest,unless\",\n  \"PastTense\": \"true¦began,came,d4had,kneel3l2m0sa4we1;ea0sg2;nt;eap0i0;ed;id\",\n  \"Participle\": \"true¦0:09;a06b01cZdXeat0fSgQhPoJprov0rHs7t6u4w1;ak0ithdra02o2r1;i02uY;k0v0;nd1pr04;ergoJoJ;ak0hHo3;e9h7lain,o6p5t4un3w1;o1um;rn;g,k;ol0reS;iQok0;ught,wn;ak0o1runk;ne,wn;en,wn;ewriNi1uJ;dd0s0;ut3ver1;do4se0t1;ak0h2;do2g1;roG;ne;ast0i7;iv0o1;ne,tt0;all0loBor1;bi3g2s1;ak0e0;iv0o9;dd0;ove,r1;a5eamt,iv0;hos0lu1;ng;e4i3lo2ui1;lt;wn;tt0;at0en,gun;r2w1;ak0ok0;is0;en\",\n  \"Gerund\": \"true¦accord0be0doin,go0result0stain0;ing\",\n  \"Expression\": \"true¦a0Yb0Uc0Sd0Oe0Mfarew0Lg0FhZjeez,lWmVnToOpLsJtIuFvEw7y0;a5e3i1u0;ck,p;k04p0;ee,pee;a0p,s;!h;!a,h,y;a5h2o1t0;af,f;rd up,w;atsoever,e1o0;a,ops;e,w;hoo,t;ery w06oi0L;gh,h0;! 0h,m;huh,oh;here nPsk,ut tut;h0ic;eesh,hh,it,oo;ff,h1l0ow,sst;ease,s,z;ew,ooey;h1i,mg,o0uch,w,y;h,o,ps;! 0h;hTmy go0wT;d,sh;a7evertheless,o0;!pe;eh,mm;ah,eh,m1ol0;!s;ao,fao;aCeBi9o2u0;h,mph,rra0zzC;h,y;l1o0;r6y9;la,y0;! 0;c1moCsmok0;es;ow;!p hip hoor0;ay;ck,e,llo,y;ha1i,lleluj0;ah;!ha;ah,ee4o1r0;eat scott,r;l1od0sh; grief,bye;ly;! whiz;ell;e0h,t cetera,ureka,ww,xcuse me;k,p;'oh,a0rat,uh;m0ng;mit,n0;!it;mon,o0;ngratulations,wabunga;a2oo1r0tw,ye;avo,r;!ya;h,m; 1h0ka,las,men,rgh,ye;!a,em,h,oy;la\",\n  \"Negative\": \"true¦n0;ever,o0;n,t\",\n  \"QuestionWord\": \"true¦how3wh0;at,e1ich,o0y;!m,se;n,re; come,'s\",\n  \"Reflexive\": \"true¦h4it5my5o1the0your2;ir1m1;ne3ur0;sel0;f,ves;er0im0;self\",\n  \"Plural\": \"true¦dick0gre0ones,records;ens\",\n  \"Unit|Noun\": \"true¦cEfDgChBinchAk9lb,m6newt5oz,p4qt,t1y0;ardEd;able1b0ea1sp;!l,sp;spo1;a,t,x;on9;!b,g,i1l,m,p0;h,s;!les;!b,elvin,g,m;!es;g,z;al,b;eet,oot,t;m,up0;!s\",\n  \"Value\": \"true¦a few\",\n  \"Imperative\": \"true¦bewa0come he0;re\",\n  \"Plural|Verb\": \"true¦leaves\",\n  \"Demonym\": \"true¦0:15;1:12;a0Vb0Oc0Dd0Ce08f07g04h02iYjVkTlPmLnIomHpEqatari,rCs7t5u4v3welAz2;am0Gimbabwe0;enezuel0ietnam0I;gAkrai1;aiwTex0hai,rinida0Ju2;ni0Prkmen;a5cotti4e3ingapoOlovak,oma0Spaniard,udRw2y0W;ede,iss;negal0Cr09;sh;mo0uT;o5us0Jw2;and0;a2eru0Fhilippi0Nortugu07uerto r0S;kist3lesti1na2raguay0;ma1;ani;ami00i2orweP;caragu0geri2;an,en;a3ex0Lo2;ngo0Drocc0;cedo1la2;gasy,y07;a4eb9i2;b2thua1;e0Cy0;o,t01;azakh,eny0o2uwaiI;re0;a2orda1;ma0Ap2;anO;celandic,nd4r2sraeli,ta01vo05;a2iB;ni0qi;i0oneU;aiAin2ondur0unO;di;amEe2hanai0reek,uatemal0;or2rm0;gi0;ilipino,ren8;cuadoVgyp4mira3ngli2sto1thiopi0urope0;shm0;ti;ti0;aPominUut3;a9h6o4roat3ub0ze2;ch;!i0;lom2ngol5;bi0;a6i2;le0n2;ese;lifor1m2na3;bo2eroo1;di0;angladeshi,el6o4r3ul2;gaE;azi9it;li2s1;vi0;aru2gi0;si0;fAl7merBngol0r5si0us2;sie,tr2;a2i0;li0;genti2me1;ne;ba1ge2;ri0;ni0;gh0r2;ic0;an\",\n  \"Organization\": \"true¦0:4Q;a3Tb3Bc2Od2He2Df27g1Zh1Ti1Pj1Nk1Ll1Gm12n0Po0Mp0Cqu0Br02sTtHuCv9w3xiaomi,y1;amaha,m1Bou1w1B;gov,tu3C;a4e2iki1orld trade organizati33;leaRped0O;lls fargo,st1;fie2Hinghou2R;l1rner br3U;gree3Jl street journ2Im1E;an halOeriz2Xisa,o1;dafo2Yl1;kswagMvo;b4kip,n2ps,s1;a tod3Aps;es3Mi1;lev3Fted natio3C;er,s; mobi32aco beRd bOe9gi frida3Lh3im horto3Amz,o1witt3D;shi49y1;ota,s r 05;e 1in lizzy;b3carpen3Jdaily ma3Dguess w2holli0s1w2;mashing pumpki35uprem0;ho;ea1lack eyed pe3Xyr0Q;ch bo3Dtl0;l2n3Qs1xas instrumen1U;co,la m1F;efoni0Kus;a8cientology,e5ieme2Ymirnoff,np,o3pice gir6quare0Ata1ubaru;rbuc1to34;ks;ny,undgard1;en;a2x pisto1;ls;g1Wrs;few2Minsbur31lesfor03msu2E;adiohead,b8e4o1yana3C;man empi1Xyal 1;b1dutch she4;ank;a3d 1max,vl20;bu1c2Ahot chili peppe2Ylobst2N;ll;ders dige1Ll madrid;c,s;ant3Aizn2Q;a8bs,e5fiz2Ihilip4i3r1;emier 1udenti1D;leagTo2K;nk floyd,zza hut; morrBs;psi2tro1uge0E;br33chi0Tn33;!co;lant2Un1yp16; 2ason27da2P;ld navy,pec,range juli2xf1;am;us;aAb9e6fl,h5i4o1sa,vid3wa;k2tre dame,vart1;is;ia;ke,ntendo,ss0QvZ;l,s;c,st1Otflix,w1; 1sweek;kids on the block,york0D;a,c;nd22s2t1;ional aca2Po,we0U;a,c02d0S;aDcdonalCe9i6lb,o3tv,y1;spa1;ce;b1Tnsanto,ody blu0t1;ley cr1or0T;ue;c2t1;as,subisO;helin,rosoft;dica2rcedes benz,talli1;ca;id,re;ds;cs milk,tt19z24;a3e1g,ittle caesa1P; ore09novo,x1;is,mark,us; 1bour party;pres0Dz boy;atv,fc,kk,lm,m1od1O;art;iffy lu0Roy divisi0Jpmorgan1sa;! cha09;bm,hop,k3n1tv;g,te1;l,rpol;ea;a5ewlett pack1Vi3o1sbc,yundai;me dep1n1P;ot;tac1zbollah;hi;lliburt08sbro;eneral 6hq,ithub,l5mb,o2reen d0Ou1;cci,ns n ros0;ldman sachs,o1;dye1g0H;ar;axo smith kli04encoW;electr0Nm1;oto0Z;a5bi,c barcelo4da,edex,i2leetwood m03o1rito l0G;rd,xcY;at,fa,nancial1restoZ; tim0;na;cebook,nnie mae;b0Asa,u3xxon1; m1m1;ob0J;!rosceptics;aiml0De5isney,o4u1;nkin donu2po0Zran dur1;an;ts;j,w jon0;a,f lepp12ll,peche mode,r spieg02stiny's chi1;ld;aJbc,hFiDloudflaCnn,o3r1;aigsli5eedence clearwater reviv1ossra09;al;c7inba6l4m1o0Est09;ca2p1;aq;st;dplSg1;ate;se;a c1o chanQ;ola;re;a,sco1tigroup;! systems;ev2i1;ck fil a,na daily;r1y;on;d2pital o1rls jr;ne;bury,ill1;ac;aEbc,eBf9l5mw,ni,o1p,rexiteeU;ei3mbardiIston 1;glo1pizza;be;ng;o2ue c1;roV;ckbuster video,omingda1;le; g1g1;oodriL;cht2e ge0rkshire hathaw1;ay;el;cardi,idu,nana republ3s1xt5y5;f,kin robbi1;ns;ic;bYcTdidSerosmith,iRlKmEnheuser busDol,ppleAr6s4u3v2y1;er;is,on;di,todesk;hland o1sociated E;il;b3g2m1;co;os;ys; compu1be0;te1;rs;ch;c,d,erican3t1;!r1;ak; ex1;pre1;ss; 5catel2ta1;ir;! lu1;ce1;nt;jazeera,qae1;da;g,rbnb;as;/dc,a3er,tivision1;! blizz1;ard;demy of scienc0;es;ba\",\n  \"Possessive\": \"true¦its,my,our0thy;!s\",\n  \"Noun|Verb\": \"true¦0:9W;1:AA;2:96;3:A3;4:9R;5:A2;6:9K;7:8N;8:7L;9:A8;A:93;B:8D;C:8X;a9Ob8Qc7Id6Re6Gf5Sg5Hh55i4Xj4Uk4Rl4Em40n3Vo3Sp2Squ2Rr21s0Jt02u00vVwGyFzD;ip,oD;ne,om;awn,e6Fie68;aOeMhJiHoErD;ap,e9Oink2;nd0rDuC;kDry,sh5Hth;!shop;ck,nDpe,re,sh;!d,g;e86iD;p,sD;k,p0t2;aDed,lco8W;r,th0;it,lk,rEsDt4ve,x;h,te;!ehou1ra9;aGen5FiFoD;iDmAte,w;ce,d;be,ew,sA;cuum,l4B;pDr7;da5gra6Elo6A;aReQhrPiOoMrGuEwiDy5Z;n,st;nDrn;e,n7O;aGeFiEoDu6;t,ub2;bu5ck4Jgg0m,p;at,k,nd;ck,de,in,nsDp,v7J;f0i8R;ll,ne,p,r4Yss,t94uD;ch,r;ck,de,e,le,me,p,re;e5Wow,u6;ar,e,ll,mp0st,xt;g,lDng2rg7Ps5x;k,ly;a0Sc0Ne0Kh0Fi0Dk0Cl0Am08n06o05pXquaBtKuFwD;ea88iD;ng,pe,t4;bGit,m,ppErD;fa3ge,pri1v2U;lDo6S;e6Py;!je8;aMeLiKoHrEuDy2;dy,ff,mb2;a85eEiDo5Pugg2;ke,ng;am,ss,t4;ckEop,p,rD;e,m;ing,pi2;ck,nk,t4;er,m,p;ck,ff,ge,in,ke,lEmp,nd,p2rDte,y;!e,t;k,l;aJeIiHlGoFrDur,y;ay,e56inDu3;g,k2;ns8Bt;a5Qit;ll,n,r87te;ed,ll;m,n,rk;b,uC;aDee1Tow;ke,p;a5Je4FiDo53;le,rk;eep,iDou4;ce,p,t;ateboa7Ii;de,gnDl2Vnk,p,ze;!al;aGeFiEoDuff2;ck,p,re,w;ft,p,v0;d,i3Ylt0;ck,de,pe,re,ve;aEed,nDrv1It;se,t2N;l,r4t;aGhedu2oBrD;aEeDibb2o3Z;en,w;pe,t4;le,n,r2M;cDfegua72il,mp2;k,rifi3;aZeHhy6LiGoEuD;b,in,le,n,s5X;a6ck,ll,oDpe,u5;f,t;de,ng,ot,p,s1W;aTcSdo,el,fQgPje8lOmMnLo17pJque6sFturn,vDwa6V;eDi27;al,r1;er74oFpe8tEuD;lt,me;!a55;l71rt;air,eaDly,o53;l,t;dezvo2Zt;aDedy;ke,rk;ea1i4G;a6Iist0r5N;act6Yer1Vo71uD;nd,se;a38o6F;ch,s6G;c1Dge,iEke,lly,nDp1Wt1W;ge,k,t;n,se;es6Biv0;a04e00hYiXlToNrEsy4uD;mp,n4rcha1sh;aKeIiHoDu4O;be,ceFdu3fi2grDje8mi1p,te6;amDe6W;!me;ed,ss;ce,de,nt;sDy;er6Cs;cti3i1;iHlFoEp,re,sDuCw0;e,i5Yt;l,p;iDl;ce,sh;nt,s5V;aEce,e32uD;g,mp,n7;ce,nDy;!t;ck,le,n17pe,tNvot;a1oD;ne,tograph;ak,eFnErDt;fu55mA;!c32;!l,r;ckJiInHrFsEtDu1y;ch,e9;s,te;k,tD;!y;!ic;nt,r,se;!a7;bje8ff0il,oErDutli3Qver4B;bAd0ie9;ze;a4ReFoDur1;d,tD;e,i3;ed,gle8tD;!work;aMeKiIoEuD;rd0;ck,d3Rld,nEp,uDve;nt,th;it5EkD;ey;lk,n4Brr5CsDx;s,ta2B;asuBn4UrDss;ge,it;il,nFp,rk3WsEtD;ch,t0;h,k,t0;da5n0oeuvB;aLeJiHoEuD;mp,st;aEbby,ck,g,oDve;k,t;d,n;cDe,ft,mAnIst;en1k;aDc0Pe4vK;ch,d,k,p,se;bFcEnd,p,t4uD;gh,n4;e,k;el,o2U;eEiDno4E;ck,d,ll,ss;el,y;aEo1OuD;i3mp;m,zz;mpJnEr46ssD;ue;c1Rdex,fluGha2k,se2HteDvoi3;nt,rD;e6fa3viD;ew;en3;a8le2A;aJeHiGoEuD;g,nt;l3Ano2Dok,pDr1u1;!e;ghli1Fke,nt,re,t;aDd7lp;d,t;ck,mGndFrEsh,tDu9;ch,e;bo3Xm,ne4Eve6;!le;!m0;aMear,ift,lKossJrFuD;arDe4Alp,n;antee,d;aFiEoDumb2;uCwth;ll,nd,p;de,sp;ip;aBoDue;ss,w;g,in,me,ng,s,te,ze;aZeWiRlNoJrFuD;ck,el,nDss,zz;c38d;aEoDy;st,wn;cDgme,me,nchi1;tuB;cFg,il,ld,rD;ce,e29mDwa31;!at;us;aFe0Vip,oDy;at,ck,od,wD;!er;g,ke,me,re,sh,vo1E;eGgFlEnDre,sh,t,x;an3i0Q;e,m,t0;ht,uB;ld;aEeDn3;d,l;r,tuB;ce,il,ll,rm,vo2W;cho,d7ffe8nMsKxFyeD;!baD;ll;cGerci1hFpDtra8;eriDo0W;en3me9;au6ibA;el,han7u1;caDtima5;pe;count0d,vy;a01eSiMoJrEuDye;b,el,mp,pli2X;aGeFiEoD;ne,p;ft,ll,nk,p,ve;am,ss;ft,g,in;cEd7ubt,wnloD;ad;k,u0E;ge6p,sFt4vD;e,iDor3;de;char7gui1h,liEpD;at4lay,u5;ke;al,bKcJfeIlGmaCposAsEtaD;il;e07iD;gn,re;ay,ega5iD;ght;at,ct;li04rea1;a5ut;b,ma7n3rDte;e,t;a0Eent0Dh06irc2l03oKrFuD;be,e,rDt;b,e,l,ve;aGeFoEuDy;sh;p,ss,wd;dAep;ck,ft,sh;at,de,in,lTmMnFordina5py,re,st,uDv0;gh,nDp2rt;s01t;ceHdu8fli8glomeIsFtDveN;a8rD;a6ol;e9tru8;ct;ntDrn;ra5;bHfoGmFpD;leDouCromi1;me9;aCe9it,u5;rt;at,iD;ne;lap1oD;r,ur;aEiDoud,ub;ck,p;im,w;aEeDip;at,ck,er;iGllen7nErD;ge,m,t;ge,nD;el;n,r;er,re;ke,ll,mp,noe,pGrXsFtEuDve;se,ti0I;alog,ch;h,t;!tuB;re;a03eZiXlToPrHuEyD;pa11;bb2ck2dgEff0mp,rDst,zz;den,n;et;anJeHiFoadEuD;i1sh;ca6;be,d7;ge;aDed;ch,k;ch,d;aFg,mb,nEoDrd0tt2x,ycott;k,st,t;d,e;rd,st;aFeCiDoYur;nk,tz;nd;me;as,d,ke,nd,opsy,tD;!ch,e;aFef,lt,nDt;d,efA;it;r,t;ck,il,lan3nIrFsEtt2;le;e,h;!gDk;aDe;in;!d,g,k;bu1c05dZge,iYlVnTppQrLsIttGucEwaD;rd;tiD;on;aDempt;ck;k,sD;i6ocia5;st;chFmD;!oD;ur;!iD;ve;eEroa4;ch;al;chDg0sw0;or;aEt0;er;rm;d,m,r;dreHvD;an3oD;ca5;te;ce;ss;cDe,he,t;eFoD;rd,u9;nt;nt,ss;se\",\n  \"Actor\": \"true¦0:7B;1:7G;2:6A;3:7F;4:7O;5:7K;a6Nb62c4Ud4Be41f3Sg3Bh30i2Uj2Qkin2Pl2Km26n1Zo1Sp0Vqu0Tr0JsQtJuHvEw8yo6;gi,ut6;h,ub0;aAe9i8o7r6;estl0it0;m2rk0;fe,nn0t2Bza2H;atherm2ld0;ge earn0it0nder0rri1;eter7i6oyF;ll5Qp,s3Z;an,ina2U;n6s0;c6Uder03;aoisea23e9herapi5iktok0o8r6ut1yco6S;a6endseLo43;d0mp,nscri0Bvel0;ddl0u1G;a0Qchn7en6na4st0;ag0;i3Oo0D;aiXcUeRhPiMki0mu26oJpGquaFtBu7wee6;p0theart;lt2per7r6;f0ge6Iviv1;h6inten0Ist5Ivis1;ero,um2;a8ep7r6;ang0eam0;bro2Nc2Ofa2Nmo2Nsi20;ff0tesm2;tt0;ec7ir2Do6;kesp59u0M;ia5Jt3;l7me6An,rcere6ul;r,ss;di0oi5;n7s6;sy,t0;g0n0;am2ephe1Iow6;girl,m2r2Q;cretInior cit3Fr6;gea4v6;a4it1;hol4Xi7reen6ulpt1;wr2C;e01on;l1nt;aEe9o8u6;l0nn6;er up,ingE;g40le mod3Zof0;a4Zc8fug2Ppo32searQv6;ere4Uolution6;ary;e6luYru22;ptio3T;bbi,dic5Vpp0;arter6e2Z;back;aYeWhSiRlOoKr8sycho7u6;nk,p31;logi5;aGeDiBo6;d9fess1g7ph47s6;pe2Ktitu51;en6ramm0;it1y;igy,uc0;est4Nme mini0Unce6s3E;!ss;a7si6;de4;ch0;ctiti39nk0P;dca0Oet,li6pula50rnst42;c2Itic6;al scie6i2;nti5;a6umb0;nn0y6;er,ma4Lwright;lgrim,one0;a8iloso7otogra7ra6ysi1V;se;ph0;ntom,rmaci5;r6ssi1T;form0s4O;i3El,nel3Yr8st1tr6wn;i6on;arWot;ent4Wi42tn0;ccupa4ffBp8r7ut6;ca5l0B;ac4Iganiz0ig2Fph2;er3t6;i1Jomet6;ri5;ic0spring;aBe9ie4Xo7u6;n,rser3J;b6mad,vi4V;le2Vo4D;i6mesis,phew;ce,ghb1;nny,rr3t1X;aEeDiAo7u6yst1Y;m8si16;der3gul,m7n6th0;arDk;!my;ni7s6;f02s0Jt0;on,st0;chan1Qnt1rcha4;gi9k0n8rtyr,t6y1;e,riar6;ch;ag0iac;ci2stra3I;a7e2Aieutena4o6;rd,s0v0;bor0d7ndlo6ss,urea3Fwy0ym2;rd;!y;!s28;e8o7u6;ggl0;gg0urna2U;st0;c3Hdol,llu3Ummigra4n6; l9c1Qfa4habi42nov3s7ve6;nt1stig3;pe0Nt6;a1Fig3ru0M;aw;airFeBistoAo8u6ygie1K;man6sba2H;!ita8;bo,st6usekN;age,e3P;ri2;ir,r6;m7o6;!ine;it;dress0sty2C;aLeIhostGirl26ladi3oCrand7u6;e5ru;c9daug0Jfa8m7pa6s2Y;!re4;a,o6;th0;hi1B;al7d6lf0;!de3A;ie,k6te26;eep0;!wr6;it0;isha,n6;i6tl04;us;mbl0rden0;aDella,iAo7r6;eela2Nie1P;e,re6ster pare4;be1Hm2r6st0;unn0;an2ZgZlmm17nanci0r6tt0;e6st la2H; marsh2OfigXm2;rm0th0;conoEdDlectriCm8n7x6;amin0cellency,i2A;emy,trepreneur,vironmenta1J;c8p6;er1loye6;e,r;ee;ci2;it1;mi5;aKeBi8ork,ri7u6we02;de,tche2H;ft0v0;ct3eti7plom2Hre6va;ct1;ci2ti2;aDcor3fencCi0InAput9s7tectLvel6;op0;ce1Ge6ign0;rt0;ee,y;iz6;en;em2;c1Ml0;d8nc0redev7ug6;ht0;il;!dy;a06e04fo,hXitizenWlToBr9u6;r3stomer6;! representat6;ive;e3it6;ic;lJmGnAord9rpor1Nu7w6;boy,ork0;n6ri0;ciTte1Q;in3;fidantAgressSs9t6;e0Kr6;ibut1o6;ll0;tab13ul1O;!e;edi2m6pos0rade;a0EeQissi6;on0;leag8on7um6;ni5;el;ue;e6own;an0r6;ic,k;!s;a9e7i6um;ld;erle6f;ad0;ir7nce6plFract0;ll1;m2wI;lebri6o;ty;dBptAr6shi0;e7pe6;nt0;r,t6;ak0;ain;et;aMeLiJlogg0oErBu6;dd0Fild0rgl9siness6;m2p7w6;om2;ers05;ar;i7o6;!k0th0;cklay0de,gadi0;hemi2oge8y6;!frie6;nd;ym2;an;cyc6sR;li5;atbox0ings;by,nk0r6;b0on7te6;nd0;!e07;c04dWge4nQpLrHsFtAu7yatull6;ah;nt7t6;h1oG;!ie;h8t6;e6orney;nda4;ie5le6;te;sis00tron6;aut,om0;chbis8isto7tis6;an,t;crU;hop;ost9p6;ari6rentiS;ti6;on;le;a9cest1im3nou8y6;bo6;dy;nc0;ly5rc6;hi5;mi8v6;entur0is1;er;ni7r6;al;str3;at1;or;counBquaintanArob9t6;ivi5or,re6;ss;st;at;ce;ta4;nt\",\n  \"Adj|Noun\": \"true¦0:16;a1Db17c0Ud0Re0Mf0Dg0Ah08i06ju05l02mWnUoSpNrIsBt7u4v1watershed;a1ision0Z;gabo4nilla,ria1;b0Vnt;ndergr1pstairs;adua14ou1;nd;a3e1oken,ri0;en,r1;min0rori13;boo,n;age,e5ilv0Flack,o3quat,ta2u1well;bordina0Xper5;b0Lndard;ciali0Yl1vereign;e,ve16;cret,n1ri0;ior;a4e2ou1ubbiL;nd,tiY;ar,bBl0Wnt0p1side11;resent0Vublican;ci0Qsh;a4eriodic0last0Zotenti0r1;emi2incip0o1;!fession0;er,um;rall4st,tie0U;ff1pposi0Hv0;ens0Oi0C;agg01ov1uts;el;a5e3iniatJo1;bi01der07r1;al,t0;di1tr0N;an,um;le,riG;attOi2u1;sh;ber0ght,qC;stice,veniT;de0mpressioYn1;cumbe0Edividu0no0Dsta0Eterim;alf,o1umdrum;bby,melF;en2old,ra1;ph0Bve;er0ious;a7e5i4l3u1;git03t1;ure;uid;ne;llow,m1;aFiL;ir,t,vo1;riOuriO;l3p00x1;c1ecutUpeV;ess;d1iK;er;ar2e1;mographUrivO;k,l2;hiGlassSo2rude,unn1;ing;m5n1operK;creCstitueOte2vertab1;le;mpor1nt;ary;ic,m2p1;anion,lex;er2u1;ni8;ci0;al;e5lank,o4r1;i2u1;te;ef;ttom,urgeois;st;cadem9d6l2ntarct9r1;ab,ct8;e3tern1;at1;ive;rt;oles1ult;ce1;nt;ic\",\n  \"Adj|Past\": \"true¦0:4Q;1:4C;2:4H;3:4E;a44b3Tc36d2Je29f20g1Wh1Si1Jj1Gkno1Fl1Am15n12o0Xp0Mqu0Kr08sLtEuAv9w4yellow0;a7ea6o4rinkl0;r4u3Y;n,ri0;k31th3;rp0sh0tZ;ari0e1O;n5p4s0;d1li1Rset;cov3derstood,i4;fi0t0;a8e3Rhr7i6ouTr4urn0wi4C;a4imm0ou2G;ck0in0pp0;ed,r0;eat2Qi37;m0nn0r4;get0ni2T;aOcKeIhGimFm0Hoak0pDt7u4;bsid3Ogge44s4;pe4ta2Y;ct0nd0;a8e7i2Eok0r5u4;ff0mp0nn0;ength2Hip4;ed,p0;am0reotyp0;in0t0;eci4ik0oH;al3Efi0;pRul1;a4ock0ut;d0r0;a4c1Jle2t31;l0s3Ut0;a6or5r4;at4e25;ch0;r0tt3;t4ut0;is2Mur1;aEe5o4;tt0;cAdJf2Bg9je2l8m0Knew0p7qu6s4;eTpe2t4;or0ri2;e3Dir0;e1lac0;at0e2Q;i0Rul1;eiv0o4ycl0;mme2Lrd0v3;in0lli0ti2A;a4ot0;li28;aCer30iBlAo9r5u4;mp0zzl0;e6i2Oo4;ce2Fd4lo1Anou30pos0te2v0;uc0;fe1CocCp0Iss0;i2Kli1L;ann0e2CuS;ck0erc0ss0;ck0i2Hr4st0;allLk0;bse7c6pp13rgan2Dver4;lo4whelm0;ok0;cupi0;rv0;aJe5o4;t0uri1A;ed0gle2;a6e5ix0o4ut0ys1N;di1Nt15u26;as0Clt0;n4rk0;ag0ufact0A;e6i5o4;ad0ck0st,v0;cens0m04st0;ft,v4;el0;tt0wn;a5o15u4;dg0s1B;gg0;llumSmpAn4sol1;br0cre1Ldebt0f8jZspir0t5v4;it0olv0;e4ox0Y;gr1n4re23;d0si15;e2l1o1Wuri1;li0o01r4;ov0;a6e1o4um03;ok0r4;ri0Z;mm3rm0;i6r5u4;a1Bid0;a0Ui0Rown;ft0;aAe9i8l6oc0Ir4;a4i0oz0Y;ctHg19m0;avo0Ju4;st3;ni08tt0x0;ar0;d0il0sc4;in1;dCl1mBn9quipp0s8x4;agger1c6p4te0T;a0Se4os0;ct0rie1D;it0;cap0tabliZ;cha0XgFha1As4;ur0;a0Zbarra0N;i0Buc1;aMeDi5r4;a01i0;gni08miniSre2s4;a9c6grun0Ft4;o4re0Hu17;rt0;iplWou4;nt0r4;ag0;bl0;cBdRf9l8p7ra6t5v4;elop0ot0;ail0ermQ;ng0;re07;ay0ight0;e4in0o0M;rr0;ay0enTor1;m5t0z4;ed,zl0;ag0p4;en0;aPeLhIlHo9r6u4;lt4r0stom03;iv1;a5owd0u4;sh0;ck0mp0;d0loAm7n4ok0v3;centr1f5s4troC;id3olid1;us0;b5pl4;ic1;in0;r0ur0;assi9os0utt3;ar5i4;ll0;g0m0;lebr1n6r4;ti4;fi0;tralJ;g0lcul1;aDewild3iCl9o7r5urn4;ed,t;ok4uis0;en;il0r0t4und;tl0;e5i4;nd0;ss0;as0;ffl0k0laMs0tt3;bPcNdKfIg0lFmaz0nDppBrm0ss9u5wa4;rd0;g5thor4;iz0;me4;nt0;o6u4;m0r0;li0re4;ci1;im1ticip1;at0;a5leg0t3;er0;rm0;fe2;ct0;ju5o7va4;nc0;st0;ce4knowledg0;pt0;and5so4;rb0;on0;ed\",\n  \"Singular\": \"true¦0:5J;1:5H;2:4W;3:4S;4:52;5:57;6:5L;7:56;8:5B;a52b4Lc3Nd35e2Xf2Og2Jh28in24j23k22l1Um1Ln1Ho1Bp0Rqu0Qr0FsZtMuHvCw9x r58yo yo;a9ha3Po3Q;f3i4Rt0Gy9;! arou39;arCeAideo ga2Qo9;cabu4Jl5C;gOr9t;di4Zt1Y;iety,ni4P;nBp30rAs 9;do43s5E;bani1in0;coordinat3Ader9;estima1to24we41; rex,aKeJhHiFoErBuAv9;! show;m2On2rntLto1D;agedy,ib9o4E;e,u9;n0ta46;ni1p2rq3L;c,er,m9;etF;ing9ree26;!y;am,mp3F;ct2le6x return;aNcMeKhor4QiJkHoGpin off,tDuBy9;ll9ner7st4T;ab2X;b9i1n28per bowl,rro1X;st3Ltot0;atAipe2Go1Lrate7udent9;! lo0I;i39u1;ft ser4Lmeo1I;elet5i9;ll,r3V;b38gn2Tte;ab2Jc9min3B;t,urity gua2N;e6ho2Y;bbatic0la3Jndwi0Qpi5;av5eDhetor2iAo9;de6om,w;tAv9;erb2C;e,u0;bDcBf9publ2r10spi1;er9orm3;e6r0;i9ord label;p2Ht0;a1u46;estion mark,ot2F;aPeMhoLiIlGoErAu9yram1F;ddi3HpErpo1Js3J;eBo9;bl3Zs9;pe3Jta1;dic1Rmi1Fp1Qroga8ss relea1F;p9rt0;py;a9ebisci1;q2Dte;cn2eAg9;!gy;!r;ne call,tocoK;anut,dAr9t0yo1;cen3Jsp3K;al,est0;nop4rAt9;e,hog5;adi11i2V;atme0bj3FcBpia1rde0thers,utspok5ve9wn3;n,r9;ti0Pview;cuAe9;an;pi3;arBitAot9umb3;a2Fhi2R;e,ra1;cot2ra8;aFeCiAo9ur0;nopo4p18rni2Nsq1Rti36uld;c,li11n0As9tt5;chief,si34;dAnu,t9;al,i3;al,ic;gna1mm0nd15rsupi0te9yf4;ri0;aDegCiBu9;ddi1n9;ch;me,p09; Be0M;bor14y9; 9er;up;eyno1itt5;el4ourn0;cBdices,itia8ni25sAtel0Lvert9;eb1J;e28titu1;en8i2T;aIeEighDoAu9;man right,s22;me9rmoFsp1Ftb0K;! r9;un; scho0YriY;a9i1N;d9v5; start,pho9;ne;ndful,sh brown,v5ze;aBelat0Ilaci3r9ul4yp1S;an9enadi3id;a1Cd slam,ny;df4r9;l2ni1I;aGeti1HiFlu1oCrAun9;er0;ee market,i9onti3;ga1;l4ur9;so9;me;ePref4;br2mi4;conoFffi7gg,lecto0Rmbas1EnCpidem2s1Zth2venBxAyel9;id;ampZempl0Nte6;i19t;er7terp9;ri9;se;my;eLiEoBr9ump tru0U;agonf4i9;er,ve thru;cAg7i4or,ssi3wn9;side;to0EumenE;aEgniDnn3sAvide9;nd;conte6incen8p9tri11;osi9;ti0C;ta0H;le0X;athBcAf9ni0terre6;ault 05err0;al,im0;!b9;ed;aWeThMiLlJoDr9;edit caBuc9;ib9;le;rd;efficDke,lCmmuniqLnsApi3rr0t0Xus9yo1;in;erv9uI;ato02;ic,lQ;ie6;er7i9oth;e6n2;ty,vil wM;aDeqCick5ocoBr9;istmas car9ysanthemum;ol;la1;ue;ndeli3racteri9;st2;iAllEr9;e0tifica1;liZ;hi3nFpErCt9ucus;erpi9hedr0;ll9;ar;!bohyd9ri3;ra1;it0;aAe,nib0t9;on;l,ry;aMeLiop2leJoHrDu9;nny,r9tterf4;g9i0;la9;ry;eakAi9;ck;fa9throB;st;dy,ro9wl;ugh;mi9;sh;an,l4;nkiArri3;er;ng;cSdMlInFppeti1rDsBtt2utop9;sy;ic;ce6pe9;ct;r9sen0;ay;ecAoma4tiA;ly;do1;i5l9;er7y;gy;en; hominDjAvan9;tage;ec8;ti9;ve;em;cCeAqui9;tt0;ta1;te;iAru0;al;de6;nt\",\n  \"Person|Noun\": \"true¦a0Eb07c03dWeUfQgOhLjHkiGlFmCnBolive,p7r4s3trini06v1wa0;ng,rd,tts;an,enus,iol0;a,et;ky,onPumm09;ay,e1o0uby;bin,d,se;ed,x;a2e1o0;l,tt04;aLnJ;dYge,tR;at,orm;a0eloW;t0x,ya;!s;a9eo,iH;ng,tP;a2e1o0;lGy;an,w3;de,smi4y;a0erb,iOolBuntR;ll,z0;el;ail,e0iLuy;ne;a1ern,i0lo;elds,nn;ith,n0;ny;a0dEmir,ula,ve;rl;a4e3i1j,ol0;ly;ck,x0;ie;an,ja;i0wn;sy;am,h0liff,rystal;a0in,ristian;mbers,ri0;ty;a4e3i2o,r0ud;an0ook;dy;ll;nedict,rg;k0nks;er;l0rt;fredo,ma\",\n  \"Actor|Verb\": \"true¦aCb8c5doctor,engineAfool,g3host,judge,m2nerd,p1recruit,scout,ushAvolunteAwi0;mp,tneA;arent,ilot;an,ime;eek,oof,r0uide;adu8oom;ha1o0;ach,nscript,ok;mpion,uffeur;o2u0;lly,tch0;er;ss;ddi1ffili0rchite1;ate;ct\",\n  \"MaleName\": \"true¦0:H6;1:FZ;2:DS;3:GQ;4:CZ;5:FV;6:GM;7:FP;8:GW;9:ET;A:C2;B:GD;aF8bE1cCQdBMeASfA1g8Yh88i7Uj6Sk6Bl5Mm48n3So3Ip33qu31r26s1Et0Ru0Ov0CwTxSyHzC;aCor0;cChC1karia,nAT;!hDkC;!aF6;!ar7CeF5;aJevgenBSoEuC;en,rFVsCu3FvEF;if,uf;nDs6OusC;ouf,s6N;aCg;s,tC;an,h0;hli,nCrosE1ss09;is,nC;!iBU;avi2ho5;aPeNiDoCyaEL;jcieBJlfgang,odrFutR;lFnC;f8TsC;lCt1;ow;bGey,frEhe4QlC;aE5iCy;am,e,s;ed8iC;d,ed;eAur;i,ndeD2rn2sC;!l9t1;lDyC;l1ne;lDtC;!er;aCHy;aKernDAiFladDoC;jteB0lodymyr;!iC;mFQsDB;cFha0ktBZnceDrgCOvC;a0ek;!nC;t,zo;!e4StBV;lCnC7sily;!entC;in9J;ghE2lCm70nax,ri,sm0;riCyss87;ch,k;aWeRhNiLoGrEuDyC;!l2roEDs1;n6r6E;avD0eCist0oy,um0;ntCRvBKy;bFdAWmCny;!asDmCoharu;aFFie,y;!z;iA6y;mCt4;!my,othy;adEeoDia0SomC;!as;!dor91;!de4;dFrC;enBKrC;anBJeCy;ll,nBI;!dy;dgh,ha,iCnn2req,tsu5V;cDAka;aYcotWeThPiMlobod0oKpenc2tEurDvenAEyCzym1;ed,lvest2;aj,e9V;anFeDuC;!aA;fan17phEQvCwaA;e77ie;!islaCl9;v,w;lom1rBuC;leymaDHta;dDgmu9UlCm1yabonga;as,v8B;!dhart8Yn9;aEeClo75;lCrm0;d1t1;h9Jne,qu1Jun,wn,yne;aDbastiEDk2Yl5Mpp,rgCth,ymoCU;e1Dio;m4n;!tC;!ie,y;eDPlFmEnCq67tosCMul;dCj2UtiA5;e01ro;!iATkeB6mC4u5;!ik,vato9K;aZeUheC8iRoGuDyC;an,ou;b99dDf4peAssC;!elEG;ol00y;an,bLc7MdJel,geIh0lHmGnEry,sDyC;!ce;ar7Ocoe,s;!aCnBU;ld,n;an,eo;a7Ef;l7Jr;e3Eg2n9olfo,riC;go;bBNeDH;cCl9;ar87c86h54kCo;!ey,ie,y;cFeA3gDid,ubByCza;an8Ln06;g85iC;naC6s;ep;ch8Kfa5hHin2je8HlGmFndEoHpha5sDul,wi36yC;an,mo8O;h9Im4;alDSol3O;iD0on;f,ph;ul;e9CinC;cy,t1;aOeLhilJiFrCyoG;aDeC;m,st1;ka85v2O;eDoC;tr;r8GtC;er,ro;!ipCl6H;!p6U;dCLrcy,tC;ar,e9JrC;!o7;b9Udra8So9UscAHtri62ulCv8I;!ie,o7;ctav6Ji2lImHndrBRrGsDtCum6wB;is,to;aDc6k6m0vCwaBE;al79;ma;i,vR;ar,er;aDeksandr,ivC;er,i2;f,v;aNeLguyBiFoCu3O;aDel,j4l0ma0rC;beAm0;h,m;cFels,g5i9EkDlC;es,s;!au,h96l78olaC;!i,y;hCkCol76;ol75;al,d,il,ls1vC;ilAF;hom,tC;e,hC;anCy;!a5i5;aYeViLoGuDyC;l4Nr1;hamDr84staC;fa,p6E;ed,mG;di10e,hamEis4JntDritz,sCussa;es,he;e,y;ad,ed,mC;ad,ed;cGgu5hai,kFlEnDtchC;!e8O;a9Pik;house,o7t1;ae73eC3ha8Iolaj;ah,hDkC;!ey,y;aDeC;al,l;el,l;hDlv3rC;le,ri8Ev4T;di,met;ay0c00gn4hWjd,ks2NlTmadZnSrKsXtDuric7VxC;imilBKwe8B;eHhEi69tCus,y69;!eo,hCia7;ew,i67;eDiC;as,eu,s;us,w;j,o;cHiGkFlEqu8Qsha83tCv3;iCy;!m,n;in,on;el,o7us;a6Yo7us;!elCin,o7us;!l8o;frAEi5Zny,u5;achDcoCik;lm;ai,y;amDdi,e5VmC;oud;adCm6W;ou;aulCi9P;ay;aWeOiMloyd,oJuDyC;le,nd1;cFdEiDkCth2uk;a7e;gi,s,z;ov7Cv6Hw6H;!as,iC;a6Een;g0nn52renDuCvA4we7D;!iS;!zo;am,n4oC;n5r;a9Yevi,la5KnHoFst2thaEvC;eCi;nte;bo;nCpo8V;!a82el,id;!nC;aAy;mEnd1rDsz73urenCwr6K;ce,t;ry,s;ar,beAont;aOeIhalHiFla4onr63rDu5SylC;e,s;istCzysztof;i0oph2;er0ngsl9p,rC;ilA9k,ollos;ed,id;en0iGnDrmCv4Z;it;!dDnCt1;e2Ny;ri4Z;r,th;cp2j4mEna8BrDsp6them,uC;ri;im,l;al,il;a03eXiVoFuC;an,lCst3;en,iC;an,en,o,us;aQeOhKkub4AnIrGsDzC;ef;eDhCi9Wue;!ua;!f,ph;dCge;i,on;!aCny;h,s,th6J;anDnC;!ath6Hie,n72;!nC;!es;!l,sCy;ph;o,qu3;an,mC;!i,m6V;d,ffFns,rCs4;a7JemDmai7QoCry;me,ni1H;i9Dy;!e73rC;ey,y;cKdBkImHrEsDvi2yC;dBs1;on,p2;ed,oDrCv67;e6Qod;d,s61;al,es5Wis1;a,e,oCub;b,v;ob,qu13;aTbNchiMgLke53lija,nuKonut,rIsEtCv0;ai,suC;ki;aDha0i8XmaCsac;el,il;ac,iaC;h,s;a,vinCw3;!g;k,nngu6X;nac1Xor;ka;ai,rahC;im;aReLoIuCyd6;beAgGmFsC;eyDsC;a3e3;in,n;ber5W;h,o;m2raDsse3wC;a5Pie;c49t1K;a0Qct3XiGnDrC;beAman08;dr7VrC;iCy2N;!k,q1R;n0Tt3S;bKlJmza,nIo,rEsDyC;a5KdB;an,s0;lEo67r2IuCv9;hi5Hki,tC;a,o;an,ey;k,s;!im;ib;a08e00iUlenToQrMuCyorgy;iHnFsC;!taC;f,vC;!e,o;n6tC;er,h2;do,lC;herDlC;auCerQ;me;aEegCov2;!g,orC;!io,y;dy,h7C;dfr9nza3XrDttfC;ri6C;an,d47;!n;acoGlEno,oCuseppe;rgiCvan6O;!o,s;be6Ies,lC;es;mo;oFrC;aDha4HrC;it,y;ld,rd8;ffErgC;!e7iCy;!os;!r9;bElBrCv3;eCla1Nr4Hth,y;th;e,rC;e3YielC;!i4;aXeSiQlOorrest,rCyod2E;aHedFiC;edDtC;s,z;ri18;!d42eri11riC;ck,k;nCs2;cEkC;ie,lC;in,yn;esLisC;!co,z3M;etch2oC;ri0yd;d5lConn;ip;deriFliEng,rC;dinaCg4nan0B;nd8;pe,x;co;bCdi,hd;iEriC;ce,zC;io;an,en,o;benez2dZfrYit0lTmMnJo3rFsteb0th0ugenEvCymBzra;an,eCge4D;ns,re3K;!e;gi,iDnCrol,v3w3;est8ie,st;cCk;!h,k;o0DriCzo;co,qC;ue;aHerGiDmC;aGe3A;lCrh0;!iC;a10o,s;s1y;nu5;beAd1iEliDm2t1viCwood;n,s;ot28s;!as,j5Hot,sC;ha;a3en;!dGg6mFoDua2QwC;a2Pin;arC;do;oZuZ;ie;a04eTiOmitrNoFrag0uEwDylC;an,l0;ay3Hig4D;a3Gdl9nc0st3;minFnDri0ugCvydGy2S;!lF;!a36nCov0;e1Eie,y;go,iDykC;as;cCk;!k;i,y;armuFetDll1mitri7neCon,rk;sh;er,m6riC;ch;id;andLepak,j0lbeAmetri4nIon,rGsEvDwCxt2;ay30ey;en,in;hawn,moC;nd;ek,riC;ck;is,nC;is,y;rt;re;an,le,mKnIrEvC;e,iC;!d;en,iEne0PrCyl;eCin,yl;l45n;n,o,us;!iCny;el,lo;iCon;an,en,on;a0Fe0Ch03iar0lRoJrFuDyrC;il,us;rtC;!is;aEistC;iaCob12;no;ig;dy,lInErC;ey,neliCy;s,us;nEor,rDstaC;nt3;ad;or;by,e,in,l3t1;aHeEiCyde;fCnt,ve;fo0Xt1;menDt4;us;s,t;rFuDyC;!t1;dCs;e,io;enC;ce;aHeGrisC;!toC;phCs;!eC;!r;st2t;d,rCs;b5leC;s,y;cDdrCs6;ic;il;lHmFrC;ey,lDroCy;ll;!o7t1;er1iC;lo;!eb,v3;a09eZiVjorn,laUoSrEuCyr1;ddy,rtKst2;er;aKeFiEuDyC;an,ce,on;ce,no;an,ce;nDtC;!t;dDtC;!on;an,on;dFnC;dDisC;lav;en,on;!foOl9y;bby,gd0rCyd;is;i0Lke;bElDshC;al;al,lL;ek;nIrCshoi;at,nEtC;!raC;m,nd;aDhaCie;rd;rd8;!iDjam3nCs1;ie,y;to;kaMlazs,nHrC;n9rDtC;!holomew;eCy;tt;ey;dCeD;ar,iC;le;ar1Nb1Dd16fon15gust3hm12i0Zja0Yl0Bm07nTputsiSrGsaFugustEveDyCziz;a0kh0;ry;o,us;hi;aMchiKiJjun,mHnEon,tCy0;em,hCie,ur8;ur;aDoC;!ld;ud,v;aCin;an,nd8;!el,ki;baCe;ld;ta;aq;aMdHgel8tCw6;hoFoC;iDnC;!i8y;ne;ny;er7rCy;eDzC;ej;!as,i,j,s,w;!s;s,tolC;iCy;!y;ar,iEmaCos;nu5r;el;ne,r,t;aVbSdBeJfHiGl01onFphonsEt1vC;aPin;on;e,o;so,zo;!sR;!onZrC;ed;c,jaHksFssaHxC;!andC;er,rC;e,os,u;andCei;ar,er,r;ndC;ro;en;eDrecC;ht;rt8;dd3in,n,sC;taC;ir;ni;dDm6;ar;an,en;ad,eC;d,t;in;so;aGi,olErDvC;ik;ian8;f8ph;!o;mCn;!a;dGeFraDuC;!bakr,lfazl;hCm;am;!l;allFel,oulaye,ulC;!lDrahm0;an;ah,o;ah;av,on\",\n  \"Uncountable\": \"true¦0:2E;1:2L;2:33;a2Ub2Lc29d22e1Rf1Ng1Eh16i11j0Yk0Wl0Rm0Hn0Do0Cp03rZsLt9uran2Jv7w3you gu0E;a5his17i4oo3;d,l;ldlife,ne;rm8t1;apor,ernacul29i3;neg28ol1Otae;eDhBiAo8r4un3yranny;a,gst1B;aff2Oea1Ko4ue nor3;th;o08u3;bleshoot2Ose1Tt;night,othpas1Vwn3;foEsfoE;me off,n;er3und1;e,mod2S;a,nnis;aDcCeBhAi9ki8o7p6t4u3weepstak0;g1Unshi2Hshi;ati08e3;am,el;ace2Keci0;ap,cc1meth2C;n,ttl0;lk;eep,ingl0or1C;lf,na1Gri0;ene1Kisso1C;d0Wfe2l4nd,t3;i0Iurn;m1Ut;abi0e4ic3;e,ke15;c3i01laxa11search;ogni10rea10;a9e8hys7luto,o5re3ut2;amble,mis0s3ten20;en1Zs0L;l3rk;i28l0EyH; 16i28;a24tr0F;nt3ti0M;i0s;bstetri24vercrowd1Qxyg09;a5e4owada3utella;ys;ptu1Ows;il poliZtional securi2;aAe8o5u3;m3s1H;ps;n3o1K;ey,o3;gamy;a3cha0Elancholy,rchandi1Htallurgy;sl0t;chine3g1Aj1Hrs,thema1Q; learn1Cry;aught1e6i5ogi4u3;ck,g12;c,s1M;ce,ghtn18nguis1LteratWv1;ath1isVss;ara0EindergartPn3;icke0Aowled0Y;e3upit1;a3llyfiGwel0G;ns;ce,gnor6mp5n3;forma00ter3;net,sta07;atiSort3rov;an18;a7e6isto09o3ung1;ckey,mework,ne4o3rseradi8spitali2use arrest;ky;s2y;adquarteXre;ir,libut,ppiHs3;hi3te;sh;ene8l6o5r3um,ymnas11;a3eZ;niUss;lf,re;ut3yce0F;en; 3ti0W;edit0Hpo3;ol;aNicFlour,o4urnit3;ure;od,rgive3uri1wl;ness;arCcono0LducaBlectr9n7quip8thi0Pvery6x3;ist4per3;ti0B;en0J;body,o08th07;joy3tertain3;ment;ici2o3;ni0H;tiS;nings,th;emi02i6o4raugh3ynas2;ts;pe,wnstai3;rs;abet0ce,s3;honZrepu3;te;aDelciChAivi07l8o3urrency;al,ld w6mmenta5n3ral,ttIuscoB;fusiHt 3;ed;ry;ar;assi01oth0;es;aos,e3;eMwK;us;d,rO;a8i6lood,owlHread5u3;ntGtt1;er;!th;lliarJs3;on;g3ss;ga3;ge;cKdviJeroGirFmBn6ppeal court,r4spi3thleL;rin;ithmet3sen3;ic;i6y3;o4th3;ing;ne;se;en5n3;es2;ty;ds;craft;bi8d3nau7;yna3;mi6;ce;id,ous3;ti3;cs\",\n  \"Infinitive\": \"true¦0:9G;1:9T;2:AD;3:90;4:9Z;5:84;6:AH;7:A9;8:92;9:A0;A:AG;B:AI;C:9V;D:8R;E:8O;F:97;G:6H;H:7D;a94b8Hc7Jd68e4Zf4Mg4Gh4Ai3Qj3Nk3Kl3Bm34nou48o2Vp2Equ2Dr1Es0CtZuTvRwI;aOeNiLors5rI;eJiI;ng,te;ak,st3;d5e8TthI;draw,er;a2d,ep;i2ke,nIrn;d1t;aIie;liADniAry;nJpI;ho8Llift;cov1dJear8Hfound8DlIplug,rav82tie,ve94;eaAo3X;erIo;cut,go,staAFvalA3w2G;aSeQhNoMrIu73;aIe72;ffi3Smp3nsI;aBfo7CpI;i8oD;pp3ugh5;aJiJrIwaD;eat5i2;nk;aImA0;ch,se;ck3ilor,keImp1r8L;! paD;a0Ic0He0Fh0Bi0Al08mugg3n07o05p02qu01tUuLwI;aJeeIim;p,t5;ll7Wy;bNccMffLggeCmmKppJrI;mouFpa6Zvi2;o0re6Y;ari0on;er,i4;e7Numb;li9KmJsiIveD;de,st;er9it;aMe8MiKrI;ang3eIi2;ng27w;fIng;f5le;b,gg1rI;t3ve;a4AiA;a4UeJit,l7DoI;il,of;ak,nd;lIot7Kw;icEve;atGeak,i0O;aIi6;m,y;ft,ng,t;aKi6CoJriIun;nk,v6Q;ot,rt5;ke,rp5tt1;eIll,nd,que8Gv1w;!k,m;aven9ul8W;dd5tis1Iy;a0FeKiJoI;am,t,ut;d,p5;a0Ab08c06d05f01group,hea00iZjoi4lXmWnVpTq3MsOtMup,vI;amp,eJiIo3B;sEve;l,rI;e,t;i8rI;ie2ofE;eLiKpo8PtIurfa4;o24rI;aHiBuctu8;de,gn,st;mb3nt;el,hra0lIreseF;a4e71;d1ew,o07;aHe3Fo2;a7eFiIo6Jy;e2nq41ve;mbur0nf38;r0t;inKleBocus,rJuI;el,rbiA;aBeA;an4e;aBu4;ei2k8Bla43oIyc3;gni39nci3up,v1;oot,uI;ff;ct,d,liIp;se,ze;tt3viA;aAenGit,o7;aWerUinpoiFlumm1LoTrLuI;b47ke,niArIt;poDsuI;aFe;eMoI;cKd,fe4XhibEmo7noJpo0sp1tru6vI;e,i6o5L;un4;la3Nu8;aGclu6dJf1occupy,sup0JvI;a6BeF;etermi4TiB;aGllu7rtr5Ksse4Q;cei2fo4NiAmea7plex,sIva6;eve8iCua6;mp1rItrol,ve;a6It6E;bOccuNmEpMutLverIwe;l07sJtu6Yu0wI;helm;ee,h1F;gr5Cnu2Cpa4;era7i4Ipo0;py,r;ey,seItaH;r2ss;aMe0ViJoIultiply;leCu6Pw;micJnIspla4;ce,g3us;!k;iIke,na9;m,ntaH;aPeLiIo0u3N;ke,ng1quIv5;eIi6S;fy;aKnIss5;d,gI;th5;rn,ve;ng2Gu1N;eep,idnJnI;e4Cow;ap;oHuI;gg3xtaI;po0;gno8mVnIrk;cTdRfQgeChPitia7ju8q1CsNtKun6EvI;a6eIo11;nt,rt,st;erJimi6BoxiPrI;odu4u6;aBn,pr03ru6C;iCpi8tIu8;all,il,ruB;abEibE;eCo3Eu0;iIul9;ca7;i7lu6;b5Xmer0pI;aLer4Uin9ly,oJrI;e3Ais6Bo2;rt,se,veI;riA;le,rt;aLeKiIoiCuD;de,jaInd1;ck;ar,iT;mp1ng,pp5raIve;ng5Mss;ath1et,iMle27oLrI;aJeIow;et;b,pp3ze;!ve5A;gg3ve;aTer45i5RlSorMrJuI;lf4Cndrai0r48;eJiIolic;ght5;e0Qsh5;b3XeLfeEgJsI;a3Dee;eIi2;!t;clo0go,shIwa4Z;ad3F;att1ee,i36;lt1st5;a0OdEl0Mm0FnXquip,rWsVtGvTxI;aRcPeDhOiNpJtIu6;ing0Yol;eKi8lIo0un9;aHoI;it,re;ct,di7l;st,t;a3oDu3B;e30lI;a10u6;lt,mi28;alua7oI;ke,l2;chew,pou0tab19;a0u4U;aYcVdTfSgQhan4joy,lPqOrNsuMtKvI;e0YisI;a9i50;er,i4rI;aHenGuC;e,re;iGol0F;ui8;ar9iC;a9eIra2ulf;nd1;or4;ang1oIu8;r0w;irc3lo0ou0ErJuI;mb1;oaGy4D;b3ct;bKer9pI;hasiIow1;ze;aKody,rI;a4oiI;d1l;lm,rk;ap0eBuI;ci40de;rIt;ma0Rn;a0Re04iKo,rIwind3;aw,ed9oI;wn;agno0e,ff1g,mi2Kne,sLvI;eIul9;rIst;ge,t;aWbVcQlod9mant3pNru3TsMtI;iIoDu37;lJngI;uiA;!l;ol2ua6;eJlIo0ro2;a4ea0;n0r0;a2Xe36lKoIu0S;uIv1;ra9;aIo0;im;a3Kur0;b3rm;af5b01cVduBep5fUliTmQnOpMrLsiCtaGvI;eIol2;lop;ch;a20i2;aDiBloIoD;re,y;oIy;te,un4;eJoI;liA;an;mEv1;a4i0Ao06raud,y;ei2iMla8oKrI;ee,yI;!pt;de,mIup3;missi34po0;de,ma7ph1;aJrief,uI;g,nk;rk;mp5rk5uF;a0Dea0h0Ai09l08oKrIurta1G;a2ea7ipp3uI;mb3;ales4e04habEinci6ll03m00nIrro6;cXdUfQju8no7qu1sLtKvI;eIin4;ne,r9y;aHin2Bribu7;er2iLoli2Epi8tJuI;lt,me;itu7raH;in;d1st;eKiJoIroFu0;rm;de,gu8rm;ss;eJoI;ne;mn,n0;eIlu6ur;al,i2;buCe,men4pI;eIi3ly;l,te;eBi6u6;r4xiC;ean0iT;rcumveFte;eJirp,oI;o0p;riAw;ncIre5t1ulk;el;a02eSi6lQoPrKuI;iXrIy;st,y;aLeaKiJoad5;en;ng;stfeLtX;ke;il,l11mba0WrrMth1;eIow;ed;!coQfrie1LgPhMliLqueaKstJtrIwild1;ay;ow;th;e2tt3;a2eJoI;ld;ad;!in,ui3;me;bysEckfi8ff3tI;he;b15c0Rd0Iff0Ggree,l0Cm09n03ppZrXsQttOuMvJwaE;it;eDoI;id;rt;gIto0X;meF;aIeCraB;ch,in;pi8sJtoI;niA;aKeIi04u8;mb3rt,ss;le;il;re;g0Hi0ou0rI;an9i2;eaKly,oiFrI;ai0o2;nt;r,se;aMi0GnJtI;icipa7;eJoIul;un4y;al;ly0;aJu0;se;lga08ze;iKlI;e9oIu6;t,w;gn;ix,oI;rd;a03jNmiKoJsoI;rb;pt,rn;niIt;st1;er;ouJuC;st;rn;cLhie2knowled9quiItiva7;es4re;ce;ge;eQliOoKrJusI;e,tom;ue;mIst;moJpI;any,liA;da7;ma7;te;pt;andPduBet,i6oKsI;coKol2;ve;liArt,uI;nd;sh;de;ct;on\",\n  \"Person\": \"true¦0:1Q;a29b1Zc1Md1Ee18f15g13h0Ri0Qj0Nk0Jl0Gm09n06o05p00rPsItCusain bolt,v9w4xzibit,y1;anni,oko on2uji,v1;an,es;en,o;a3ednesday adams,i2o1;lfram,o0Q;ll ferrell,z khalifa;lt disn1Qr1;hol,r0G;a2i1oltai06;n dies0Zrginia wo17;lentino rossi,n goG;a4h3i2ripp,u1yra banks;lZpac shakur;ger woods,mba07;eresa may,or;kashi,t1ylor;um,ya1B;a5carlett johanss0h4i3lobodan milosevic,no2ocr1Lpider1uperm0Fwami; m0Em0E;op dogg,w whi1H;egfried,nbad;akespeaTerlock holm1Sia labeouf;ddam hussa16nt1;a cla11ig9;aAe6i5o3u1za;mi,n dmc,paul,sh limbau1;gh;bin hood,d stew16nald1thko;in0Mo;han0Yngo starr,valdo;ese witherspo0i1mbrandt;ll2nh1;old;ey,y;chmaninoff,ffi,iJshid,y roma1H;a4e3i2la16o1uff daddy;cahont0Ie;lar,p19;le,rZ;lm17ris hilt0;leg,prah winfr0Sra;a2e1iles cra1Bostradam0J; yo,l5tt06wmQ;pole0s;a5e4i2o1ubar03;by,lie5net,rriss0N;randa ju1tt romn0M;ly;rl0GssiaB;cklemo1rkov,s0ta hari,ya angelou;re;ady gaga,e1ibera0Pu;bron jam0Xch wale1e;sa;anye west,e3i1obe bryant;d cudi,efer suther1;la0P;ats,sha;a2effers0fk,k rowling,rr tolki1;en;ck the ripp0Mwaharlal nehru,y z;liTnez,ron m7;a7e5i3u1;lk hog5mphrey1sa01;! bog05;l1tl0H;de; m1dwig,nry 4;an;ile selassFlle ber4m3rrison1;! 1;ford;id,mo09;ry;ast0iannis,o1;odwPtye;ergus0lorence nightinga08r1;an1ederic chopN;s,z;ff5m2nya,ustaXzeki1;el;eril lagasse,i1;le zatop1nem;ek;ie;a6e4i2octor w1rake;ho;ck w1ego maradoC;olf;g1mi lovaOnzel washingt0;as;l1nHrth vadR;ai lNt0;a8h5lint0o1thulhu;n1olio;an,fuci1;us;on;aucKop2ristian baMy1;na;in;millo,ptain beefhe4r1;dinal wols2son1;! palmF;ey;art;a8e5hatt,i3oHro1;ck,n1;te;ll g1ng crosby;atB;ck,nazir bhut2rtil,yon1;ce;to;nksy,rack ob1;ama;l 6r3shton kutch2vril lavig8yn ra1;nd;er;chimed2istot1;le;es;capo2paci1;no;ne\",\n  \"Adjective\": \"true¦0:AI;1:BS;2:BI;3:BA;4:A8;5:84;6:AV;7:AN;8:AF;9:7H;A:BQ;B:AY;C:BC;D:BH;E:9Y;aA2b9Ec8Fd7We79f6Ng6Eh61i4Xj4Wk4Tl4Im41n3Po36p2Oquart7Pr2Ds1Dt14uSvOwFye29;aMeKhIiHoF;man5oFrth7G;dADzy;despreB1n w97s86;acked1UoleF;!sa6;ather1PeFll o70ste1D;!k5;nt1Ist6Ate4;aHeGiFola5T;bBUce versa,gi3Lle;ng67rsa5R;ca1gBSluAV;lt0PnLpHrGsFttermoBL;ef9Ku3;b96ge1; Hb32pGsFtiAH;ca6ide d4R;er,i85;f52to da2;a0Fbeco0Hc0Bd04e02f01gu1XheaBGiXkn4OmUnTopp06pRrNsJtHus0wF;aFiel3K;nt0rra0P;app0eXoF;ld,uS;eHi37o5ApGuF;perv06spec39;e1ok9O;en,ttl0;eFu5;cogn06gul2RlGqu84sF;erv0olv0;at0en33;aFrecede0E;id,rallel0;am0otic0;aFet;rri0tF;ch0;nFq26vers3;sur0terFv7U;eFrupt0;st0;air,inish0orese98;mploy0n7Ov97xpF;ect0lain0;eHisFocume01ue;clFput0;os0;cid0rF;!a8Scov9ha8Jlyi8nea8Gprivileg0sMwF;aFei9I;t9y;hGircumcFonvin2U;is0;aFeck0;lleng0rt0;b20ppea85ssuGttend0uthorF;iz0;mi8;i4Ara;aLeIhoHip 25oGrF;anspare1encha1i2;geth9leADp notch,rpB;rny,ugh6H;ena8DmpGrFs6U;r49tia4;eCo8P;leFst4M;nt0;a0Dc09e07h06i04ki03l01mug,nobbi4XoVpRqueami4XtKuFymb94;bHccinAi generis,pFr5;erFre7N;! dup9b,vi70;du0li7Lp6IsFurb7J;eq9Atanda9X;aKeJi16o2QrGubboFy4Q;rn;aightFin5GungS; fFfF;or7V;adfa9Pri6;lwa6Ftu82;arHeGir6NlendBot Fry;on;c3Qe1S;k5se; call0lImb9phistic16rHuFviV;ndFth1B;proof;dBry;dFub6; o2A;e60ipF;pe4shod;ll0n d7R;g2HnF;ceEg6ist9;am3Se9;co1Zem5lfFn6Are7; suf4Xi43;aGholFient3A;ar5;rlFt4A;et;cr0me,tisfac7F;aOeIheumatoBiGoF;bu8Ztt7Gy3;ghtFv3; 1Sf6X;cJdu8PlInown0pro69sGtF;ard0;is47oF;lu2na1;e1Suc45;alcit8Xe1ondi2;bBci3mpa1;aSePicayu7laOoNrGuF;bl7Tnjabi;eKiIoF;b7VfGmi49pFxi2M;er,ort81;a7uD;maFor,sti7va2;!ry;ciDexis0Ima2CpaB;in55puli8G;cBid;ac2Ynt 3IrFti2;ma40tFv7W;!i3Z;i2YrFss7R;anoBtF; 5XiF;al,s5V;bSffQkPld OnMrLth9utKverF;!aIbMdHhGni75seas,t,wF;ei74rou74;a63e7A;ue;ll;do1Ger,si6A;d3Qg2Aotu5Z; bFbFe on o7g3Uli7;oa80;fashion0school;!ay; gua7XbFha5Uli7;eat;eHligGsF;ce7er0So1C;at0;diFse;a1e1;aOeNiMoGuF;anc0de; moEnHrthFt6V;!eFwe7L;a7Krn;chaGdescri7Iprof30sF;top;la1;ght5;arby,cessa4ighbor5wlyw0xt;k0usiaFv3;ti8;aQeNiLoHuF;dIltiF;facet0p6;deHlGnFot,rbBst;ochro4Xth5;dy;rn,st;ddle ag0nF;dbloZi,or;ag9diocEga,naGrFtropolit4Q;e,ry;ci8;cIgenta,inHj0Fkeshift,mmGnFri4Oscu61ver18;da5Dy;ali4Lo4U;!stream;abEho;aOeLiIoFumberi8;ngFuti1R;stan3RtF;erm,i4H;ghtGteraF;l,ry,te;heart0wei5O;ft JgFss9th3;al,eFi0M;nda4;nguBps0te5;apGind5noF;wi8;ut;ad0itte4uniW;ce co0Hgno6Mll0Cm04nHpso 2UrF;a2releF;va1; ZaYcoWdReQfOgrNhibi4Ri05nMoLsHtFvalu5M;aAeF;nDrdepe2K;a7iGolFuboI;ub6ve1;de,gF;nifica1;rdi5N;a2er;own;eriIiLluenVrF;ar0eq5H;pt,rt;eHiGoFul1O;or;e,reA;fiFpe26termi5E;ni2;mpFnsideCrreA;le2;ccuCdeq5Ene,ppr4J;fFsitu,vitro;ro1;mJpF;arHeGl15oFrop9;li2r11;n2LrfeA;ti3;aGeFi18;d4BnD;tuE;egGiF;c0YteC;al,iF;tiF;ma2;ld;aOelNiLoFuma7;a4meInHrrGsFur5;ti6;if4E;e58o3U; ma3GsF;ick;ghfalut2HspF;an49;li00pf33;i4llow0ndGrdFtM; 05coEworki8;sy,y;aLener44iga3Blob3oKrGuF;il1Nng ho;aFea1Fizzl0;cGtF;ef2Vis;ef2U;ld3Aod;iFuc2D;nf2R;aVeSiQlOoJrF;aGeFil5ug3;q43tf2O;gFnt3S;i6ra1;lk13oHrF; keeps,eFge0Vm9tu41;g0Ei2Ds3R;liF;sh;ag4Mowe4uF;e1or45;e4nF;al,i2;d Gmini7rF;ti6ve1;up;bl0lDmIr Fst pac0ux;oGreacF;hi8;ff;ed,ili0R;aXfVlTmQnOqu3rMthere3veryday,xF;aApIquisi2traHuF;be48lF;ta1;!va2L;edRlF;icF;it;eAstF;whi6; Famor0ough,tiE;rou2sui2;erGiF;ne1;ge1;dFe2Aoq34;er5;ficF;ie1;g9sF;t,ygF;oi8;er;aWeMiHoGrFue;ea4owY;ci6mina1ne,r31ti8ubQ;dact2Jfficult,m,sGverF;ge1se;creGePjoi1paCtF;a1inA;et,te; Nadp0WceMfiLgeneCliJmuEpeIreliAsGvoF;id,ut;pFtitu2ul1L;eCoF;nde1;ca2ghF;tf13;a1ni2;as0;facto;i5ngero0I;ar0Ce09h07i06l05oOrIuF;rmudgeon5stoma4teF;sy;ly;aIeHu1EystalF; cleFli7;ar;epy;fFv17z0;ty;erUgTloSmPnGrpoCunterclVveFy;rt;cLdJgr21jIsHtrF;aFi2;dic0Yry;eq1Yta1;oi1ug3;escenFuN;di8;a1QeFiD;it0;atoDmensuCpF;ass1SulF;so4;ni3ss3;e1niza1;ci1J;ockwiD;rcumspeAvil;eFintzy;e4wy;leGrtaF;in;ba2;diac,ef00;a00ePiLliJoGrFuck nak0;and new,isk,on22;gGldface,naF; fi05fi05;us;nd,tF;he;gGpartisFzarE;an;tiF;me;autifOhiNlLnHsFyoN;iWtselF;li8;eGiFt;gn;aFfi03;th;at0oF;v0w;nd;ul;ckwards,rF;e,rT; priori,b13c0Zd0Tf0Ng0Ihe0Hl09mp6nt06pZrTsQttracti0MuLvIwF;aGkF;wa1B;ke,re;ant garGeraF;ge;de;diIsteEtF;heFoimmu7;nt07;re;to4;hGlFtu2;eep;en;bitIchiv3roHtF;ifiFsy;ci3;ga1;ra4;ry;pFt;aHetizi8rF;oprF;ia2;llFre1;ed,i8;ng;iquFsy;at0e;ed;cohKiJkaHl,oGriFterX;ght;ne,of;li7;ne;ke,ve;olF;ic;ad;ain07gressiIi6rF;eeF;ab6;le;ve;fGraB;id;ectGlF;ue1;ioF;na2; JaIeGvF;erD;pt,qF;ua2;ma1;hoc,infinitum;cuCquiGtu3u2;al;esce1;ra2;erSjeAlPoNrKsGuF;nda1;e1olu2trF;aAuD;se;te;eaGuF;pt;st;aFve;rd;aFe;ze;ct;ra1;nt\",\n  \"Pronoun\": \"true¦elle,h3i2me,she,th0us,we,you;e0ou;e,m,y;!l,t;e,im\",\n  \"Preposition\": \"true¦aPbMcLdKexcept,fIinGmid,notwithstandiWoDpXqua,sCt7u4v2w0;/o,hereSith0;! whHin,oW;ersus,i0;a,s a vis;n1p0;!on;like,til;h1ill,oward0;!s;an,ereby,r0;ough0u;!oM;ans,ince,o that,uch G;f1n0ut;!to;!f;! 0to;effect,part;or,r0;om;espite,own,u3;hez,irca;ar1e0oBy;sides,tween;ri7;bo8cross,ft7lo6m4propos,round,s1t0;!op;! 0;a whole,long 0;as;id0ong0;!st;ng;er;ut\",\n  \"SportsTeam\": \"true¦0:18;1:1E;2:1D;3:14;a1Db15c0Sd0Kfc dallas,g0Ihouston 0Hindiana0Gjacksonville jagua0k0El0Am01new UoRpKqueens parkJreal salt lake,sBt6utah jazz,vancouver whitecaps,w4yW;ashington 4h10;natio1Mredski2wizar0W;ampa bay 7e6o4;ronto 4ttenham hotspur;blue ja0Mrapto0;nnessee tita2xasD;buccanee0ra0K;a8eattle 6porting kansas0Wt4; louis 4oke0V;c1Drams;marine0s4;eah13ounH;cramento Rn 4;antonio spu0diego 4francisco gJjose earthquak1;char08paB; ran07;a9h6ittsburgh 5ortland t4;imbe0rail blaze0;pirat1steele0;il4oenix su2;adelphia 4li1;eagl1philNunE;dr1;akland 4klahoma city thunder,rlando magic;athle0Lrai4;de0;england 8orleans 7york 4;g5je3knYme3red bul0Xy4;anke1;ian3;pelica2sain3;patrio3revolut4;ion;anchEeAi4ontreal impact;ami 8lwaukee b7nnesota 4;t5vi4;kings;imberwolv1wi2;rewe0uc0J;dolphi2heat,marli2;mphis grizz4ts;li1;a6eic5os angeles 4;clippe0dodFlaB;esterV; galaxy,ke0;ansas city 4nF;chiefs,roya0D; pace0polis col3;astr05dynamo,rocke3texa2;olden state warrio0reen bay pac4;ke0;allas 8e4i04od6;nver 6troit 4;lio2pisto2ti4;ge0;broncYnugge3;cowbo5maver4;icZ;ys;arEelLhAincinnati 8leveland 6ol4;orado r4umbus crew sc;api7ocki1;brow2cavalie0guar4in4;dia2;bengaVre4;ds;arlotte horAicago 4;b5cubs,fire,wh4;iteB;ea0ulQ;diff4olina panthe0; city;altimore Alackburn rove0oston 6rooklyn 4uffalo bilN;ne3;ts;cel5red4; sox;tics;rs;oriol1rave2;rizona Ast8tlanta 4;brav1falco2h4;awA;ns;es;on villa,r4;os;c6di4;amondbac4;ks;ardi4;na4;ls\",\n  \"Unit\": \"true¦a07b04cXdWexVfTgRhePinYjoule0BkMlJmDnan08oCp9quart0Bsq ft,t7volts,w6y2ze3°1µ0;g,s;c,f,n;dVear1o0;ttR; 0s 0;old;att,b;erNon0;!ne02;ascals,e1i0;cXnt00;rcent,tJ;hms,unceY;/s,e4i0m²,²,³;/h,cro2l0;e0liK;!²;grLsR;gCtJ;it1u0;menQx;erPreP;b5elvins,ilo1m0notO;/h,ph,²;!byGgrEmCs;ct0rtzL;aJogrC;allonJb0ig3rB;ps;a0emtEl oz,t4;hrenheit,radG;aby9;eci3m1;aratDe1m0oulombD;²,³;lsius,nti0;gr2lit1m0;et0;er8;am7;b1y0;te5;l,ps;c2tt0;os0;econd1;re0;!s\",\n  \"Noun|Gerund\": \"true¦0:3O;1:3M;2:3N;3:3D;4:32;5:2V;6:3E;7:3K;8:36;9:3J;A:3B;a3Pb37c2Jd27e23f1Vg1Sh1Mi1Ij1Gk1Dl18m13n11o0Wp0Pques0Sr0EsTtNunderMvKwFyDzB;eroi0oB;ni0o3P;aw2eB;ar2l3;aEed4hispe5i5oCrB;ap8est3i1;n0ErB;ki0r31;i1r2s9tc9;isualizi0oB;lunt1Vti0;stan4ta6;aFeDhin6iCraBy8;c6di0i2vel1M;mi0p8;aBs1;c9si0;l6n2s1;aUcReQhOiMkatKl2Wmo6nowJpeItFuCwB;ea5im37;b35f0FrB;fi0vB;e2Mi2J;aAoryt1KrCuB;d2KfS;etc9ugg3;l3n4;bCi0;ebBi0;oar4;gnBnAt1;a3i0;ip8oB;p8rte2u1;a1r27t1;hCo5reBulp1;a2Qe2;edu3oo3;i3yi0;aKeEi4oCuB;li0n2;oBwi0;fi0;aFcEhear7laxi0nDpor1sB;pon4tructB;r2Iu5;de5;or4yc3;di0so2;p8ti0;aFeacek20laEoCrBublis9;a1Teten4in1oces7;iso2siB;tio2;n2yi0;ckaAin1rB;ki0t1O;fEpeDrganiCvB;erco24ula1;si0zi0;ni0ra1;fe5;avi0QeBur7;gotia1twor6;aDeCi2oB;de3nito5;a2dita1e1ssaA;int0XnBrke1;ifUufactu5;aEeaDiBodAyi0;cen7f1mi1stB;e2i0;r2si0;n4ug9;iCnB;ea4it1;c6l3;ogAuB;dAgg3stif12;ci0llust0VmDnBro2;nova1sp0NterBven1;ac1vie02;agi2plo4;aDea1iCoBun1;l4w3;ki0ri0;nd3rB;roWvB;es1;aCene0Lli4rBui4;ee1ie0N;rde2the5;aHeGiDlCorBros1un4;e0Pmat1;ir1oo4;gh1lCnBs9;anZdi0;i0li0;e3nX;r0Zscina1;a1du01nCxB;erci7plo5;chan1di0ginB;ee5;aLeHiGoub1rCum8wB;el3;aDeCiB;bb3n6vi0;a0Qs7;wi0;rTscoDvi0;ba1coZlBvelo8;eCiB;ve5;ga1;nGti0;aVelebUhSlPoDrBur3yc3;aBos7yi0;f1w3;aLdi0lJmFnBo6pi0ve5;dDsCvinB;ci0;trBul1;uc1;muniDpB;lBo7;ai2;ca1;lBo5;ec1;c9ti0;ap8eaCimToBubT;ni0t9;ni0ri0;aBee5;n1t1;ra1;m8rCs1te5;ri0;vi0;aPeNitMlLoGrDuB;dge1il4llBr8;yi0;an4eat9oadB;cas1;di0;a1mEokB;i0kB;ee8;pi0;bi0;es7oa1;c9i0;gin2lonAt1;gi0;bysit1c6ki0tt3;li0;ki0;bando2cGdverti7gi0pproac9rgDssuCtB;trac1;mi0;ui0;hi0;si0;coun1ti0;ti0;ni0;ng\",\n  \"PhrasalVerb\": \"true¦0:92;1:96;2:8H;3:8V;4:8A;5:83;6:85;7:98;8:90;9:8G;A:8X;B:8R;C:8U;D:8S;E:70;F:97;G:8Y;H:81;I:7H;J:79;a9Fb7Uc6Rd6Le6Jf5Ig50h4Biron0j47k40l3Em31n2Yo2Wp2Cquiet Hr1Xs0KtZuXvacuu6QwNyammerBzK;ero Dip LonK;e0k0;by,ov9up;aQeMhLiKor0Mrit19;mp0n3Fpe0r5s5;ackAeel Di0S;aLiKn33;gh 3Wrd0;n Dr K;do1in,oJ;it 79k5lk Lrm 69sh Kt83v60;aw3do1o7up;aw3in,oC;rgeBsK;e 2herE;a00eYhViRoQrMuKypP;ckErn K;do1in,oJup;aLiKot0y 30;ckl7Zp F;ck HdK;e 5Y;n7Wp 3Es5K;ck MdLe Kghten 6me0p o0Rre0;aw3ba4do1in,up;e Iy 2;by,oG;ink Lrow K;aw3ba4in,up;ba4ov9up;aKe 77ll62;m 2r 5M;ckBke Llk K;ov9shit,u47;aKba4do1in,leave,o4Dup;ba4ft9pa69w3;a0Vc0Te0Mh0Ii0Fl09m08n07o06p01quar5GtQuOwK;earMiK;ngLtch K;aw3ba4o8K; by;cKi6Bm 2ss0;k 64;aReQiPoNrKud35;aigh2Det75iK;ke 7Sng K;al6Yup;p Krm2F;by,in,oG;c3Ln3Lr 2tc4O;p F;c3Jmp0nd LrKveAy 2O;e Ht 2L;ba4do1up;ar3GeNiMlLrKurB;ead0ingBuc5;a49it 6H;c5ll o3Cn 2;ak Fe1Xll0;a3Bber 2rt0und like;ap 5Vow Duggl5;ash 6Noke0;eep NiKow 6;cLp K;o6Dup;e 68;in,oK;ff,v9;de19gn 4NnKt 6Gz5;gKkE; al6Ale0;aMoKu5W;ot Kut0w 7M;aw3ba4f48oC;c2WdeEk6EveA;e Pll1Nnd Orv5tK; Ktl5J;do1foLin,o7upK;!on;ot,r5Z;aw3ba4do1in,o33up;oCto;al66out0rK;ap65ew 6J;ilAv5;aXeUiSoOuK;b 5Yle0n Kstl5;aLba4do1inKo2Ith4Nu5P;!to;c2Xr8w3;ll Mot LpeAuK;g3Ind17;a2Wf3Po7;ar8in,o7up;ng 68p oKs5;ff,p18;aKelAinEnt0;c6Hd K;o4Dup;c27t0;aZeYiWlToQrOsyc35uK;ll Mn5Kt K;aKba4do1in,oJto47up;pa4Dw3;a3Jdo1in,o21to45up;attleBess KiNop 2;ah2Fon;iLp Kr4Zu1Gwer 6N;do1in,o6Nup;nt0;aLuK;gEmp 6;ce u20y 6D;ck Kg0le 4An 6p5B;oJup;el 5NncilE;c53ir 39n0ss MtLy K;ba4oG; Hc2R;aw3ba4in,oJ;pKw4Y;e4Xt D;aLerd0oK;dAt53;il Hrrow H;aTeQiPoLuK;ddl5ll I;c1FnkeyMp 6uthAve K;aKdo1in,o4Lup;l4Nw3; wi4K;ss0x 2;asur5e3SlLss K;a21up;t 6;ke Ln 6rKs2Ax0;k 6ryA;do,fun,oCsure,up;a02eViQoLuK;ck0st I;aNc4Fg MoKse0;k Kse4D;aft9ba4do1forw37in56o0Zu46;in,oJ;d 6;e NghtMnLsKve 00;ten F;e 2k 2; 2e46;ar8do1in;aMt LvelK; oC;do1go,in,o7up;nEve K;in,oK;pKut;en;c5p 2sh LtchBughAy K;do1o59;in4Po7;eMick Lnock K;do1oCup;oCup;eLy K;in,up;l Ip K;aw3ba4do1f04in,oJto,up;aMoLuK;ic5mpE;ke3St H;c43zz 2;a01eWiToPuK;nLrrKsh 6;y 2;keLt K;ar8do1;r H;lKneErse3K;d Ke 2;ba4dKfast,o0Cup;ear,o1;de Lt K;ba4on,up;aw3o7;aKlp0;d Ml Ir Kt 2;fKof;rom;f11in,o03uW;cPm 2nLsh0ve Kz2P;at,it,to;d Lg KkerP;do1in,o2Tup;do1in,oK;ut,v9;k 2;aZeTive Rloss IoMrLunK; f0S;ab hold,in43ow 2U; Kof 2I;aMb1Mit,oLr8th1IuK;nd9;ff,n,v9;bo7ft9hQw3;aw3bKdo1in,oJrise,up,w3;a4ir2H;ar 6ek0t K;aLb1Fdo1in,oKr8up;ff,n,ut,v9;cLhKl2Fr8t,w3;ead;ross;d aKng 2;bo7;a0Ee07iYlUoQrMuK;ck Ke2N;ar8up;eLighten KownBy 2;aw3oG;eKshe27; 2z5;g 2lMol Krk I;aKwi20;bo7r8;d 6low 2;aLeKip0;sh0;g 6ke0mKrKtten H;e F;gRlPnNrLsKzzle0;h F;e Km 2;aw3ba4up;d0isK;h 2;e Kl 1T;aw3fPin,o7;ht ba4ure0;ePnLsK;s 2;cMd K;fKoG;or;e D;d04l 2;cNll Krm0t1G;aLbKdo1in,o09sho0Eth08victim;a4ehi2O;pa0C;e K;do1oGup;at Kdge0nd 12y5;in,o7up;aOi1HoNrK;aLess 6op KuN;aw3b03in,oC;gBwB; Ile0ubl1B;m 2;a0Ah05l02oOrLut K;aw3ba4do1oCup;ackBeep LoKy0;ss Dwd0;by,do1in,o0Uup;me NoLuntK; o2A;k 6l K;do1oG;aRbQforOin,oNtKu0O;hLoKrue;geth9;rough;ff,ut,v9;th,wK;ard;a4y;paKr8w3;rt;eaLose K;in,oCup;n 6r F;aNeLiK;ll0pE;ck Der Kw F;on,up;t 2;lRncel0rOsMtch LveE; in;o1Nup;h Dt K;doubt,oG;ry LvK;e 08;aw3oJ;l Km H;aLba4do1oJup;ff,n,ut;r8w3;a0Ve0MiteAl0Fo04rQuK;bblNckl05il0Dlk 6ndl05rLsKtMy FzzA;t 00;n 0HsK;t D;e I;ov9;anWeaUiLush K;oGup;ghQng K;aNba4do1forMin,oLuK;nd9p;n,ut;th;bo7lKr8w3;ong;teK;n 2;k K;do1in,o7up;ch0;arTg 6iRn5oPrNssMttlLunce Kx D;aw3ba4;e 6; ar8;e H;do1;k Dt 2;e 2;l 6;do1up;d 2;aPeed0oKurt0;cMw K;aw3ba4do1o7up;ck;k K;in,oC;ck0nk0stA; oQaNef 2lt0nd K;do1ov9up;er;up;r Lt K;do1in,oCup;do1o7;ff,nK;to;ck Pil0nMrgLsK;h D;ainBe D;g DkB; on;in,o7;aw3do1in,oCup;ff,ut;ay;ct FdQir0sk MuctionA; oG;ff;ar8o7;ouK;nd; o7;d K;do1oKup;ff,n;wn;o7up;ut\",\n  \"ProperNoun\": \"true¦aIbDc8dalhousHe7f5gosford,h4iron maiden,kirby,landsdowne,m2nis,r1s0wembF;herwood,paldiB;iel,othwe1;cgi0ercedes,issy;ll;intBudsB;airview,lorence,ra0;mpt9nco;lmo,uro;a1h0;arlt6es5risti;rl0talina;et4i0;ng;arb3e0;et1nt0rke0;ley;on;ie;bid,jax\",\n  \"Person|Place\": \"true¦a8d6h4jordan,k3orlando,s1vi0;ctor9rgin9;a0ydney;lvador,mara,ntia4;ent,obe;amil0ous0;ton;arw2ie0;go;lexandr1ust0;in;ia\",\n  \"LastName\": \"true¦0:BR;1:BF;2:B5;3:BH;4:AX;5:9Y;6:B6;7:BK;8:B0;9:AV;A:AL;B:8Q;C:8G;D:7K;E:BM;F:AH;aBDb9Zc8Wd88e81f7Kg6Wh64i60j5Lk4Vl4Dm39n2Wo2Op25quispe,r1Ls0Pt0Ev03wTxSyKzG;aIhGimmerm6A;aGou,u;ng,o;khar5ytsE;aKeun9BiHoGun;koya32shiBU;!lG;diGmaz;rim,z;maGng;da,g52mo83sGzaC;aChiBV;iao,u;aLeJiHoGright,u;jcA5lff,ng;lGmm0nkl0sniewsC;kiB1liams33s3;bGiss,lt0;b,er,st0;a6Vgn0lHtG;anabe,s3;k0sh,tG;e2Non;aLeKiHoGukD;gt,lk5roby5;dHllalGnogr3Kr1Css0val3S;ba,ob1W;al,ov4;lasHsel8W;lJn dIrgBEsHzG;qu7;ilyEqu7siljE;en b6Aijk,yk;enzueAIverde;aPeix1VhKi2j8ka43oJrIsui,uG;om5UrG;c2n0un1;an,emblA7ynisC;dorAMlst3Km4rrAth;atch0i8UoG;mHrG;are84laci79;ps3sG;en,on;hirDkah9Mnaka,te,varA;a06ch01eYhUiRmOoMtIuHvGzabo;en9Jobod3N;ar7bot4lliv2zuC;aIeHoG;i7Bj4AyanAB;ele,in2FpheBvens25;l8rm0;kol5lovy5re7Tsa,to,uG;ng,sa;iGy72;rn5tG;!h;l71mHnGrbu;at9cla9Egh;moBo7M;aIeGimizu;hu,vchG;en8Luk;la,r1G;gu9infe5YmGoh,pulveA7rra5P;jGyG;on5;evi6iltz,miHneid0roed0uGwarz;be3Elz;dHtG;!t,z;!t;ar4Th8ito,ka4OlJnGr4saCto,unde19v4;ch7dHtGz;a5Le,os;b53e16;as,ihDm4Po0Y;aVeSiPoJuHyG;a6oo,u;bio,iz,sG;so,u;bKc8Fdrigue67ge10j9YmJosevelt,sItHux,wG;e,li6;a9Ch;enb4Usi;a54e4L;erts15i93;bei4JcHes,vGzzo;as,e9;ci,hards12;ag2es,iHut0yG;es,nol5N;s,t0;dImHnGsmu97v6C;tan1;ir7os;ic,u;aUeOhMiJoHrGut8;asad,if6Zochazk27;lishc2GpGrti72u10we76;e3Aov51;cHe45nG;as,to;as70hl0;aGillips;k,m,n6I;a3Hde3Wete0Bna,rJtG;ersHrovGters54;!a,ic;!en,on;eGic,kiBss3;i9ra,tz,z;h86k,padopoulIrk0tHvG;ic,l4N;el,te39;os;bMconn2Ag2TlJnei6PrHsbor6XweBzG;dem7Rturk;ella4DtGwe6N;ega,iz;iGof7Hs8I;vGyn1R;ei9;aSri1;aPeNiJoGune50ym2;rHvGwak;ak4Qik5otn66;odahl,r4S;cholsZeHkolGls4Jx3;ic,ov84;ls1miG;!n1;ils3mG;co4Xec;gy,kaGray2sh,var38;jiGmu9shiG;ma;a07c04eZiWoMuHyeG;rs;lJnIrGssoli6S;atGp03r7C;i,ov4;oz,te58;d0l0;h2lOnNo0RrHsGza1A;er,s;aKeJiIoz5risHtG;e56on;!on;!n7K;au,i9no,t5J;!lA;r1Btgome59;i3El0;cracFhhail5kkeHlG;l0os64;ls1;hmeJiIj30lHn3Krci0ssiGyer2N;!er;n0Po;er,j0;dDti;cartHlG;aughl8e2;hy;dQe7Egnu68i0jer3TkPmNnMrItHyG;er,r;ei,ic,su21thews;iHkDquAroqu8tinG;ez,s;a5Xc,nG;!o;ci5Vn;a5UmG;ad5;ar5e6Kin1;rig77s1;aVeOiLoJuHyG;!nch;k4nGo;d,gu;mbarGpe3Fvr4we;di;!nGu,yana2B;coln,dG;b21holm,strom;bedEfeKhIitn0kaHn8rGw35;oy;!j;m11tG;in1on1;bvGvG;re;iGmmy,ng,rs2Qu,voie,ws3;ne,t1F;aZeYh2iWlUnez50oNrJuHvar2woG;k,n;cerGmar68znets5;a,o34;aHem0isGyeziu;h23t3O;m0sni4Fus3KvG;ch4O;bay57ch,rh0Usk16vaIwalGzl5;czGsC;yk;cIlG;!cGen4K;huk;!ev4ic,s;e8uiveG;rt;eff0kGl4mu9nnun1;ucF;ll0nnedy;hn,llKminsCne,pIrHstra3Qto,ur,yGzl5;a,s0;j0Rls22;l2oG;or;oe;aPenOha6im14oHuG;ng,r4;e32hInHrge32u6vG;anD;es,ss3;anHnsG;en,on,t3;nesGs1R;en,s1;kiBnings,s1;cJkob4EnGrv0E;kDsG;en,sG;en0Ion;ks3obs2A;brahimDglesi5Nke5Fl0Qno07oneIshikHto,vanoG;u,v54;awa;scu;aVeOiNjaltal8oIrist50uG;!aGb0ghAynh;m2ng;a6dz4fIjgaa3Hk,lHpUrGwe,x3X;ak1Gvat;mAt;er,fm3WmG;ann;ggiBtchcock;iJmingw4BnHrGss;nand7re9;deGriks1;rs3;kkiHnG;on1;la,n1;dz4g1lvoQmOns0ZqNrMsJuIwHyG;asFes;kiB;g1ng;anHhiG;mo14;i,ov0J;di6p0r10t;ue;alaG;in1;rs1;aVeorgUheorghe,iSjonRoLrJuGw3;errGnnar3Co,staf3Ctierr7zm2;a,eG;ro;ayli6ee2Lg4iffithGub0;!s;lIme0UnHodGrbachE;e,m2;calvAzale0S;dGubE;bGs0E;erg;aj,i;bs3l,mGordaO;en7;iev3U;gnMlJmaIndFo,rGsFuthi0;cGdn0za;ia;ge;eaHlG;agh0i,o;no;e,on;aVerQiLjeldsted,lKoIrHuG;chs,entAji41ll0;eem2iedm2;ntaGrt8urni0wl0;na;emi6orA;lipIsHtzgeraG;ld;ch0h0;ovG;!ic;hatDnanIrG;arGei9;a,i;deY;ov4;b0rre1D;dKinsJriksIsGvaB;cob3GpGtra3D;inoza,osiQ;en,s3;te8;er,is3warG;ds;aXePiNjurhuMoKrisco15uHvorakG;!oT;arte,boHmitru,nn,rGt3C;and,ic;is;g2he0Omingu7nErd1ItG;to;us;aGcki2Hmitr2Ossanayake,x3;s,z; JbnaIlHmirGrvisFvi,w2;!ov4;gado,ic;th;bo0groot,jo6lHsilGvriA;va;a cruz,e3uG;ca;hl,mcevsCnIt2WviG;dGes,s;ov,s3;ielsGku22;!en;ki;a0Be06hRiobQlarkPoIrGunningh1H;awfo0RivGuz;elli;h1lKntJoIrGs2Nx;byn,reG;a,ia;ke,p0;i,rer2K;em2liB;ns;!e;anu;aOeMiu,oIristGu6we;eGiaG;ns1;i,ng,p9uHwGy;!dH;dGng;huJ;!n,onGu6;!g;kJnIpm2ttHudhGv7;ry;erjee,o14;!d,g;ma,raboG;rty;bJl0Cng4rG;eghetHnG;a,y;ti;an,ota1C;cerAlder3mpbeLrIstGvadi0B;iGro;llo;doHl0Er,t0uGvalho;so;so,zo;ll;a0Fe01hYiXlUoNrKuIyG;rLtyG;qi;chan2rG;ke,ns;ank5iem,oGyant;oks,wG;ne;gdan5nIruya,su,uchaHyKziG;c,n5;rd;darGik;enG;ko;ov;aGond15;nco,zG;ev4;ancFshw16;a08oGuiy2;umGwmG;ik;ckRethov1gu,ktPnNrG;gJisInG;ascoGds1;ni;ha;er,mG;anG;!n;gtGit7nP;ss3;asF;hi;er,hG;am;b4ch,ez,hRiley,kk0ldw8nMrIshHtAu0;es;ir;bInHtlGua;ett;es,i0;ieYosa;dGik;a9yoG;padhyG;ay;ra;k,ng;ic;bb0Acos09d07g04kht05lZnPrLsl2tJyG;aHd8;in;la;chis3kiG;ns3;aImstro6sl2;an;ng;ujo,ya;dJgelHsaG;ri;ovG;!a;ersJov,reG;aGjEws;ss1;en;en,on,s3;on;eksejEiyEmeiIvG;ar7es;ez;da;ev;arwHuilG;ar;al;ams,l0;er;ta;as\",\n  \"Ordinal\": \"true¦eBf7nin5s3t0zeroE;enDhir1we0;lfCn7;d,t3;e0ixt8;cond,vent7;et0th;e6ie7;i2o0;r0urt3;tie4;ft1rst;ight0lev1;e0h,ie1;en0;th\",\n  \"Cardinal\": \"true¦bEeBf5mEnine7one,s4t0zero;en,h2rDw0;e0o;lve,n5;irt6ousands,ree;even2ix2;i3o0;r1ur0;!t2;ty;ft0ve;e2y;ight0lev1;!e0y;en;illions\",\n  \"Multiple\": \"true¦b3hundred,m3qu2se1t0;housand,r2;pt1xt1;adr0int0;illion\",\n  \"City\": \"true¦0:74;1:61;2:6G;3:6J;4:5S;a68b53c4Id48e44f3Wg3Hh39i31j2Wk2Fl23m1Mn1Co19p0Wq0Ur0Os05tRuQvLwDxiBy9z5;a7h5i4Muri4O;a5e5ongsh0;ng3H;greb,nzib5G;ang2e5okoha3Sunfu;katerin3Hrev0;a5n0Q;m5Hn;arsBeAi6roclBu5;h0xi,zh5P;c7n5;d5nipeg,terth4;hoek,s1L;hi5Zkl3A;l63xford;aw;a8e6i5ladivost5Molgogr6L;en3lni6S;ni22r5;o3saill4N;lenc4Wncouv3Sr3ughn;lan bat1Crumqi,trecht;aFbilisi,eEheDiBo9r7u5;l21n63r5;in,ku;i5ondh62;es51poli;kyo,m2Zron1Pulo5;n,uS;an5jua3l2Tmisoa6Bra3;j4Tshui; hag62ssaloni2H;gucigal26hr0l av1U;briz,i6llinn,mpe56ng5rtu,shk2R;i3Esh0;an,chu1n0p2Eyu0;aEeDh8kopje,owe1Gt7u5;ra5zh4X;ba0Ht;aten is55ockholm,rasbou67uttga2V;an8e6i5;jiazhua1llo1m5Xy0;f50n5;ya1zh4H;gh3Kt4Q;att45o1Vv44;cramen16int ClBn5o paulo,ppo3Rrajevo; 7aa,t5;a 5o domin3E;a3fe,m1M;antonio,die3Cfrancisco,j5ped3Nsalvad0J;o5u0;se;em,t lake ci5Fz25;lou58peters24;a9e8i6o5;me,t59;ga,o5yadh;! de janei3F;cife,ims,nn3Jykjavik;b4Sip4lei2Inc2Pwalpindi;ingdao,u5;ez2i0Q;aFeEhDiCo9r7u6yong5;ya1;eb59ya1;a5etor3M;g52to;rt5zn0; 5la4Co;au prin0Melizabe24sa03;ls3Prae5Atts26;iladelph3Gnom pe1Aoenix;ki1tah tik3E;dua,lerYnaji,r4Ot5;na,r32;ak44des0Km1Mr6s5ttawa;a3Vlo;an,d06;a7ew5ing2Fovosibir1Jyc; 5cast36;del24orlea44taip14;g8iro4Wn5pl2Wshv33v0;ch6ji1t5;es,o1;a1o1;a6o5p4;ya;no,sa0W;aEeCi9o6u5;mb2Ani26sc3Y;gadishu,nt6s5;c13ul;evideo,pelli1Rre2Z;ami,l6n14s5;kolc,sissauga;an,waukee;cca,d5lbour2Mmph41ndo1Cssi3;an,ell2Xi3;cau,drAkass2Sl9n8r5shh4A;aca6ib5rakesh,se2L;or;i1Sy;a4EchFdal0Zi47;mo;id;aDeAi8o6u5vSy2;anMckn0Odhia3;n5s angel26;d2g bea1N;brev2Be3Lma5nz,sb2verpo28;!ss27; ma39i5;c5pzig;est16; p6g5ho2Wn0Cusan24;os;az,la33;aHharFiClaipeBo9rak0Du7y5;iv,o5;to;ala lump4n5;mi1sh0;hi0Hlka2Xpavog4si5wlo2;ce;da;ev,n5rkuk;gst2sha5;sa;k5toum;iv;bHdu3llakuric0Qmpa3Fn6ohsiu1ra5un1Iwaguc0Q;c0Pj;d5o,p4;ah1Ty;a7e6i5ohannesV;l1Vn0;dd36rusalem;ip4k5;ar2H;bad0mph1OnArkutUs7taXz5;mir,tapala5;pa;fah0l6tanb5;ul;am2Zi2H;che2d5;ianap2Mo20;aAe7o5yder2W; chi mi5ms,nolulu;nh;f6lsin5rakli2;ki;ei;ifa,lifax,mCn5rb1Dva3;g8nov01oi;aFdanEenDhCiPlasgBo9raz,u5;a5jr23;dal6ng5yaquil;zh1J;aja2Oupe;ld coa1Bthen5;bu2S;ow;ent;e0Uoa;sk;lw7n5za;dhi5gt1E;nag0U;ay;aisal29es,o8r6ukuya5;ma;ankfu5esno;rt;rt5sh0; wor6ale5;za;th;d5indhov0Pl paso;in5mont2;bur5;gh;aBe8ha0Xisp4o7resd0Lu5;b5esseldorf,nkirk,rb0shanbe;ai,l0I;ha,nggu0rtmu13;hradSl6nv5troit;er;hi;donghIe6k09l5masc1Zr es sala1KugavpiY;i0lU;gu,je2;aJebu,hAleve0Vo5raio02uriti1Q;lo7n6penhag0Ar5;do1Ok;akKst0V;gUm5;bo;aBen8i6ongqi1ristchur5;ch;ang m7ca5ttago1;go;g6n5;ai;du,zho1;ng5ttogr14;ch8sha,zh07;gliari,i9lga8mayenJn6pe town,r5tanO;acCdiff;ber1Ac5;un;ry;ro;aWeNhKirmingh0WoJr9u5;chareTdapeTenos air7r5s0tu0;g5sa;as;es;a9is6usse5;ls;ba6t5;ol;ne;sil8tisla7zzav5;il5;le;va;ia;goZst2;op6ubaneshw5;ar;al;iCl9ng8r5;g6l5n;in;en;aluru,hazi;fa6grade,o horizon5;te;st;ji1rut;ghd0BkFn9ot8r7s6yan n4;ur;el,r07;celo3i,ranquil09;ou;du1g6ja lu5;ka;alo6k5;ok;re;ng;ers5u;field;a05b02cc01ddis aba00gartaZhmedXizawl,lSmPnHqa00rEsBt7uck5;la5;nd;he7l5;an5;ta;ns;h5unci2;dod,gab5;at;li5;ngt2;on;a8c5kaOtwerp;hora6o3;na;ge;h7p5;ol5;is;eim;aravati,m0s5;terd5;am; 7buquerq6eppo,giers,ma5;ty;ue;basrah al qadim5mawsil al jadid5;ah;ab5;ad;la;ba;ra;idj0u dha5;bi;an;lbo6rh5;us;rg\",\n  \"Region\": \"true¦0:2O;1:2L;2:2U;3:2F;a2Sb2Fc21d1Wes1Vf1Tg1Oh1Ki1Fj1Bk16l13m0Sn09o07pYqVrSsJtEuBverAw6y4zacatec2W;akut0o0Fu4;cat1k09;a5est 4isconsin,yomi1O;bengal,virgin0;rwick3shington4;! dc;acruz,mont;dmurt0t4;ah,tar4; 2Pa12;a6e5laxca1Vripu21u4;scaEva;langa2nnessee,x2J;bas10m4smQtar29;aulip2Hil nadu;a9elang07i7o5taf16u4ylh1J;ff02rr09s1E;me1Gno1Uuth 4;cZdY;ber0c4kkim,naloa;hu1ily;n5rawak,skatchew1xo4;ny; luis potosi,ta catari2;a4hodeA;j4ngp0C;asth1shahi;ingh29u4;e4intana roo;bec,en6retaro;aAe6rince edward4unjab; i4;sl0G;i,n5r4;ak,nambu0F;a0Rnsylv4;an0;ha0Pra4;!na;axa0Zdisha,h4klaho21ntar4reg7ss0Dx0I;io;aLeEo6u4;evo le4nav0X;on;r4tt18va scot0;f9mandy,th4; 4ampton3;c6d5yo4;rk3;ako1O;aroli2;olk;bras1Nva0Dw4; 6foundland4;! and labrad4;or;brunswick,hamp3jers5mexiTyork4;! state;ey;galPyarit;aAeghala0Mi6o4;nta2r4;dov0elos;ch6dlanDn5ss4zor11;issippi,ouri;as geraPneso18;ig1oac1;dhy12harasht0Gine,lac07ni5r4ssachusetts;anhao,i el,ylG;p4toba;ur;anca3e4incoln3ouisI;e4iR;ds;a6e5h4omi;aka06ul2;dah,lant1ntucky,ra01;bardino,lmyk0ns0Qr4;achay,el0nata0X;alis6har4iangxi;kh4;and;co;daho,llino7n4owa;d5gush4;et0;ia2;is;a6ert5i4un1;dalFm0D;ford3;mp3rya2waii;ansu,eorg0lou7oa,u4;an4izhou,jarat;ajuato,gdo4;ng;cester3;lori4uji1;da;sex;ageUe7o5uran4;go;rs4;et;lawaMrby3;aFeaEh9o4rim08umbr0;ahui7l6nnectic5rsi4ventry;ca;ut;i03orado;la;e5hattisgarh,i4uvash0;apRhuahua;chn5rke4;ss0;ya;ra;lGm4;bridge3peche;a9ihar,r8u4;ck4ryat0;ingham3;shi4;re;emen,itish columb0;h0ja cal8lk7s4v7;hkorto4que;st1;an;ar0;iforn0;ia;dygHguascalientes,lBndhr9r5ss4;am;izo2kans5un4;achal 7;as;na;a 4;pradesh;a6ber5t4;ai;ta;ba5s4;ka;ma;ea\",\n  \"Place\": \"true¦0:4T;1:4V;2:44;3:4B;4:3I;a4Eb3Gc2Td2Ge26f25g1Vh1Ji1Fk1Cl14m0Vn0No0Jp08r04sTtNuLvJw7y5;a5o0Syz;kut1Bngtze;aDeChitBi9o5upatki,ycom2P;ki26o5;d5l1B;b3Ps5;i4to3Y;c0SllowbroCn5;c2Qgh2;by,chur1P;ed0ntw3Gs22;ke6r3St5;erf1f1; is0Gf3V;auxha3Mirgin is0Jost5;ok;laanbaatar,pto5xb3E;n,wn;a9eotihuac43h7ive49o6ru2Nsarskoe selo,u5;l2Dzigo47;nto,rquay,tt2J;am3e 5orn3E;bronx,hamptons;hiti,j mah0Iu1N;aEcotts bluff,eCfo,herbroQoApring9t7u5yd2F;dbu1Wn5;der03set3B;aff1ock2Nr5;atf1oud;hi37w24;ho,uth5; 1Iam1Zwo3E;a5i2O;f2Tt0;int lawrence riv3Pkhal2D;ayleigh,ed7i5oc1Z;chmo1Eo gran4ver5;be1Dfr09si4; s39cliffe,hi2Y;aCe9h8i5ompeii,utn2;c6ne5tcai2T; 2Pc0G;keri13t0;l,x;k,lh2mbr6n5r2J;n1Hzance;oke;cif38pahanaumokuak30r5;k5then0;si4w1K;ak7r6x5;f1l2X;ange county,d,f1inoco;mTw1G;e8i1Uo5;r5tt2N;th5wi0E; 0Sam19;uschwanste1Pw5; eng6a5h2market,po36;rk;la0P;a8co,e6i5uc;dt1Yll0Z;adow5ko0H;lands;chu picchu,gad2Ridsto1Ql8n7ple6r5;kh2; g1Cw11;hatt2Osf2B;ibu,t0ve1Z;a8e7gw,hr,in5owlOynd02;coln memori5dl2C;al;asi4w3;kefr7mbe1On5s,x;ca2Ig5si05;f1l27t0;ont;azan kreml14e6itchen2Gosrae,rasnoyar5ul;sk;ns0Hs1U;ax,cn,lf1n6ps5st;wiN;d5glew0Lverness;ian27ochina;aDeBi6kg,nd,ov5unti2H;d,enweep;gh6llc5;reL;bu03l5;and5;!s;r5yw0C;ef1tf1;libu24mp6r5stings;f1lem,row;stead,t0;aDodavari,r5uelph;avenAe5imsS;at 8en5; 6f1Fwi5;ch;acr3vall1H;brita0Flak3;hur5;st;ng3y villa0W;airhavHco,ra;aAgli9nf17ppi8u7ver6x5;et1Lf1;glad3t0;rope,st0;ng;nt0;rls1Ls5;t 5;e5si4;nd;aCe9fw,ig8o7ryd6u5xb;mfri3nstab00rh2tt0;en;nca18rcKv19wnt0B;by;n6r5vonpo1D;ry;!h2;nu8r5;l6t5;f1moor;ingt0;be;aLdg,eIgk,hClBo5royd0;l6m5rnwa0B;pt0;c7lingw6osse5;um;ood;he0S;earwat0St;a8el6i5uuk;chen itza,mney ro07natSricahua;m0Zt5;enh2;mor5rlottetPth2;ro;dar 5ntervilA;breaks,faZg5;rove;ld9m8r5versh2;lis6rizo pla5;in;le;bLpbellf1;weQ;aZcn,eNingl01kk,lackLolt0r5uckV;aGiAo5;ckt0ok5wns cany0;lyn,s5;i4to5;ne;de;dge6gh5;am,t0;n6t5;own;or5;th;ceb6m5;lNpt0;rid5;ge;bu5pool,wa8;rn;aconsfEdf1lBr9verly7x5;hi5;ll; hi5;lls;wi5;ck; air,l5;ingh2;am;ie5;ld;ltimore,rnsl6tters5;ea;ey;bLct0driadic,frica,ginJlGmFn9rc8s7tl6yleOzor3;es;!ant8;hcroft,ia; de triomphe,t6;adyr,ca8dov9tarct5;ic5; oce5;an;st5;er;ericas,s;be6dersh5hambra,list0;ot;rt0;cou5;rt;bot7i5;ngd0;on;sf1;ord\",\n  \"Country\": \"true¦0:38;1:2L;2:3B;a2Xb2Ec22d1Ye1Sf1Mg1Ch1Ai14j12k0Zl0Um0Gn05om2pZqat1KrXsKtCu7v5wal4yemTz3;a25imbabwe;es,lis and futu2Y;a3enezue32ietnam;nuatu,tican city;gTk6nited 4ruXs3zbeE; 2Ca,sr;arab emirat0Kkingdom,states3;! of am2Y;!raiV;a8haCimor les0Co7rinidad 5u3;nis0rk3valu;ey,me2Zs and caic1V;and t3t3;oba1L;go,kel10nga;iw2ji3nz2T;ki2V;aDcotl1eCi9lov8o6pa2Dri lanka,u5w3yr0;az3edAitzerl1;il1;d2riname;lomon1Xmal0uth 3;afr2KkMsud2;ak0en0;erra leoFn3;gapo1Yt maart3;en;negLrb0ychellZ;int 3moa,n marino,udi arab0;hele26luc0mart21;epublic of ir0Eom2Euss0w3;an27;a4eIhilippinUitcairn1Mo3uerto riN;l1rtugF;ki2Dl4nama,pua new0Vra3;gu7;au,esti3;ne;aBe9i7or3;folk1Ith4w3;ay; k3ern mariana1D;or0O;caragua,ger3ue;!ia;p3ther1Aw zeal1;al;mib0u3;ru;a7exi6icro0Bo3yanm06;ldova,n3roc5zambA;a4gol0t3;enegro,serrat;co;cAdagasc01l7r5urit4yot3;te;an0i16;shall0Xtin3;ique;a4div3i,ta;es;wi,ys0;ao,ed02;a6e5i3uxembourg;b3echtenste12thu1G;er0ya;ban0Isotho;os,tv0;azakh1Fe4iriba04o3uwait,yrgyz1F;rXsovo;eling0Knya;a3erG;ma16p2;c7nd6r4s3taly,vory coast;le of m2rael;a3el1;n,q;ia,oJ;el1;aiTon3ungary;dur0Ng kong;aBermany,ha0QibraltAre8u3;a6ern5inea3ya0P;! biss3;au;sey;deloupe,m,tema0Q;e3na0N;ce,nl1;ar;bUmb0;a7i6r3;ance,ench 3;guia0Epoly3;nes0;ji,nl1;lklandUroeU;ast tim7cu6gypt,l salv6ngl1quatorial4ritr5st3thiop0;on0; guin3;ea;ad3;or;enmark,jibou5ominica4r con3;go;!n C;ti;aBentral african Ah8o5roat0u4yprRzech3; 9ia;ba,racao;c4lo3morQngo brazzaville,okGsta r04te de ivoiL;mb0;osE;i3ristmasG;le,na;republic;m3naUpe verde,ymanA;bod0ero3;on;aGeDhut2o9r5u3;lgar0r3;kina faso,ma,undi;azil,itish 3unei;virgin3; is3;lands;liv0nai5snia and herzegoviHtswaHuvet3; isl1;and;re;l3n8rmuG;ar3gium,ize;us;h4ngladesh,rbad3;os;am4ra3;in;as;fghaGlDmBn6r4ustr3zerbaij2;al0ia;genti3men0uba;na;dorra,g5t3;arct7igua and barbu3;da;o3uil3;la;er3;ica;b3ger0;an0;ia;ni3;st2;an\",\n  \"FirstName\": \"true¦aTblair,cQdOfrancoZgabMhinaLilya,jHkClBm6ni4quinn,re3s0;h0umit,yd;ay,e0iloh;a,lby;g9ne;co,ko0;!s;a1el0ina,org6;!okuhF;ds,naia,r1tt0xiB;i,y;ion,lo;ashawn,eif,uca;a3e1ir0rM;an;lsFn0rry;dall,yat5;i,sD;a0essIie,ude;i1m0;ie,mG;me;ta;rie0y;le;arcy,ev0;an,on;as1h0;arl8eyenne;ey,sidy;drien,kira,l4nd1ubr0vi;ey;i,r0;a,e0;a,y;ex2f1o0;is;ie;ei,is\",\n  \"WeekDay\": \"true¦fri2mon2s1t0wednesd3;hurs1ues1;aturd1und1;!d0;ay0;!s\",\n  \"Month\": \"true¦dec0february,july,nov0octo1sept0;em0;ber\",\n  \"Date\": \"true¦ago,on4som4t1week0yesterd5; end,ends;mr1o0;d2morrow;!w;ed0;ay\",\n  \"Duration\": \"true¦centurAd8h7m5q4se3w1y0;ear8r8;eek0k7;!end,s;ason,c5;tr,uarter;i0onth3;llisecond2nute2;our1r1;ay0ecade0;!s;ies,y\",\n  \"FemaleName\": \"true¦0:J7;1:JB;2:IJ;3:IK;4:J1;5:IO;6:JS;7:JO;8:HB;9:JK;A:H4;B:I2;C:IT;D:JH;E:IX;F:BA;G:I4;aGTbFLcDRdD0eBMfB4gADh9Ti9Gj8Dk7Cl5Wm48n3Lo3Hp33qu32r29s15t0Eu0Cv02wVxiTyOzH;aLeIineb,oHsof3;e3Sf3la,ra;h2iKlIna,ynH;ab,ep;da,ma;da,h2iHra;nab;aKeJi0FolB7uIvH;et8onDP;i0na;le0sen3;el,gm3Hn,rGLs8W;aoHme0nyi;m5XyAD;aMendDZhiDGiH;dele9lJnH;if48niHo0;e,f47;a,helmi0lHma;a,ow;ka0nB;aNeKiHusa5;ck84kIl8oleAviH;anFenJ4;ky,toriBK;da,lA8rHs0;a,nHoniH9;a,iFR;leHnesH9;nILrH;i1y;g9rHs6xHA;su5te;aYeUhRiNoLrIuHy2;i,la;acJ3iHu0J;c3na,sH;hFta;nHr0F;iFya;aJffaEOnHs6;a,gtiH;ng;!nFSra;aIeHomasi0;a,l9Oo8Ares1;l3ndolwethu;g9Fo88rIssH;!a,ie;eHi,ri7;sa,za;bOlMmKnIrHs6tia0wa0;a60yn;iHya;a,ka,s6;arFe2iHm77ra;!ka;a,iH;a,t6;at6it6;a0Ecarlett,e0AhWiSkye,neza0oQri,tNuIyH;bIGlvi1;ha,mayIJniAsIzH;an3Net8ie,y;anHi7;!a,e,nH;aCe;aIeH;fan4l5Dphan6E;cI5r5;b3fiAAm0LnHphi1;d2ia,ja,ya;er2lJmon1nIobh8QtH;a,i;dy;lETv3;aMeIirHo0risFDy5;a,lDM;ba,e0i5lJrH;iHr6Jyl;!d8Ifa;ia,lDZ;hd,iMki2nJrIu0w0yH;la,ma,na;i,le9on,ron,yn;aIda,ia,nHon;a,on;!ya;k6mH;!aa;lJrItaye82vH;da,inj;e0ife;en1i0ma;anA9bLd5Oh1SiBkKlJmInd2rHs6vannaC;aCi0;ant6i2;lDOma,ome;ee0in8Tu2;in1ri0;a05eZhXiUoHuthDM;bScRghQl8LnPsJwIxH;anB3ie,y;an,e0;aIeHie,lD;ann7ll1marDGtA;!lHnn1;iHyn;e,nH;a,dF;da,i,na;ayy8G;hel67io;bDRerAyn;a,cIkHmas,nFta,ya;ki,o;h8Xki;ea,iannGMoH;da,n1P;an0bJemFgi0iInHta,y0;a8Bee;han86na;a,eH;cHkaC;a,ca;bi0chIe,i0mo0nHquETy0;di,ia;aERelHiB;!e,le;een4ia0;aPeOhMiLoJrHute6A;iHudenCV;scil3LyamvaB;lHrt3;i0ly;a,paluk;ilome0oebe,ylH;is,lis;ggy,nelope,r5t2;ige,m0VnKo5rvaDMtIulH;a,et8in1;ricHt4T;a,e,ia;do2i07;ctav3dIfD3is6ksa0lHphD3umC5yunbileg;a,ga,iv3;eHvAF;l3t8;aWeUiMoIurHy5;!ay,ul;a,eJor,rIuH;f,r;aCeEma;ll1mi;aNcLhariBQkKlaJna,sHta,vi;anHha;ur;!y;a,iDZki;hoGk9YolH;a,e4P;!mh;hir,lHna,risDEsreE;!a,lBV;asuMdLh3i6Dl5nKomi7rgEVtH;aHhal4;lHs6;i1ya;cy,et8;e9iF0ya;nngu2X;a0Ackenz4e02iMoJrignayani,uriDJyH;a,rH;a,iOlNna,tG;bi0i2llBJnH;a,iH;ca,ka,qD9;a,cUdo4ZkaTlOmi,nMrItzi,yH;ar;aJiIlH;anET;am;!l,nB;dy,eHh,n4;nhGrva;aKdJe0iCUlH;iHy;cent,e;red;!gros;!e5;ae5hH;ae5el3Z;ag5DgNi,lKrH;edi7AiIjem,on,yH;em,l;em,sCG;an4iHliCF;nHsCJ;a,da;!an,han;b09cASd07e,g05ha,i04ja,l02n00rLsoum5YtKuIv84xBKyHz4;bell,ra,soBB;d7rH;a,eE;h8Gild1t4;a,cUgQiKjor4l7Un4s6tJwa,yH;!aHbe6Xja9lAE;m,nBL;a,ha,in1;!aJbCGeIja,lDna,sHt63;!a,ol,sa;!l1D;!h,mInH;!a,e,n1;!awit,i;arJeIie,oHr48ueri8;!t;!ry;et46i3B;el4Xi7Cy;dHon,ue5;akranAy;ak,en,iHlo3S;a,ka,nB;a,re,s4te;daHg4;!l3E;alDd4elHge,isDJon0;ei9in1yn;el,le;a0Ne0CiXoQuLyH;d3la,nH;!a,dIe2OnHsCT;!a,e2N;a,sCR;aD4cJel0Pis1lIna,pHz;e,iA;a,u,wa;iHy;a0Se,ja,l2NnB;is,l1UrItt1LuHvel4;el5is1;aKeIi7na,rH;aADi7;lHn1tA;ei;!in1;aTbb9HdSepa,lNnKsJvIzH;!a,be5Ret8z4;!ia;a,et8;!a,dH;a,sHy;ay,ey,i,y;a,iJja,lH;iHy;aA8e;!aH;!nF;ia,ya;!nH;!a,ne;aPda,e0iNjYla,nMoKsJtHx93y5;iHt4;c3t3;e2PlCO;la,nHra;a,ie,o2;a,or1;a,gh,laH;!ni;!h,nH;a,d2e,n5V;cOdon9DiNkes6mi9Gna,rMtJurIvHxmi,y5;ern1in3;a,e5Aie,yn;as6iIoH;nya,ya;fa,s6;a,isA9;a,la;ey,ie,y;a04eZhXiOlASoNrJyH;lHra;a,ee,ie;istHy6I;a,en,iIyH;!na;!e,n5F;nul,ri,urtnB8;aOerNlB7mJrHzzy;a,stH;en,in;!berlImernH;aq;eHi,y;e,y;a,stE;!na,ra;aHei2ongordzol;dij1w5;el7UiKjsi,lJnIrH;a,i,ri;d2na,za;ey,i,lBLs4y;ra,s6;biAcARdiat7MeBAiSlQmPnyakuma1DrNss6NtKviAyH;!e,lH;a,eH;e,i8T;!a6HeIhHi4TlDri0y;ar8Her8Hie,leErBAy;!lyn8Ori0;a,en,iHl5Xoli0yn;!ma,nFs95;a5il1;ei8Mi,lH;e,ie;a,tl6O;a0AeZiWoOuH;anMdLlHst88;es,iH;a8NeHs8X;!n9tH;!a,te;e5Mi3My;a,iA;!anNcelDdMelGhan7VleLni,sIva0yH;a,ce;eHie;fHlDph7Y;a,in1;en,n1;i7y;!a,e,n45;lHng;!i1DlH;!i1C;anNle0nKrJsH;i8JsH;!e,i8I;i,ri;!a,elGif2CnH;a,et8iHy;!e,f2A;a,eJiInH;a,eIiH;e,n1;!t8;cMda,mi,nIque4YsminFvie2y9zH;min7;a7eIiH;ce,e,n1s;!lHs82t0F;e,le;inIk6HlDquelH;in1yn;da,ta;da,lRmPnOo0rNsIvaHwo0zaro;!a0lu,na;aJiIlaHob89;!n9R;do2;belHdo2;!a,e,l3B;a7Ben1i0ma;di2es,gr72ji;a9elBogH;en1;a,e9iHo0se;a0na;aSeOiJoHus7Kyacin2C;da,ll4rten24snH;a,i9U;lImaH;ri;aIdHlaI;a,egard;ry;ath1BiJlInrietArmi9sH;sa,t1A;en2Uga,mi;di;bi2Fil8MlNnMrJsItHwa,yl8M;i5Tt4;n60ti;iHmo51ri53;etH;!te;aCnaC;a,ey,l4;a02eWiRlPoNrKunJwH;enHyne1R;!dolD;ay,el;acieIetHiselB;a,chE;!la;ld1CogooH;sh;adys,enHor3yn2K;a,da,na;aKgi,lIna,ov8EselHta;a,e,le;da,liH;an;!n0;mLnJorgIrH;ald5Si,m3Etrud7;et8i4X;a,eHna;s29vieve;ma;bIle,mHrnet,yG;al5Si5;iIrielH;a,l1;!ja;aTeQiPlorOoz3rH;anJeIiH;da,eB;da,ja;!cH;esIiHoi0P;n1s66;!ca;a,enc3;en,o0;lIn0rnH;anB;ec3ic3;jr,nArKtHy7;emIiHma,oumaA;ha,ma,n;eh;ah,iBrah,za0;cr4Rd0Re0Qi0Pk0Ol07mXn54rUsOtNuMvHwa;aKelIiH;!e,ta;inFyn;!a;!ngel4V;geni1ni47;h5Yien9ta;mLperanKtH;eIhHrel5;er;l31r7;za;a,eralB;iHma,ne4Lyn;cHka,n;a,ka;aPeNiKmH;aHe21ie,y;!li9nuH;elG;lHn1;e7iHy;a,e,ja;lHrald;da,y;!nue5;aWeUiNlMma,no2oKsJvH;a,iH;na,ra;a,ie;iHuiH;se;a,en,ie,y;a0c3da,e,f,nMsJzaH;!betHveA;e,h;aHe,ka;!beH;th;!a,or;anor,nH;!a,i;!in1na;ate1Rta;leEs6;vi;eIiHna,wi0;e,th;l,n;aYeMh3iLjeneKoH;lor5Vminiq4Ln3FrHtt4;a,eEis,la,othHthy;ea,y;ba;an09naCon9ya;anQbPde,eOiMlJmetr3nHsir5M;a,iH;ce,se;a,iIla,orHphi9;es,is;a,l6F;dHrdH;re;!d5Ena;!b2ForaCraC;a,d2nH;!a,e;hl3i0l0GmNnLphn1rIvi1WyH;le,na;a,by,cIia,lH;a,en1;ey,ie;a,et8iH;!ca,el1Aka,z;arHia;is;a0Re0Nh04i02lUoJristIynH;di,th3;al,i0;lPnMrIurH;tn1D;aJd2OiHn2Ori9;!nH;a,e,n1;!l4;cepci5Cn4sH;tanHuelo;ce,za;eHleE;en,t8;aJeoIotH;il54;!pat2;ir7rJudH;et8iH;a,ne;a,e,iH;ce,sZ;a2er2ndH;i,y;aReNloe,rH;isJyH;stH;al;sy,tH;a1Sen,iHy;an1e,n1;deJlseIrH;!i7yl;a,y;li9;nMrH;isKlImH;ai9;a,eHot8;n1t8;!sa;d2elGtH;al,elG;cIlH;es8i47;el3ilH;e,ia,y;itlYlXmilWndVrMsKtHy5;aIeIhHri0;er1IleErDy;ri0;a38sH;a37ie;a,iOlLmeJolIrH;ie,ol;!e,in1yn;lHn;!a,la;a,eIie,otHy;a,ta;ne,y;na,s1X;a0Ii0I;a,e,l1;isAl4;in,yn;a0Ke02iZlXoUrH;andi7eRiJoIyH;an0nn;nwDoke;an3HdgMgiLtH;n31tH;!aInH;ey,i,y;ny;d,t8;etH;!t7;an0e,nH;da,na;bbi7glarIlo07nH;iAn4;ka;ancHythe;a,he;an1Clja0nHsm3M;iAtH;ou;aWcVlinUniArPssOtJulaCvH;!erlH;ey,y;hJsy,tH;e,iHy7;e,na;!anH;ie,y;!ie;nItHyl;ha,ie;adIiH;ce;et8i9;ay,da;ca,ky;!triH;ce,z;rbJyaH;rmH;aa;a2o2ra;a2Ub2Od25g21i1Sj5l18m0Zn0Boi,r06sWtVuPvOwa,yIzH;ra,u0;aKes6gJlIn,seH;!l;in;un;!nH;a,na;a,i2K;drLguJrIsteH;ja;el3;stH;in1;a,ey,i,y;aahua,he0;hIi2Gja,miAs2DtrH;id;aMlIraqHt21;at;eIi7yH;!n;e,iHy;gh;!nH;ti;iJleIo6piA;ta;en,n1t8;aHelG;!n1J;a01dje5eZgViTjRnKohito,toHya;inet8nH;el5ia;te;!aKeIiHmJ;e,ka;!mHtt7;ar4;!belIliHmU;sa;!l1;a,eliH;ca;ka,sHta;a,sa;elHie;a,iH;a,ca,n1qH;ue;!tH;a,te;!bImHstasiMya;ar3;el;aLberKeliJiHy;e,l3naH;!ta;a,ja;!ly;hGiIl3nB;da;a,ra;le;aWba,ePiMlKthJyH;a,c3sH;a,on,sa;ea;iHys0N;e,s0M;a,cIn1sHza;a,e,ha,on,sa;e,ia,ja;c3is6jaKksaKna,sJxH;aHia;!nd2;ia,saH;nd2;ra;ia;i0nIyH;ah,na;a,is,naCoud;la;c6da,leEmNnLsH;haClH;inHyY;g,n;!h;a,o,slH;ey;ee;en;at6g4nIusH;ti0;es;ie;aWdiTelMrH;eJiH;anMenH;a,e,ne;an0;na;!aLeKiIyH;nn;a,n1;a,e;!ne;!iH;de;e,lDsH;on;yn;!lH;i9yn;ne;aKbIiHrL;!e,gaK;ey,i7y;!e;gaH;il;dKliyJradhIs6;ha;ya;ah;a,ya\",\n  \"Honorific\": \"true¦director1field marsh2lieutenant1rear0sergeant major,vice0; admir1; gener0;al\",\n  \"Adj|Gerund\": \"true¦0:3F;1:3H;2:31;3:2X;4:35;5:33;6:3C;7:2Z;8:36;9:29;a33b2Tc2Bd1Te1If19g12h0Zi0Rl0Nm0Gnu0Fo0Ap04rYsKtEuBvAw1Ayiel3;ar6e08;nBpA;l1Rs0B;fol3n1Zsett2;aEeDhrBi4ouc7rAwis0;e0Bif2oub2us0yi1;ea1SiA;l2vi1;l2mp0rr1J;nt1Vxi1;aMcreec7enten2NhLkyrocke0lo0Vmi2oJpHtDuBweA;e0Ul2;pp2ArA;gi1pri5roun3;aBea8iAri2Hun9;mula0r4;gge4rA;t2vi1;ark2eAraw2;e3llb2F;aAot7;ki1ri1;i9oc29;dYtisf6;aEeBive0oAus7;a4l2;assu4defi9fres7ig9juve07mai9s0vAwar3;ea2italiAol1G;si1zi1;gi1ll6mb2vi1;a6eDier23lun1VrAun2C;eBoA;mi5vo1Z;ce3s5vai2;n3rpleA;xi1;ffCpWutBverAwi1;arc7lap04p0Pri3whel8;goi1l6st1J;en3sA;et0;m2Jrtu4;aEeDiCoBuAyst0L;mb2;t1Jvi1;s5tiga0;an1Rl0n3smeri26;dAtu4;de9;aCeaBiAo0U;fesa0Tvi1;di1ni1;c1Fg19s0;llumiGmFnArri0R;cDfurHsCtBviA;go23ti1;e1Oimi21oxica0rig0V;pi4ul0;orpo20r0K;po5;na0;eaBorr02umilA;ia0;li1rtwar8;lFrA;atiDipCoBuelA;i1li1;undbrea10wi1;pi1;f6ng;a4ea8;a3etc7it0lEoCrBulfA;il2;ee1FighXust1L;rAun3;ebo3thco8;aCoA;a0wA;e4i1;mi1tte4;lectrJmHnExA;aCci0hBis0pA;an3lo3;aOila1B;c0spe1A;ab2coura0CdBergi13ga0Clive9ric7s02tA;hral2i0J;ea4u4;barras5er09pA;owe4;if6;aQeIiBrA;if0;sAzz6;aEgDhearCsen0tA;rAur11;ac0es5;te9;us0;ppoin0r8;biliGcDfi9gra3ligh0mBpres5sAvasG;erE;an3ea9orA;ali0L;a6eiBli9rA;ea5;vi1;ta0;maPri1s7un0zz2;aPhMlo5oAripp2ut0;mGnArrespon3;cer9fDspi4tA;inBrA;as0ibu0ol2;ui1;lic0u5;ni1;fDmCpA;eAromi5;l2ti1;an3;or0;aAil2;llenAnAr8;gi1;l8ptAri1;iva0;aff2eGin3lFoDrBuA;d3st2;eathtaAui5;ki1;gg2i2o8ri1unA;ci1;in3;co8wiA;lAtc7;de4;bsorVcOgonMlJmHnno6ppea2rFsA;pi4su4toA;nBun3;di1;is7;hi1;res0;li1;aFu5;si1;ar8lu4;ri1;mi1;iAzi1;zi1;cAhi1;eleDomA;moBpan6;yi1;da0;ra0;ti1;bi1;ng\",\n  \"Comparable\": \"true¦0:3C;1:3Q;2:3F;a3Tb3Cc33d2Te2Mf2Ag1Wh1Li1Fj1Ek1Bl13m0Xn0So0Rp0Iqu0Gr07sHtCug0vAw4y3za0Q;el10ouN;ary,e6hi5i3ry;ck0Cde,l3n1ry,se;d,y;ny,te;a3i3R;k,ry;a3erda2ulgar;gue,in,st;a6en2Xhi5i4ouZr3;anqu2Cen1ue;dy,g36me0ny;ck,rs28;ll,me,rt,wd3I;aRcaPeOhMiLkin0BlImGoEpDt6u4w3;eet,ift;b3dd0Wperfi21rre28;sta26t21;a8e7iff,r4u3;pUr1;a4ict,o3;ng;ig2Vn0N;a1ep,rn;le,rk,te0;e1Si2Vright0;ci1Yft,l3on,re;emn,id;a3el0;ll,rt;e4i3y;g2Mm0Z;ek,nd2T;ck24l0mp1L;a3iRrill,y;dy,l01rp;ve0Jxy;n1Jr3;ce,y;d,fe,int0l1Hv0V;a8e6i5o3ude;mantic,o19sy,u3;gh;pe,t1P;a3d,mo0A;dy,l;gg4iFndom,p3re,w;id;ed;ai2i3;ck,et;hoAi1Fl9o8r5u3;ny,r3;e,p11;egna2ic4o3;fouSud;ey,k0;liXor;ain,easa2;ny;dd,i0ld,ranL;aive,e5i4o3u14;b0Sisy,rm0Ysy;bb0ce,mb0R;a3r1w;r,t;ad,e5ild,o4u3;nda12te;ist,o1;a4ek,l3;low;s0ty;a8e7i6o3ucky;f0Jn4o15u3ve0w10y0N;d,sy;e0g;ke0l,mp,tt0Eve0;e1Qwd;me,r3te;ge;e4i3;nd;en;ol0ui19;cy,ll,n3;secu6t3;e3ima4;llege2rmedia3;te;re;aAe7i6o5u3;ge,m3ng1C;bYid;me0t;gh,l0;a3fXsita2;dy,rWv3;en0y;nd13ppy,r3;d3sh;!y;aFenEhCiBlAoofy,r3;a8e6i5o3ue0Z;o3ss;vy;m,s0;at,e3y;dy,n;nd,y;ad,ib,ooD;a2d1;a3o3;st0;tDuiS;u1y;aCeebBi9l8o6r5u3;ll,n3r0N;!ny;aCesh,iend0;a3nd,rmD;my;at,ir7;erce,nan3;ci9;le;r,ul3;ty;a6erie,sse4v3xtre0B;il;nti3;al;r4s3;tern,y;ly,th0;appZe9i5ru4u3;mb;nk;r5vi4z3;zy;ne;e,ty;a3ep,n9;d3f,r;!ly;agey,h8l7o5r4u3;dd0r0te;isp,uel;ar3ld,mmon,st0ward0zy;se;evKou1;e3il0;ap,e3;sy;aHiFlCoAr5u3;ff,r0sy;ly;a6i3oad;g4llia2;nt;ht;sh,ve;ld,un3;cy;a4o3ue;nd,o1;ck,nd;g,tt3;er;d,ld,w1;dy;bsu6ng5we3;so3;me;ry;rd\",\n  \"Adverb\": \"true¦a08b05d00eYfSheQinPjustOkinda,likewiZmMnJoEpCquite,r9s5t2u0very,well;ltima01p0; to,wards5;h1iny bit,o0wiO;o,t6;en,us;eldom,o0uch;!me1rt0; of;how,times,w0C;a1e0;alS;ndomRth05;ar excellenEer0oint blank; Lhaps;f3n0utright;ce0ly;! 0;ag05moX; courGten;ewJo0; longWt 0;onHwithstand9;aybe,eanwhiNore0;!ovT;! aboX;deed,steY;lla,n0;ce;or3u0;ck1l9rther0;!moK;ing; 0evK;exampCgood,suH;n mas0vI;se;e0irect2; 2fini0;te0;ly;juAtrop;ackward,y 0;far,no0; means,w; GbroFd nauseam,gEl7ny5part,s4t 2w0;ay,hi0;le;be7l0mo7wor7;arge,ea6; soon,i4;mo0way;re;l 3mo2ongsi1ready,so,togeth0ways;er;de;st;b1t0;hat;ut;ain;ad;lot,posteriori\",\n  \"Conjunction\": \"true¦aXbTcReNhowMiEjust00noBo9p8supposing,t5wh0yet;e1il0o3;e,st;n1re0thN; if,by,vM;evL;h0il,o;erefOo0;!uU;lus,rovided th9;r0therwiM;! not; mattEr,w0;! 0;since,th4w7;f4n0; 0asmuch;as mIcaForder t0;h0o;at;! 0;only,t0w0;hen;!ev3;ith2ven0;! 0;if,tB;er;o0uz;s,z;e0ut,y the time;cau1f0;ore;se;lt3nd,s 0;far1if,m0soon1t2;uch0; as;hou0;gh\",\n  \"Currency\": \"true¦$,aud,bQcOdJeurIfHgbp,hkd,iGjpy,kElDp8r7s3usd,x2y1z0¢,£,¥,ден,лв,руб,฿,₡,₨,€,₭,﷼;lotyQł;en,uanP;af,of;h0t5;e0il5;k0q0;elK;oubleJp,upeeJ;e2ound st0;er0;lingG;n0soF;ceEnies;empi7i7;n,r0wanzaCyatC;!onaBw;ls,nr;ori7ranc9;!os;en3i2kk,o0;b0ll2;ra5;me4n0rham4;ar3;e0ny;nt1;aht,itcoin0;!s\",\n  \"Determiner\": \"true¦aBboth,d9e6few,le5mu8neiDplenty,s4th2various,wh0;at0ich0;evC;a0e4is,ose;!t;everal,ome;!ast,s;a1l0very;!se;ch;e0u;!s;!n0;!o0y;th0;er\",\n  \"Adj|Present\": \"true¦a07b04cVdQeNfJhollIidRlEmCnarrIoBp9qua8r7s3t2uttFw0;aKet,ro0;ng,u08;endChin;e2hort,l1mooth,our,pa9tray,u0;re,speU;i2ow;cu6da02leSpaN;eplica01i02;ck;aHerfePr0;eseUime,omV;bscu1pen,wn;atu0e3odeH;re;a2e1ive,ow0;er;an;st,y;ow;a2i1oul,r0;ee,inge;rm;iIke,ncy,st;l1mpty,x0;emHpress;abo4ic7;amp,e2i1oub0ry,ull;le;ffu9re6;fu8libe0;raE;alm,l5o0;mpleCn3ol,rr1unterfe0;it;e0u7;ct;juga8sum7;ea1o0;se;n,r;ankru1lu0;nt;pt;li2pproxi0rticula1;ma0;te;ght\",\n  \"Person|Adj\": \"true¦b3du2earnest,frank,mi2r0san1woo1;an0ich,u1;dy;sty;ella,rown\",\n  \"Modal\": \"true¦c5lets,m4ought3sh1w0;ill,o5;a0o4;ll,nt;! to,a;ight,ust;an,o0;uld\",\n  \"Verb\": \"true¦born,cannot,gonna,has,keep tabs,msg\",\n  \"Person|Verb\": \"true¦b8ch7dr6foster,gra5ja9lan4ma2ni9ollie,p1rob,s0wade;kip,pike,t5ue;at,eg,ier2;ck,r0;k,shal;ce;ce,nt;ew;ase,u1;iff,l1ob,u0;ck;aze,ossom\",\n  \"Person|Date\": \"true¦a2j0sep;an0une;!uary;p0ugust,v0;ril\"\n}", "const commonPrefix = function (w1, w2) {\n  let len = Math.min(w1.length, w2.length)\n  while (len > 0) {\n    const prefix = w1.slice(0, len)\n    if (prefix === w2.slice(0, len)) {\n      return prefix\n    }\n    len -= 1\n  }\n  return ''\n}\n\n/* Sort elements and remove duplicates from array (modified in place) */\nconst unique = function (a) {\n  a.sort()\n  for (let i = 1; i < a.length; i++) {\n    if (a[i - 1] === a[i]) {\n      a.splice(i, 1)\n    }\n  }\n}\n\nexport default {\n  commonPrefix,\n  unique\n}\n", "const Histogram = function () {\n  this.counts = {}\n}\n\nconst methods = {\n  init: function (sym) {\n    if (this.counts[sym] === undefined) {\n      this.counts[sym] = 0\n    }\n  },\n  add: function (sym, n) {\n    if (n === undefined) {\n      n = 1\n    }\n    this.init(sym)\n    this.counts[sym] += n\n  },\n  countOf: function (sym) {\n    this.init(sym)\n    return this.counts[sym]\n  },\n  highest: function (top) {\n    let sorted = []\n    const keys = Object.keys(this.counts)\n    for (let i = 0; i < keys.length; i++) {\n      const sym = keys[i]\n      sorted.push([sym, this.counts[sym]])\n    }\n    sorted.sort(function (a, b) {\n      return b[1] - a[1]\n    })\n    if (top) {\n      sorted = sorted.slice(0, top)\n    }\n    return sorted\n  }\n}\n\nObject.keys(methods).forEach(function (k) {\n  Histogram.prototype[k] = methods[k]\n})\n\nexport default Histogram\n", "const BASE = 36\nconst seq = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\nconst cache = seq.split('').reduce(function (h, c, i) {\n  h[c] = i\n  return h\n}, {})\n\n// 0, 1, 2, ..., A, B, C, ..., 00, 01, ... AA, AB, AC, ..., AAA, AAB, ...\nconst toAlphaCode = function (n) {\n  if (seq[n] !== undefined) {\n    return seq[n]\n  }\n  let places = 1\n  let range = BASE\n  let s = ''\n  for (; n >= range; n -= range, places++, range *= BASE) {}\n  while (places--) {\n    const d = n % BASE\n    s = String.fromCharCode((d < 10 ? 48 : 55) + d) + s\n    n = (n - d) / BASE\n  }\n  return s\n}\n\nconst fromAlphaCode = function (s) {\n  if (cache[s] !== undefined) {\n    return cache[s]\n  }\n  let n = 0\n  let places = 1\n  let range = BASE\n  let pow = 1\n  for (; places < s.length; n += range, places++, range *= BASE) {}\n  for (let i = s.length - 1; i >= 0; i--, pow *= BASE) {\n    let d = s.charCodeAt(i) - 48\n    if (d > 10) {\n      d -= 7\n    }\n    n += d * pow\n  }\n  return n\n}\n\nexport default {\n  toAlphaCode,\n  fromAlphaCode\n}\n", "import Histogram from './histogram.js'\nimport encoding from '../encoding.js'\n\nconst config = {\n  NODE_SEP: ';',\n  KEY_VAL: ':',\n  STRING_SEP: ',',\n  TERMINAL_PREFIX: '!',\n  BASE: 36\n}\n// Return packed representation of Trie as a string.\n// Return packed representation of Trie as a string.\n//\n// Each node of the Trie is output on a single line.\n//\n// For example Trie(\"the them there thesis this\"):\n// {\n//    \"th\": {\n//      \"is\": 1,\n//      \"e\": {\n//        \"\": 1,\n//        \"m\": 1,\n//        \"re\": 1,\n//        \"sis\": 1\n//      }\n//    }\n//  }\n//\n// Would be reperesented as:\n//\n// th0\n// e0is\n// !m,re,sis\n//\n// The line begins with a '!' iff it is a terminal node of the Trie.\n// For each string property in a node, the string is listed, along\n// with a (relative!) line number of the node that string references.\n// Terminal strings (those without child node references) are\n// separated by ',' characters.\nconst nodeLine = function (self, node) {\n  let line = '',\n    sep = ''\n  if (self.isTerminal(node)) {\n    line += config.TERMINAL_PREFIX\n  }\n  const props = self.nodeProps(node)\n  for (let i = 0; i < props.length; i++) {\n    const prop = props[i]\n    if (typeof node[prop] === 'number') {\n      line += sep + prop\n      sep = config.STRING_SEP\n      continue\n    }\n    if (self.syms[node[prop]._n]) {\n      line += sep + prop + self.syms[node[prop]._n]\n      sep = ''\n      continue\n    }\n    let ref = encoding.toAlphaCode(node._n - node[prop]._n - 1 + self.symCount)\n    // Large reference to smaller string suffix -> duplicate suffix\n    if (node[prop]._g && ref.length >= node[prop]._g.length && node[node[prop]._g] === 1) {\n      ref = node[prop]._g\n      line += sep + prop + ref\n      sep = config.STRING_SEP\n      continue\n    }\n    line += sep + prop + ref\n    sep = ''\n  }\n  return line\n}\n\nconst analyzeRefs = function (self, node) {\n  if (self.visited(node)) {\n    return\n  }\n  const props = self.nodeProps(node, true)\n  for (let i = 0; i < props.length; i++) {\n    const prop = props[i]\n    const ref = node._n - node[prop]._n - 1\n    // Count the number of single-character relative refs\n    if (ref < config.BASE) {\n      self.histRel.add(ref)\n    }\n    // Count the number of characters saved by converting an absolute\n    // reference to a one-character symbol.\n    self.histAbs.add(node[prop]._n, encoding.toAlphaCode(ref).length - 1)\n    analyzeRefs(self, node[prop])\n  }\n}\n\nconst symbolCount = function (self) {\n  self.histAbs = self.histAbs.highest(config.BASE)\n  const savings = []\n  savings[-1] = 0\n  let best = 0,\n    sCount = 0\n  const defSize = 3 + encoding.toAlphaCode(self.nodeCount).length\n  for (let sym = 0; sym < config.BASE; sym++) {\n    if (self.histAbs[sym] === undefined) {\n      break\n    }\n    savings[sym] =\n      self.histAbs[sym][1] -\n      defSize -\n      self.histRel.countOf(config.BASE - sym - 1) +\n      savings[sym - 1]\n    if (savings[sym] >= best) {\n      best = savings[sym]\n      sCount = sym + 1\n    }\n  }\n  return sCount\n}\n\nconst numberNodes = function (self, node) {\n  // Topological sort into nodes array\n  if (node._n !== undefined) {\n    return\n  }\n  const props = self.nodeProps(node, true)\n  for (let i = 0; i < props.length; i++) {\n    numberNodes(self, node[props[i]]) //recursive\n  }\n  node._n = self.pos++\n  self.nodes.unshift(node)\n}\n\nconst pack = function (self) {\n  self.nodes = []\n  self.nodeCount = 0\n  self.syms = {}\n  self.symCount = 0\n  self.pos = 0\n  // Make sure we've combined all the common suffixes\n  self.optimize()\n  self.histAbs = new Histogram()\n  self.histRel = new Histogram()\n  numberNodes(self, self.root)\n  self.nodeCount = self.nodes.length\n  self.prepDFS()\n  analyzeRefs(self, self.root)\n  self.symCount = symbolCount(self)\n  for (let sym = 0; sym < self.symCount; sym++) {\n    self.syms[self.histAbs[sym][0]] = encoding.toAlphaCode(sym)\n  }\n  for (let i = 0; i < self.nodeCount; i++) {\n    self.nodes[i] = nodeLine(self, self.nodes[i])\n  }\n  // Prepend symbols\n  for (let sym = self.symCount - 1; sym >= 0; sym--) {\n    self.nodes.unshift(\n      encoding.toAlphaCode(sym) +\n        config.KEY_VAL +\n        encoding.toAlphaCode(self.nodeCount - self.histAbs[sym][0] - 1)\n    )\n  }\n  return self.nodes.join(config.NODE_SEP)\n}\n\nexport default pack\n", "import fns from './fns.js'\nimport pack from './pack.js'\nconst NOT_ALLOWED = new RegExp('[0-9A-Z,;!:|¦]') //characters banned from entering the trie\n// reserved propery names\nconst internal = {\n  _d: true,\n  _v: true,\n  _c: true,\n  _g: true,\n  _n: true,\n}\n\nconst methods = {\n  // Insert words from one big string, or from an array.\n  insertWords: function (words) {\n    if (words === undefined) {\n      return\n    }\n    if (typeof words === 'string') {\n      words = words.split(/[^a-zA-Z]+/)\n    }\n    for (let i = 0; i < words.length; i++) {\n      words[i] = words[i].toLowerCase()\n    }\n    fns.unique(words)\n    for (let i = 0; i < words.length; i++) {\n      if (words[i].match(NOT_ALLOWED) === null) {\n        this.insert(words[i])\n      }\n    }\n  },\n\n  insert: function (word) {\n    this._insert(word, this.root)\n    const lastWord = this.lastWord\n    this.lastWord = word\n\n    const prefix = fns.commonPrefix(word, lastWord)\n    if (prefix === lastWord) {\n      return\n    }\n\n    const freeze = this.uniqueNode(lastWord, word, this.root)\n    if (freeze) {\n      this.combineSuffixNode(freeze)\n    }\n  },\n\n  _insert: function (word, node) {\n    let prefix, next\n\n    // Duplicate word entry - ignore\n    if (word.length === 0) {\n      return\n    }\n\n    // Do any existing props share a common prefix?\n    const keys = Object.keys(node)\n    for (let i = 0; i < keys.length; i++) {\n      const prop = keys[i]\n      prefix = fns.commonPrefix(word, prop)\n      if (prefix.length === 0) {\n        continue\n      }\n      // Prop is a proper prefix - recurse to child node\n      if (prop === prefix && typeof node[prop] === 'object') {\n        this._insert(word.slice(prefix.length), node[prop])\n        return\n      }\n      // Duplicate terminal string - ignore\n      if (prop === word && typeof node[prop] === 'number') {\n        return\n      }\n      next = {}\n      next[prop.slice(prefix.length)] = node[prop]\n      this.addTerminal(next, word = word.slice(prefix.length))\n      delete node[prop]\n      node[prefix] = next\n      this.wordCount++\n      return\n    }\n\n    // No shared prefix.  Enter the word here as a terminal string.\n    this.addTerminal(node, word)\n    this.wordCount++\n  },\n\n  // Add a terminal string to node.\n  // If 2 characters or less, just add with value == 1.\n  // If more than 2 characters, point to shared node\n  // Note - don't prematurely share suffixes - these\n  // terminals may become split and joined with other\n  // nodes in this part of the tree.\n  addTerminal: function (node, prop) {\n    if (prop.length <= 1) {\n      node[prop] = 1\n      return\n    }\n    const next = {}\n    node[prop[0]] = next\n    this.addTerminal(next, prop.slice(1))\n  },\n\n  // Well ordered list of properties in a node (string or object properties)\n  // Use nodesOnly==true to return only properties of child nodes (not\n  // terminal strings.\n  nodeProps: function (node, nodesOnly) {\n    const props = []\n    for (const prop in node) {\n      // is it a usuable prop, or a special reserved one?\n      if (prop !== '' && !internal.hasOwnProperty(prop)) {\n        if (!nodesOnly || typeof node[prop] === 'object') {\n          props.push(prop)\n        }\n      }\n    }\n    props.sort()\n    return props\n  },\n\n  optimize: function () {\n    this.combineSuffixNode(this.root)\n    this.prepDFS()\n    this.countDegree(this.root)\n    this.prepDFS()\n    this.collapseChains(this.root)\n  },\n\n  // Convert Trie to a DAWG by sharing identical nodes\n  combineSuffixNode: function (node) {\n    // Frozen node - can't change.\n    if (node._c) {\n      return node\n    }\n    // Make sure all children are combined and generate unique node\n    // signature for this node.\n    let sig = []\n    if (this.isTerminal(node)) {\n      sig.push('!')\n    }\n    const props = this.nodeProps(node)\n    for (let i = 0; i < props.length; i++) {\n      const prop = props[i]\n      if (typeof node[prop] === 'object') {\n        node[prop] = this.combineSuffixNode(node[prop])\n        sig.push(prop)\n        sig.push(node[prop]._c)\n      } else {\n        sig.push(prop)\n      }\n    }\n    sig = sig.join('-')\n\n    const shared = this.suffixes[sig]\n    if (shared) {\n      return shared\n    }\n    this.suffixes[sig] = node\n    node._c = this.cNext++\n    return node\n  },\n\n  prepDFS: function () {\n    this.vCur++\n  },\n\n  visited: function (node) {\n    if (node._v === this.vCur) {\n      return true\n    }\n    node._v = this.vCur\n    return false\n  },\n\n  countDegree: function (node) {\n    if (node._d === undefined) {\n      node._d = 0\n    }\n    node._d++\n    if (this.visited(node)) {\n      return\n    }\n    const props = this.nodeProps(node, true)\n    for (let i = 0; i < props.length; i++) {\n      this.countDegree(node[props[i]])\n    }\n  },\n\n  // Remove intermediate singleton nodes by hoisting into their parent\n  collapseChains: function (node) {\n    let prop, child, i\n    if (this.visited(node)) {\n      return\n    }\n    const props = this.nodeProps(node)\n    for (i = 0; i < props.length; i++) {\n      prop = props[i]\n      child = node[prop]\n      if (typeof child !== 'object') {\n        continue\n      }\n      this.collapseChains(child)\n      // Hoist the singleton child's single property to the parent\n      if (child._g !== undefined && (child._d === 1 || child._g.length === 1)) {\n        delete node[prop]\n        prop += child._g\n        node[prop] = child[child._g]\n      }\n    }\n    // Identify singleton nodes\n    if (props.length === 1 && !this.isTerminal(node)) {\n      node._g = prop\n    }\n  },\n\n  isTerminal: function (node) {\n    return !!node['']\n  },\n\n  // Find highest node in Trie that is on the path to word\n  // and that is NOT on the path to other.\n  uniqueNode: function (word, other, node) {\n    const props = this.nodeProps(node, true)\n    for (let i = 0; i < props.length; i++) {\n      const prop = props[i]\n      if (prop === word.slice(0, prop.length)) {\n        if (prop !== other.slice(0, prop.length)) {\n          return node[prop]\n        }\n        return this.uniqueNode(word.slice(prop.length), other.slice(prop.length), node[prop])\n      }\n    }\n    return undefined\n  },\n\n  pack: function () {\n    return pack(this)\n  }\n}\nexport default methods\n", "import methods from './methods.js'\n/*\n A JavaScript implementation of a Trie search datastructure.\nEach node of the Trie is an Object that can contain the following properties:\n      '' - If present (with value == 1), the node is a Terminal Node - the prefix\n          leading to this node is a word in the dictionary.\n      numeric properties (value == 1) - the property name is a terminal string\n          so that the prefix + string is a word in the dictionary.\n      Object properties - the property name is one or more characters to be consumed\n          from the prefix of the test string, with the remainder to be checked in\n          the child node.\n      '_c': A unique name for the node (starting from 1), used in combining Suffixes.\n      '_n': Created when packing the Trie, the sequential node number\n          (in pre-order traversal).\n      '_d': The number of times a node is shared (it's in-degree from other nodes).\n      '_v': Visited in DFS.\n      '_g': For singleton nodes, the name of it's single property.\n */\nconst Trie = function (words) {\n  this.root = {}\n  this.lastWord = ''\n  this.suffixes = {}\n  this.suffixCounts = {}\n  this.cNext = 1\n  this.wordCount = 0\n  this.insertWords(words)\n  this.vCur = 0\n}\n\nObject.keys(methods).forEach(function (k) {\n  Trie.prototype[k] = methods[k]\n})\n\nexport default Trie\n", "import encoding from '../encoding.js'\n\nconst symbols = function (t) {\n  //... process these lines\n  const reSymbol = new RegExp('([0-9A-Z]+):([0-9A-Z]+)')\n  for (let i = 0; i < t.nodes.length; i++) {\n    const m = reSymbol.exec(t.nodes[i])\n    if (!m) {\n      t.symCount = i\n      break\n    }\n    t.syms[encoding.fromAlphaCode(m[1])] = encoding.fromAlphaCode(m[2])\n  }\n  //remove from main node list\n  t.nodes = t.nodes.slice(t.symCount, t.nodes.length)\n}\nexport default symbols\n", "import parseSymbols from './symbols.js'\nimport encoding from '../encoding.js'\n\n// References are either absolute (symbol) or relative (1 - based)\nconst indexFromRef = function (trie, ref, index) {\n  const dnode = encoding.fromAlphaCode(ref)\n  if (dnode < trie.symCount) {\n    return trie.syms[dnode]\n  }\n  return index + dnode + 1 - trie.symCount\n}\n\nconst toArray = function (trie) {\n  const all = []\n  const crawl = (index, pref) => {\n    let node = trie.nodes[index]\n    if (node[0] === '!') {\n      all.push(pref)\n      node = node.slice(1) //ok, we tried. remove it.\n    }\n    const matches = node.split(/([A-Z0-9,]+)/g)\n    for (let i = 0; i < matches.length; i += 2) {\n      const str = matches[i]\n      const ref = matches[i + 1]\n      if (!str) {\n        continue\n      }\n      const have = pref + str\n      //branch's end\n      if (ref === ',' || ref === undefined) {\n        all.push(have)\n        continue\n      }\n      const newIndex = indexFromRef(trie, ref, index)\n      crawl(newIndex, have)\n    }\n  }\n  crawl(0, '')\n  return all\n}\n\n//PackedTrie - Trie traversal of the Trie packed-string representation.\nconst unpack = function (str) {\n  const trie = {\n    nodes: str.split(';'),\n    syms: [],\n    symCount: 0\n  }\n  //process symbols, if they have them\n  if (str.match(':')) {\n    parseSymbols(trie)\n  }\n  return toArray(trie)\n}\n\nexport default unpack\n", "import traverse from './traverse.js'\n\nconst unpack = function (str) {\n  if (!str) {\n    return {}\n  }\n  //turn the weird string into a key-value object again\n  const obj = str.split('|').reduce((h, s) => {\n    const arr = s.split('¦')\n    h[arr[0]] = arr[1]\n    return h\n  }, {})\n  const all = {}\n  Object.keys(obj).forEach(function (cat) {\n    const arr = traverse(obj[cat])\n    //special case, for botched-boolean\n    if (cat === 'true') {\n      cat = true\n    }\n    for (let i = 0; i < arr.length; i++) {\n      const k = arr[i]\n      if (all.hasOwnProperty(k) === true) {\n        if (Array.isArray(all[k]) === false) {\n          all[k] = [all[k], cat]\n        } else {\n          all[k].push(cat)\n        }\n      } else {\n        all[k] = cat\n      }\n    }\n  })\n  return all\n}\n\nexport default unpack\n", "const prp = ['Possessive', 'Pronoun']\n//words that can't be compressed, for whatever reason\nlet misc = {\n  // numbers\n  '20th century fox': 'Organization',\n  '7 eleven': 'Organization',\n  'motel 6': 'Organization',\n  g8: 'Organization',\n  vh1: 'Organization',\n  '76ers': 'SportsTeam',\n  '49ers': 'SportsTeam',\n\n  q1: 'Date',\n  q2: 'Date',\n  q3: 'Date',\n  q4: 'Date',\n\n  km2: 'Unit',\n  m2: 'Unit',\n  dm2: 'Unit',\n  cm2: 'Unit',\n  mm2: 'Unit',\n  mile2: 'Unit',\n  in2: 'Unit',\n  yd2: 'Unit',\n  ft2: 'Unit',\n  m3: 'Unit',\n  dm3: 'Unit',\n  cm3: 'Unit',\n  in3: 'Unit',\n  ft3: 'Unit',\n  yd3: 'Unit',\n\n  // ampersands\n  'at&t': 'Organization',\n  'black & decker': 'Organization',\n  'h & m': 'Organization',\n  'johnson & johnson': 'Organization',\n  'procter & gamble': 'Organization',\n  \"ben & jerry's\": 'Organization',\n  '&': 'Conjunction',\n\n  //pronouns\n  i: ['Pronoun', 'Singular'],\n  he: ['Pronoun', 'Singular'],\n  she: ['Pronoun', 'Singular'],\n  it: ['Pronoun', 'Singular'],\n  they: ['Pronoun', 'Plural'],\n  we: ['Pronoun', 'Plural'],\n  was: ['Copula', 'PastTense'],\n  is: ['Copula', 'PresentTense'],\n  are: ['Copula', 'PresentTense'],\n  am: ['Copula', 'PresentTense'],\n  were: ['Copula', 'PastTense'],\n\n  // possessive pronouns\n  her: prp,\n  his: prp,\n  hers: prp,\n  their: prp,\n  theirs: prp,\n  themselves: prp,\n  your: prp,\n  our: prp,\n  ours: prp,\n  my: prp,\n  its: prp,\n\n  // misc\n  vs: ['Conjunction', 'Abbreviation'],\n  if: ['Condition', 'Preposition'],\n  closer: 'Comparative',\n  closest: 'Superlative',\n  much: 'Adverb',\n  may: 'Modal',\n\n  // irregular conjugations with two forms\n  babysat: 'PastTense',\n  blew: 'PastTense',\n  drank: 'PastTense',\n  drove: 'PastTense',\n  forgave: 'PastTense',\n  skiied: 'PastTense',\n  spilt: 'PastTense',\n  stung: 'PastTense',\n  swam: 'PastTense',\n  swung: 'PastTense',\n  guaranteed: 'PastTense',\n  shrunk: 'PastTense',\n\n  // support 'near', 'nears', 'nearing'\n  nears: 'PresentTense',\n  nearing: 'Gerund',\n  neared: 'PastTense',\n\n  no: ['Negative', 'Expression'],\n\n  // '-': 'Preposition', //june - july\n\n  // there: 'There'\n}\nexport default misc\n", "export default {\n  '20th century fox': 'Organization',\n  '7 eleven': 'Organization',\n  'motel 6': 'Organization',\n  'excuse me': 'Expression',\n  'financial times': 'Organization',\n  'guns n roses': 'Organization',\n  'la z boy': 'Organization',\n  'labour party': 'Organization',\n  'new kids on the block': 'Organization',\n  'new york times': 'Organization',\n  'the guess who': 'Organization',\n  'thin lizzy': 'Organization',\n\n  'prime minister': 'Actor',\n  'free market': 'Singular',\n  'lay up': 'Singular',\n  'living room': 'Singular',\n  'living rooms': 'Plural',\n  'spin off': 'Singular',\n  'appeal court': 'Uncountable',\n  'cold war': 'Uncountable',\n  'gene pool': 'Uncountable',\n  'machine learning': 'Uncountable',\n  'nail polish': 'Uncountable',\n  'time off': 'Uncountable',\n  'take part': 'Infinitive',\n\n  'bill gates': 'Person',\n  'doctor who': 'Person',\n  'dr who': 'Person',\n  'he man': 'Person',\n  'iron man': 'Person',\n  'kid cudi': 'Person',\n  'run dmc': 'Person',\n  'rush limbaugh': 'Person',\n  'snow white': 'Person',\n  'tiger woods': 'Person',\n\n  'brand new': 'Adjective',\n  'en route': 'Adjective',\n  'left wing': 'Adjective',\n  'off guard': 'Adjective',\n  'on board': 'Adjective',\n  'part time': 'Adjective',\n  'right wing': 'Adjective',\n  'so called': 'Adjective',\n  'spot on': 'Adjective',\n  'straight forward': 'Adjective',\n  'super duper': 'Adjective',\n  'tip top': 'Adjective',\n  'top notch': 'Adjective',\n  'up to date': 'Adjective',\n  'win win': 'Adjective',\n\n  'brooklyn nets': 'SportsTeam',\n  'chicago bears': 'SportsTeam',\n  'houston astros': 'SportsTeam',\n  'houston dynamo': 'SportsTeam',\n  'houston rockets': 'SportsTeam',\n  'houston texans': 'SportsTeam',\n  'minnesota twins': 'SportsTeam',\n  'orlando magic': 'SportsTeam',\n  'san antonio spurs': 'SportsTeam',\n  'san diego chargers': 'SportsTeam',\n  'san diego padres': 'SportsTeam',\n\n  'iron maiden': 'ProperNoun',\n  'isle of man': 'Country',\n  'united states': 'Country',\n  'united states of america': 'Country',\n  'prince edward island': 'Region',\n  'cedar breaks': 'Place',\n  'cedar falls': 'Place',\n\n  'point blank': 'Adverb',\n  'tiny bit': 'Adverb',\n  'by the time': 'Conjunction',\n  'no matter': 'Conjunction',\n\n  'civil wars': 'Plural',\n  'credit cards': 'Plural',\n  'default rates': 'Plural',\n  'free markets': 'Plural',\n  'head starts': 'Plural',\n  'home runs': 'Plural',\n  'lay ups': 'Plural',\n  'phone calls': 'Plural',\n  'press releases': 'Plural',\n  'record labels': 'Plural',\n  'soft serves': 'Plural',\n  'student loans': 'Plural',\n  'tax returns': 'Plural',\n  'tv shows': 'Plural',\n  'video games': 'Plural',\n\n  'took part': 'PastTense',\n  'takes part': 'PresentTense',\n  'taking part': 'Gerund',\n  'taken part': 'Participle',\n\n  'light bulb': 'Noun',\n  'rush hour': 'Noun',\n  'fluid ounce': 'Unit',\n  'the rolling stones': 'Organization',\n}\n", "//just some of the most common emoticons\n//faster than\n//http://stackoverflow.com/questions/28077049/regex-matching-emoticons\nexport default [\n  ':(',\n  ':)',\n  ':P',\n  ':p',\n  ':O',\n  ';(',\n  ';)',\n  ';P',\n  ';p',\n  ';O',\n  ':3',\n  ':|',\n  ':/',\n  ':\\\\',\n  ':$',\n  ':*',\n  ':@',\n  ':-(',\n  ':-)',\n  ':-P',\n  ':-p',\n  ':-O',\n  ':-3',\n  ':-|',\n  ':-/',\n  ':-\\\\',\n  ':-$',\n  ':-*',\n  ':-@',\n  ':^(',\n  ':^)',\n  ':^P',\n  ':^p',\n  ':^O',\n  ':^3',\n  ':^|',\n  ':^/',\n  ':^\\\\',\n  ':^$',\n  ':^*',\n  ':^@',\n  '):',\n  '(:',\n  '$:',\n  '*:',\n  ')-:',\n  '(-:',\n  '$-:',\n  '*-:',\n  ')^:',\n  '(^:',\n  '$^:',\n  '*^:',\n  '<3',\n  '</3',\n  '<\\\\3',\n  '=('\n]", "/** patterns for turning 'bus' to 'buses'*/\nconst suffixes = {\n  a: [\n    [/(antenn|formul|nebul|vertebr|vit)a$/i, '$1ae'],\n    [/ia$/i, 'ia'],\n  ],\n  e: [\n    [/(kn|l|w)ife$/i, '$1ives'],\n    [/(hive)$/i, '$1s'],\n    [/([m|l])ouse$/i, '$1ice'],\n    [/([m|l])ice$/i, '$1ice'],\n  ],\n  f: [\n    [/^(dwar|handkerchie|hoo|scar|whar)f$/i, '$1ves'],\n    [/^((?:ca|e|ha|(?:our|them|your)?se|she|wo)l|lea|loa|shea|thie)f$/i, '$1ves'],\n  ],\n  i: [[/(octop|vir)i$/i, '$1i']],\n  m: [[/([ti])um$/i, '$1a']],\n  n: [[/^(oxen)$/i, '$1']],\n  o: [[/(al|ad|at|er|et|ed)o$/i, '$1oes']],\n  s: [\n    [/(ax|test)is$/i, '$1es'],\n    [/(alias|status)$/i, '$1es'],\n    [/sis$/i, 'ses'],\n    [/(bu)s$/i, '$1ses'],\n    [/(sis)$/i, 'ses'],\n    [/^(?!talis|.*hu)(.*)man$/i, '$1men'],\n    [/(octop|vir|radi|nucle|fung|cact|stimul)us$/i, '$1i'],\n  ],\n  x: [\n    [/(matr|vert|ind|cort)(ix|ex)$/i, '$1ices'],\n    [/^(ox)$/i, '$1en'],\n  ],\n  y: [[/([^aeiouy]|qu)y$/i, '$1ies']],\n  z: [[/(quiz)$/i, '$1zes']],\n}\nexport default suffixes\n", "import rules from './_rules.js'\nconst addE = /([xsz]|ch|sh)$/\n\nconst trySuffix = function (str) {\n  let c = str[str.length - 1]\n  if (rules.hasOwnProperty(c) === true) {\n    for (let i = 0; i < rules[c].length; i += 1) {\n      let reg = rules[c][i][0]\n      if (reg.test(str) === true) {\n        return str.replace(reg, rules[c][i][1])\n      }\n    }\n  }\n  return null\n}\n/** Turn a singular noun into a plural\n * assume the given string is singular\n */\nconst pluralize = function (str = '', model) {\n  let { irregularPlurals, uncountable } = model.two\n  // is it a word without a plural form?\n  if (uncountable.hasOwnProperty(str)) {\n    return str\n  }\n  // check irregulars list\n  if (irregularPlurals.hasOwnProperty(str)) {\n    return irregularPlurals[str]\n  }\n  //we have some rules to try-out\n  let plural = trySuffix(str)\n  if (plural !== null) {\n    return plural\n  }\n  //like 'church'\n  if (addE.test(str)) {\n    return str + 'es'\n  }\n  // ¯\\_(ツ)_/¯\n  return str + 's'\n}\nexport default pluralize\n", "import lexData from './_data.js'\nimport { unpack } from 'efrt'\nimport misc from './misc.js'\nimport frozenLex from './frozenLex.js'\nimport emoticons from './emoticons.js'\nimport toPlural from '../../methods/transform/nouns/toPlural/index.js'\nimport irregularPlurals from '../irregulars/plurals.js'\n// unpack our lexicon of words\n// (found in ./lexicon/)\n\n// more clever things are done on the data later\n//  - once the plugin is applied\nconst hasSwitch = /\\|/\nlet lexicon = misc\nlet switches = {}\n\nconst tmpModel = { two: { irregularPlurals, uncountable: {} } }\n\nObject.keys(lexData).forEach(tag => {\n  let wordsObj = unpack(lexData[tag])\n  // POS tag, or something fancier?\n  if (!hasSwitch.test(tag)) {\n    // set them as simple word key-value lookup\n    Object.keys(wordsObj).forEach(w => {\n      lexicon[w] = tag\n    })\n    return\n  }\n  // add them as seperate key-val object\n  Object.keys(wordsObj).forEach(w => {\n    switches[w] = tag\n    // pluralize Noun|Verb switches\n    if (tag === 'Noun|Verb') {\n      let plural = toPlural(w, tmpModel)\n      switches[plural] = 'Plural|Verb'\n    }\n  })\n})\n// add ':)'\nemoticons.forEach(str => (lexicon[str] = 'Emoticon'))\n\n// misc cleanup\ndelete lexicon['']\ndelete lexicon[null]\ndelete lexicon[' ']\n\nexport { lexicon, switches, frozenLex }\n", "const n = 'Singular'\nexport default {\n  beforeTags: {\n    Determiner: n, //the date\n    Possessive: n, //his date\n    Acronym: n, //u.s. state\n    // ProperNoun:n,\n    Noun: n, //nasa funding\n    Adjective: n, //whole bottles\n    // Verb:true, //save storm victims\n    PresentTense: n, //loves hiking\n    Gerund: n, //uplifting victims\n    PastTense: n, //saved storm victims\n    Infinitive: n, //profess love\n    Date: n, //9pm show\n    Ordinal: n, //first date\n    Demonym: n, //dutch map\n  },\n  afterTags: {\n    Value: n, //date nine  -?\n    Modal: n, //date would\n    Copula: n, //fear is\n    PresentTense: n, //babysitting sucks\n    PastTense: n, //babysitting sucked\n    // Noun:n, //talking therapy, planning process\n    Demonym: n, //american touch\n    Actor: n, //dance therapist\n  },\n  // ownTags: { ProperNoun: n },\n  beforeWords: {\n    the: n, //the brands\n    with: n, //with cakes\n    without: n, //\n    // was:n, //was time  -- was working\n    // is:n, //\n    of: n, //of power\n    for: n, //for rats\n    any: n, //any rats\n    all: n, //all tips\n    on: n, //on time\n    // thing-ish verbs\n    cut: n, //cut spending\n    cuts: n, //cut spending\n    increase: n, // increase funding\n    decrease: n, //\n    raise: n, //\n    drop: n, //\n    // give: n,//give parents\n    save: n, //\n    saved: n, //\n    saves: n, //\n    make: n, //\n    makes: n, //\n    made: n, //\n    minus: n, //minus laughing\n    plus: n, //\n    than: n, //more than age\n    another: n, //\n    versus: n, //\n    neither: n, //\n    about: n, //about claims\n    // strong adjectives\n    favorite: n, //\n    best: n, //\n    daily: n, //\n    weekly: n, //\n    linear: n, //\n    binary: n, //\n    mobile: n, //\n    lexical: n, //\n    technical: n, //\n    computer: n, //\n    scientific: n, //\n    security: n, //\n    government: n, //\n    popular: n, //\n    formal: n,\n    no: n, //no worries\n    more: n, //more details\n    one: n, //one flood\n    let: n, //let fear\n    her: n, //her boots\n    his: n, //\n    their: n, //\n    our: n, //\n    us: n, //served us drinks\n    sheer: n,\n\n    monthly: n,\n    yearly: n,\n    current: n,\n    previous: n,\n    upcoming: n,\n    last: n,\n    next: n,\n    main: n,\n    initial: n,\n    final: n,\n    beginning: n,\n    end: n,\n    top: n,\n    bottom: n,\n    future: n,\n    past: n,\n    major: n,\n    minor: n,\n    side: n,\n    central: n,\n    peripheral: n,\n    public: n,\n    private: n,\n  },\n  afterWords: {\n    of: n, //date of birth (preposition)\n    system: n,\n    aid: n,\n    method: n,\n    utility: n,\n    tool: n,\n    reform: n,\n    therapy: n,\n    philosophy: n,\n    room: n,\n    authority: n,\n    says: n,\n    said: n,\n    wants: n,\n    wanted: n,\n    is: n,\n    did: n,\n    do: n,\n    can: n, //parents can\n    wise: n, //service-wise\n    // they: n,//snakes they\n  },\n}\n", "const v = 'Infinitive'\n\nexport default {\n  beforeTags: {\n    Modal: v, //would date\n    Adverb: v, //quickly date\n    Negative: v, //not date\n    Plural: v, //characters drink\n    // ProperNoun: vb,//google thought\n  },\n  afterTags: {\n    Determiner: v, //flash the\n    Adverb: v, //date quickly\n    Possessive: v, //date his\n    Reflexive: v, //resolve yourself\n    // Noun:true, //date spencer\n    Preposition: v, //date around, dump onto, grumble about\n    // Conjunction: v, // dip to, dip through\n    Cardinal: v, //cut 3 squares\n    Comparative: v, //feel greater\n    Superlative: v, //feel greatest\n  },\n  beforeWords: {\n    i: v, //i date\n    we: v, //we date\n    you: v, //you date\n    they: v, //they date\n    to: v, //to date\n    please: v, //please check\n    will: v, //will check\n    have: v,\n    had: v,\n    would: v,\n    could: v,\n    should: v,\n    do: v,\n    did: v,\n    does: v,\n    can: v,\n    must: v,\n    us: v,\n    me: v,\n    let: v,\n    even: v,\n    when: v,\n    help: v, //help combat\n    // them: v,\n    he: v,\n    she: v,\n    it: v,\n    being: v,\n    // prefixes\n    bi: v,\n    co: v,\n    contra: v,\n    de: v,\n    inter: v,\n    intra: v,\n    mis: v,\n    pre: v,\n    out: v,\n    counter: v,\n    nobody: v,\n    somebody: v,\n    anybody: v,\n    everybody: v,\n    // un: v,\n    // over: v,\n    // under: v,\n  },\n  afterWords: {\n    the: v, //echo the\n    me: v, //date me\n    you: v, //date you\n    him: v, //loves him\n    us: v, //cost us\n    her: v, //\n    his: v, //\n    them: v, //\n    they: v, //\n    it: v, //hope it\n    himself: v,\n    herself: v,\n    itself: v,\n    myself: v,\n    ourselves: v,\n    themselves: v,\n    something: v,\n    anything: v,\n\n    a: v, //covers a\n    an: v, //covers an\n    // from: v, //ranges from\n    up: v, //serves up\n    down: v, //serves up\n    by: v,\n    // in: v, //bob in\n    out: v,\n    // on: v,\n    off: v,\n    under: v,\n    what: v, //look what\n    // when: v,//starts when\n    // for:true, //settled for\n    all: v, //shiver all night\n    // conjunctions\n    to: v, //dip to\n    because: v, //\n    although: v, //\n    // after: v,\n    // before: v,//\n    how: v, //\n    otherwise: v, //\n    together: v, //fit together\n    though: v, //\n    into: v, //\n    yet: v, //\n    more: v, //kill more\n    here: v, // look here\n    there: v, //\n    away: v, //float away\n  },\n}\n", "import noun from './_noun.js'\nimport verb from './_verb.js'\n// 'the pilot' vs 'pilot the plane'\nconst clue = {\n  beforeTags: Object.assign({}, verb.beforeTags, noun.beforeTags, {\n  }),\n  afterTags: Object.assign({}, verb.afterTags, noun.afterTags, {}),\n  beforeWords: Object.assign({}, verb.beforeWords, noun.beforeWords, {}),\n  afterWords: Object.assign({}, verb.afterWords, noun.afterWords, {}),\n}\n\nexport default clue", "const jj = 'Adjective'\n\nexport default {\n  beforeTags: {\n    Determiner: jj, //the detailed\n    // Copula: jj, //is detailed\n    Possessive: jj, //spencer's detailed\n    Hyphenated: jj, //rapidly-changing\n  },\n\n  afterTags: {\n    // Noun: jj, //detailed plan, overwhelming evidence\n    Adjective: jj, //intoxicated little\n  },\n\n  beforeWords: {\n    seem: jj, //seem prepared\n    seemed: jj,\n    seems: jj,\n    feel: jj, //feel prepared\n    feels: jj,\n    felt: jj,\n    stay: jj,\n    appear: jj,\n    appears: jj,\n    appeared: jj,\n    also: jj,\n    over: jj, //over cooked\n    under: jj,\n    too: jj, //too insulting\n    it: jj, //find it insulting\n    but: jj, //nothing but frustrating\n    still: jj, //still scared\n    // adverbs that are adjective-ish\n    really: jj, //really damaged\n    quite: jj,\n    well: jj,\n    very: jj,\n    truly: jj,\n    how: jj, //how slow\n    deeply: jj,\n    hella: jj,\n    // always: jj,\n    // never: jj,\n    profoundly: jj,\n    extremely: jj,\n    so: jj,\n    badly: jj,\n    mostly: jj,\n    totally: jj,\n    awfully: jj,\n    rather: jj,\n    nothing: jj, //nothing secret,\n    something: jj, //something wrong\n    anything: jj,\n    not: jj, //not swell\n    me: jj, //called me swell\n    is: jj,\n\n    face: jj, //faces shocking revelations\n    faces: jj,\n    faced: jj,\n\n    look: jj,\n    looks: jj,\n    looked: jj,\n\n    reveal: jj,\n    reveals: jj,\n    revealed: jj,\n\n    sound: jj,\n    sounded: jj,\n    sounds: jj,\n    remains: jj,\n    remained: jj,\n    prove: jj, //would prove shocking\n    proves: jj,\n    proved: jj,\n\n    becomes: jj,\n    stays: jj,\n    tastes: jj,\n    taste: jj,\n    smells: jj,\n    smell: jj,\n    gets: jj, //gets shocking snowfall\n    grows: jj,\n    as: jj,\n    rings: jj,\n    radiates: jj,\n    conveys: jj,\n    convey: jj,\n    conveyed: jj,\n    of: jj,\n    // 'smacks of': jj,\n    // 'reeks of': jj,\n  },\n  afterWords: {\n    too: jj, //insulting too\n    also: jj, //insulting too\n    or: jj, //insulting or\n    enough: jj, //cool enough\n    as: jj, //as shocking as\n    //about: jj, //cool about\n  },\n}\n", "const g = 'Gerund'\n\n// Adj|Gerund\n// Noun|Gerund\n\nexport default {\n  beforeTags: {\n    // Verb: g, // loves shocking\n    Adverb: g, //quickly shocking\n    Preposition: g, //by insulting\n    Conjunction: g, //to insulting\n  },\n  afterTags: {\n    Adverb: g, //shocking quickly\n    Possessive: g, //shocking spencer's\n    Person: g, //telling spencer\n    Pronoun: g, //shocking him\n    Determiner: g, //shocking the\n    Copula: g, //shocking is\n    Preposition: g, //dashing by, swimming in\n    Conjunction: g, //insulting to\n    Comparative: g, //growing shorter\n  },\n  beforeWords: {\n    been: g,\n    keep: g,//keep going\n    continue: g,//\n    stop: g,//\n    am: g,//am watching\n    be: g,//be timing\n    me: g,//got me thinking\n    // action-words\n    began: g,\n    start: g,\n    starts: g,\n    started: g,\n    stops: g,\n    stopped: g,\n    help: g,\n    helps: g,\n    avoid: g,\n    avoids: g,\n    love: g,//love painting\n    loves: g,\n    loved: g,\n    hate: g,\n    hates: g,\n    hated: g,\n    // was:g,//was working\n    // is:g,\n    // be:g,\n  },\n  afterWords: {\n    you: g, //telling you\n    me: g, //\n    her: g, //\n    him: g, //\n    his: g, //\n    them: g, //\n    their: g, // fighting their\n    it: g, //dumping it\n    this: g, //running this\n    there: g, // swimming there\n    on: g, // landing on\n    about: g, // talking about\n    for: g, // paying for\n    up: g, //speeding up\n    down: g, //\n  },\n}\n", "import adj from './_adj.js'\nimport gerund from './_gerund.js'\nconst g = 'Gerund'\nconst jj = 'Adjective'\n\n// rallying the troops\n// her rallying cry\nconst clue = {\n  beforeTags: Object.assign({}, adj.beforeTags, gerund.beforeTags, {\n    // Copula: jj,\n    Imperative: g, //recommend living in\n    Infinitive: jj, //say charming things\n    // PresentTense: g,\n    Plural: g, //kids cutting\n  }),\n\n  afterTags: Object.assign({}, adj.afterTags, gerund.afterTags, {\n    Noun: jj, //shocking ignorance\n    // Plural: jj, //shocking lies\n  }),\n\n  beforeWords: Object.assign({}, adj.beforeWords, gerund.beforeWords, {\n    is: jj,\n    are: g, //is overflowing: JJ, are overflowing : VB ??\n    was: jj,\n    of: jj, //of varying\n    suggest: g,\n    suggests: g,\n    suggested: g,\n\n    recommend: g,\n    recommends: g,\n    recommended: g,\n\n    imagine: g,\n    imagines: g,\n    imagined: g,\n\n    consider: g,\n    considered: g,\n    considering: g,\n\n    resist: g,\n    resists: g,\n    resisted: g,\n\n    avoid: g,\n    avoided: g,\n    avoiding: g,\n\n    except: jj,\n    accept: jj,\n    assess: g,\n    explore: g,\n    fear: g,\n    fears: g,\n    appreciate: g,\n    question: g,\n    help: g,\n    embrace: g,\n    with: jj, //filled with daring\n  }),\n\n  afterWords: Object.assign({}, adj.afterWords, gerund.afterWords, {\n    to: g,\n    not: g, //trying not to car\n    the: g, //sweeping the country\n  }),\n}\n// console.log(clue)\nexport default clue\n", "import adj from './_adj.js'\nimport noun from './_noun.js'\n// the commercial market\n// watching the commercial\n\nconst misc = {\n  beforeTags: {\n    Determiner: undefined, //the premier university\n    Cardinal: 'Noun',//1950 convertable\n    PhrasalVerb: 'Adjective'//starts out fine\n  },\n  afterTags: {\n    // Pronoun: 'Noun'//as an adult i\n  }\n}\nconst clue = {\n  beforeTags: Object.assign({}, adj.beforeTags, noun.beforeTags, misc.beforeTags),\n  afterTags: Object.assign({}, adj.afterTags, noun.afterTags, misc.afterTags),\n  beforeWords: Object.assign({}, adj.beforeWords, noun.beforeWords, {\n    // are representative\n    are: 'Adjective', is: 'Adjective', was: 'Adjective', be: 'Adjective',\n    // phrasals\n    off: 'Adjective',//start off fine\n    out: 'Adjective',//comes out fine\n  }),\n  afterWords: Object.assign({}, adj.afterWords, noun.afterWords),\n}\nexport default clue", "import adj from './_adj.js'\n\n// the boiled egg\n// boiled the water\nlet past = 'PastTense'\nlet jj = 'Adjective'\n\nconst adjPast = {\n  beforeTags: {\n    Adverb: past, //quickly detailed\n    Pronoun: past, //he detailed\n    ProperNoun: past, //toronto closed\n    Auxiliary: past,\n    Noun: past, //eye closed  -- i guess.\n  },\n  afterTags: {\n    Possessive: past, //hooked him\n    Pronoun: past, //hooked me\n    Determiner: past, //hooked the\n    Adverb: past, //cooked perfectly\n    Comparative: past, //closed higher\n    Date: past, // alleged thursday\n    Gerund: past, //left dancing\n  },\n  beforeWords: {\n    be: past, //be hooked vs be embarrassed\n    who: past, //who lost\n    get: jj, //get charged\n    had: past,\n    has: past,\n    have: past,\n    been: past,\n    it: past, //it intoxicated him\n    as: past, //as requested\n    for: jj, //for discounted items\n    more: jj, //more broken promises\n    always: jj,\n  },\n  afterWords: {\n    by: past, //damaged by\n    back: past, //charged back\n    out: past, //charged out\n    in: past, //crowded in\n    up: past, //heated up\n    down: past, //hammered down\n    before: past, //\n    after: past, //\n    for: past, //settled for\n    the: past, //settled the\n    with: past, //obsessed with\n    as: past, //known as\n    on: past, //focused on\n    at: past, //recorded at\n    between: past, //settled between\n    to: past, //dedicated to\n    into: past, //pumped into\n    us: past, //charged us\n    them: past, //charged us\n    his: past, //shared his\n    her: past, //\n    their: past, //\n    our: past, //\n    me: past, //\n    about: jj,\n  },\n}\n\nexport default {\n  beforeTags: Object.assign({}, adj.beforeTags, adjPast.beforeTags),\n  afterTags: Object.assign({}, adj.afterTags, adjPast.afterTags),\n  beforeWords: Object.assign({}, adj.beforeWords, adjPast.beforeWords),\n  afterWords: Object.assign({}, adj.afterWords, adjPast.afterWords),\n}\n", "import adj from './_adj.js'\nimport verb from './_verb.js'\n\n// 'would mean' vs 'is mean'\nconst misc = {\n  afterTags: {\n    Noun: 'Adjective',//ruling party\n    Conjunction: undefined //clean and excellent\n  }\n}\nconst clue = {\n  beforeTags: Object.assign({}, adj.beforeTags, verb.beforeTags, {\n    // always clean\n    Adverb: undefined, Negative: undefined\n  }),\n  afterTags: Object.assign({}, adj.afterTags, verb.afterTags, misc.afterTags),\n  beforeWords: Object.assign({}, adj.beforeWords, verb.beforeWords, {\n    // have seperate contracts\n    have: undefined, had: undefined, not: undefined,\n    //went wrong, got wrong\n    went: 'Adjective', goes: 'Adjective', got: 'Adjective',\n    // be sure\n    be: 'Adjective'\n  }),\n  afterWords: Object.assign({}, adj.afterWords, verb.afterWords, {\n    to: undefined,//slick to the touch\n    as: 'Adjective',//pale as\n  }),\n}\n// console.log(clue.beforeWords)\n// console.log(clue)\nexport default clue", "import noun from './_noun.js'\nimport gerund from './_gerund.js'\n\n// 'operating the crane', or 'operating room'\nconst misc = {\n  beforeTags: {\n    Copula: 'Gerund',\n    PastTense: 'Gerund',\n    PresentTense: 'Gerund',\n    Infinitive: 'Gerund',\n  },\n  afterTags: {\n    Value: 'Gerund', //maintaining 500\n  },\n  beforeWords: {\n    are: 'Gerund',\n    were: 'Gerund',\n    be: 'Gerund',\n    no: 'Gerund',\n    without: 'Gerund',\n    //are you playing\n    you: 'Gerund',\n    we: 'Gerund',\n    they: 'Gerund',\n    he: 'Gerund',\n    she: 'Gerund',\n    //stop us playing\n    us: 'Gerund',\n    them: 'Gerund',\n  },\n  afterWords: {\n    // offering the\n    the: 'Gerund',\n    this: 'Gerund',\n    that: 'Gerund',\n    //got me thinking\n    me: 'Gerund',\n    us: 'Gerund',\n    them: 'Gerund',\n  },\n}\nconst clue = {\n  beforeTags: Object.assign({}, gerund.beforeTags, noun.beforeTags, misc.beforeTags),\n  afterTags: Object.assign({}, gerund.afterTags, noun.afterTags, misc.afterTags),\n  beforeWords: Object.assign({}, gerund.beforeWords, noun.beforeWords, misc.beforeWords),\n  afterWords: Object.assign({}, gerund.afterWords, noun.afterWords, misc.afterWords),\n}\nexport default clue\n", "import noun from './_noun.js'\nimport verb from './_verb.js'\nconst nn = 'Singular'\nconst vb = 'Infinitive'\n// 'boot the ball'   -  'the red boot'\n// 'boots the ball'  -   'the red boots'\nconst clue = {\n  beforeTags: Object.assign({}, verb.beforeTags, noun.beforeTags, {\n    // Noun: undefined\n    Adjective: nn,//great name\n    Particle: nn//brought under control\n  }),\n  afterTags: Object.assign({}, verb.afterTags, noun.afterTags, {\n    ProperNoun: vb, Gerund: vb, Adjective: vb,\n    Copula: nn,\n  }),\n  beforeWords: Object.assign({}, verb.beforeWords, noun.beforeWords, {\n    // is time\n    is: nn, was: nn,\n    //balance of power\n    of: nn,\n    have: null //have cash\n  }),\n  afterWords: Object.assign({}, verb.afterWords, noun.afterWords, {\n    // for: vb,//work for\n    instead: vb,\n    // that: nn,//subject that was\n    // for: vb,//work for\n    about: vb,//talk about\n    his: vb,//shot his\n    her: vb,//\n    to: null,\n    by: null,\n    in: null\n  }),\n}\n\nexport default clue", "const p = 'Person'\n\nexport default {\n  beforeTags: {\n    Honorific: p,\n    Person: p,\n    // Preposition: p, //with sue\n  },\n  afterTags: {\n    Person: p,\n    ProperNoun: p,\n    Verb: p, //bob could\n    // Modal:true, //bob could\n    // Copula:true, //bob is\n    // PresentTense:true, //bob seems\n  },\n  ownTags: {\n    ProperNoun: p, //capital letter\n  },\n  beforeWords: {\n    hi: p,\n    hey: p,\n    yo: p,\n    dear: p,\n    hello: p,\n  },\n  afterWords: {\n    // person-usually verbs\n    said: p,\n    says: p,\n    told: p,\n    tells: p,\n    feels: p,\n    felt: p,\n    seems: p,\n    thinks: p,\n    thought: p,\n    spends: p,\n    spendt: p,\n    plays: p,\n    played: p,\n    sing: p,\n    sang: p,\n    learn: p,\n    learned: p,\n    wants: p,\n    wanted: p\n    // and:true, //sue and jeff\n  },\n}\n", "import person from './_person.js'\n\n// 'april o'neil'  -  'april 1st'\n\nconst m = 'Month'\nconst p = 'Person'\nconst month = {\n  beforeTags: {\n    Date: m,\n    Value: m,\n  },\n  afterTags: {\n    Date: m,\n    Value: m,\n  },\n  beforeWords: {\n    by: m,\n    in: m,\n    on: m,\n    during: m,\n    after: m,\n    before: m,\n    between: m,\n    until: m,\n    til: m,\n    sometime: m,\n    of: m, //5th of april\n    this: m, //this april\n    next: m,\n    last: m,\n    previous: m,\n    following: m,\n    with: p,\n    // for: p,\n  },\n  afterWords: {\n    sometime: m,\n    in: m,\n    of: m,\n    until: m,\n    the: m, //june the 4th\n  },\n}\nexport default {\n  beforeTags: Object.assign({}, person.beforeTags, month.beforeTags),\n  afterTags: Object.assign({}, person.afterTags, month.afterTags),\n  beforeWords: Object.assign({}, person.beforeWords, month.beforeWords),\n  afterWords: Object.assign({}, person.afterWords, month.afterWords),\n}\n", "import person from './_person.js'\nimport noun from './_noun.js'\n\n// 'babling brook' vs 'brook sheilds'\n\nconst clue = {\n  beforeTags: Object.assign({}, noun.beforeTags, person.beforeTags),\n  afterTags: Object.assign({}, noun.afterTags, person.afterTags),\n  beforeWords: Object.assign({}, noun.beforeWords, person.beforeWords, { i: 'Infinitive', we: 'Infinitive' }),\n  afterWords: Object.assign({}, noun.afterWords, person.afterWords),\n}\nexport default clue", "import person from './_person.js'\nimport verb from './_verb.js'\nimport noun from './_noun.js'\n\n// 'rob the store'   -  'rob lowe'\n// can be a noun too - 'losing hope'\nconst clues = {\n  beforeTags: Object.assign({}, noun.beforeTags, person.beforeTags, verb.beforeTags),\n  afterTags: Object.assign({}, noun.afterTags, person.afterTags, verb.afterTags),\n  beforeWords: Object.assign({}, noun.beforeWords, person.beforeWords, verb.beforeWords),\n  afterWords: Object.assign({}, noun.afterWords, person.afterWords, verb.afterWords),\n}\nexport default clues", "import person from './_person.js'\nconst p = 'Place'\n\n// 'paris hilton' vs 'paris france'\nconst place = {\n  beforeTags: {\n    Place: p\n  },\n  afterTags: {\n    Place: p,\n    Abbreviation: p\n  },\n  beforeWords: {\n    in: p,\n    by: p,\n    near: p,\n    from: p,\n    to: p,\n  },\n  afterWords: {\n    in: p,\n    by: p,\n    near: p,\n    from: p,\n    to: p,\n    government: p,\n    council: p,\n    region: p,\n    city: p,\n  },\n}\n\nconst clue = {\n  beforeTags: Object.assign({}, place.beforeTags, person.beforeTags),\n  afterTags: Object.assign({}, place.afterTags, person.afterTags),\n  beforeWords: Object.assign({}, place.beforeWords, person.beforeWords),\n  afterWords: Object.assign({}, place.afterWords, person.afterWords),\n}\nexport default clue", "import person from './_person.js'\nimport adj from './_adj.js'\n\n// 'rusty nail'   -  'rusty smith'\nconst clues = {\n  beforeTags: Object.assign({}, person.beforeTags, adj.beforeTags),\n  afterTags: Object.assign({}, person.afterTags, adj.afterTags),\n  beforeWords: Object.assign({}, person.beforeWords, adj.beforeWords),\n  afterWords: Object.assign({}, person.afterWords, adj.afterWords),\n}\nexport default clues", "// '5 oz'   -  'dr oz'\nlet un = 'Unit'\nconst clues = {\n  beforeTags: { Value: un },\n  afterTags: {},\n  beforeWords: {\n    per: un,\n    every: un,\n    each: un,\n    square: un, //square km\n    cubic: un,\n    sq: un,\n    metric: un //metric ton\n  },\n  afterWords: {\n    per: un,\n    squared: un,\n    cubed: un,\n    long: un //foot long\n  },\n}\nexport default clues", "import actorVerb from './actor-verb.js'\nimport adjGerund from './adj-gerund.js'\nimport adjNoun from './adj-noun.js'\nimport adjPast from './adj-past.js'\nimport adjPresent from './adj-present.js'\nimport nounGerund from './noun-gerund.js'\nimport nounVerb from './noun-verb.js'\nimport personDate from './person-date.js'\nimport personNoun from './person-noun.js'\nimport personVerb from './person-verb.js'\nimport personPlace from './person-place.js'\nimport personAdj from './person-adj.js'\nimport unitNoun from './unit-noun.js'\n\nconst clues = {\n  'Actor|Verb': actorVerb,\n  'Adj|Gerund': adjGerund,\n  'Adj|Noun': adjNoun,\n  'Adj|Past': adjPast,\n  'Adj|Present': adjPresent,\n  'Noun|Verb': nounVerb,\n  'Noun|Gerund': nounGerund,\n  'Person|Noun': personNoun,\n  'Person|Date': personDate,\n  'Person|Verb': personVerb,\n  'Person|Place': personPlace,\n  'Person|Adj': personAdj,\n  'Unit|Noun': unitNoun,\n}\n\nconst copy = (obj, more) => {\n  let res = Object.keys(obj).reduce((h, k) => {\n    h[k] = obj[k] === 'Infinitive' ? 'PresentTense' : 'Plural'\n    return h\n  }, {})\n  return Object.assign(res, more)\n}\n\n// make a copy of this one\nclues['Plural|Verb'] = {\n  beforeWords: copy(clues['Noun|Verb'].beforeWords, {\n    had: 'Plural', //had tears\n    have: 'Plural',\n  }),\n  afterWords: copy(clues['Noun|Verb'].afterWords, {\n    his: 'PresentTense', her: 'PresentTense', its: 'PresentTense',\n    in: null, to: null,\n    is: 'PresentTense', //the way it works is\n    by: 'PresentTense', //it works by\n  }),\n  beforeTags: copy(clues['Noun|Verb'].beforeTags, {\n    Conjunction: 'PresentTense', //and changes\n    Noun: undefined, //the century demands\n    ProperNoun: 'PresentTense'//john plays\n  }),\n  afterTags: copy(clues['Noun|Verb'].afterTags, {\n    Gerund: 'Plural',//ice caps disappearing\n    Noun: 'PresentTense', //changes gears\n    Value: 'PresentTense' //changes seven gears\n  }),\n}\n// add some custom plural clues\nexport default clues", "//just a foolish lookup of known suffixes\nconst Adj = 'Adjective'\nconst Inf = 'Infinitive'\nconst Pres = 'PresentTense'\nconst Sing = 'Singular'\nconst Past = 'PastTense'\nconst Avb = 'Adverb'\nconst Plrl = 'Plural'\nconst Actor = 'Actor'\nconst Vb = 'Verb'\nconst Noun = 'Noun'\nconst Prop = 'ProperNoun'\nconst Last = 'LastName'\nconst Modal = 'Modal'\nconst Place = 'Place'\nconst Prt = 'Participle'\n\nexport default [\n  null,\n  null,\n  {\n    //2-letter\n    ea: Sing,\n    ia: Noun,\n    ic: Adj,\n    ly: Avb,\n    \"'n\": Vb,\n    \"'t\": Vb,\n  },\n  {\n    //3-letter\n    oed: Past,\n    ued: Past,\n    xed: Past,\n    ' so': Avb,\n    \"'ll\": Modal,\n    \"'re\": 'Copula',\n    azy: Adj,\n    eer: Noun,\n    end: Vb,\n    ped: Past,\n    ffy: Adj,\n    ify: Inf,\n    ing: 'Gerund',\n    ize: Inf,\n    ibe: Inf,\n    lar: Adj,\n    mum: Adj,\n    nes: Pres,\n    nny: Adj,\n    // oid: Adj,\n    ous: Adj,\n    que: Adj,\n    ger: Noun,\n    ber: Noun,\n    rol: Sing,\n    sis: Sing,\n    ogy: Sing,\n    oid: Sing,\n    ian: Sing,\n    zes: Pres,\n    eld: Past,\n    ken: Prt, //awoken\n    ven: Prt, //woven\n    ten: Prt, //brighten\n    ect: Inf,\n    ict: Inf,\n    // ide: Inf,\n    ign: Inf,\n    oze: Inf,\n    ful: Adj,\n    bal: Adj,\n    ton: Noun,\n    pur: Place,\n  },\n  {\n    //4-letter\n    amed: Past,\n    aped: Past,\n    ched: Past,\n    lked: Past,\n    rked: Past,\n    reed: Past,\n    nded: Past,\n    mned: Adj,\n    cted: Past,\n    dged: Past,\n    ield: Sing,\n    akis: Last,\n    cede: Inf,\n    chuk: Last,\n    czyk: Last,\n    ects: Pres,\n    iend: Sing,\n    ends: Vb,\n    enko: Last,\n    ette: Sing,\n    iary: Sing,\n    wner: Sing, //owner\n    fies: Pres,\n    fore: Avb,\n    gate: Inf,\n    gone: Adj,\n    ices: Plrl,\n    ints: Plrl,\n    ruct: Inf,\n    ines: Plrl,\n    ions: Plrl,\n    ners: Plrl,\n    pers: Plrl,\n    lers: Plrl,\n    less: Adj,\n    llen: Adj,\n    made: Adj,\n    nsen: Last,\n    oses: Pres,\n    ould: Modal,\n    some: Adj,\n    sson: Last,\n    ians: Plrl,\n    // tage: Inf,\n    tion: Sing,\n    tage: Noun,\n    ique: Sing,\n    tive: Adj,\n    tors: Noun,\n    vice: Sing,\n    lier: Sing,\n    fier: Sing,\n    wned: Past,\n    gent: Sing,\n    tist: Actor,\n    pist: Actor,\n    rist: Actor,\n    mist: Actor,\n    yist: Actor,\n    vist: Actor,\n    ists: Actor,\n    lite: Sing,\n    site: Sing,\n    rite: Sing,\n    mite: Sing,\n    bite: Sing,\n    mate: Sing,\n    date: Sing,\n    ndal: Sing,\n    vent: Sing,\n    uist: Actor,\n    gist: Actor,\n    note: Sing,\n    cide: Sing, //homicide\n    ence: Sing, //absence\n    wide: Adj, //nationwide\n    // side: Adj,//alongside\n    vide: Inf, //provide\n    ract: Inf,\n    duce: Inf,\n    pose: Inf,\n    eive: Inf,\n    lyze: Inf,\n    lyse: Inf,\n    iant: Adj,\n    nary: Adj,\n    ghty: Adj,\n    uent: Adj,\n    erer: Actor, //caterer\n    bury: Place,\n    dorf: Noun,\n    esty: Noun,\n    wych: Place,\n    dale: Place,\n    folk: Place,\n    vale: Place,\n    abad: Place,\n    sham: Place,\n    wick: Place,\n    view: Place,\n  },\n  {\n    //5-letter\n    elist: Actor,\n    holic: Sing,\n    phite: Sing,\n    tized: Past,\n    urned: Past,\n    eased: Past,\n    ances: Plrl,\n    bound: Adj,\n    ettes: Plrl,\n    fully: Avb,\n    ishes: Pres,\n    ities: Plrl,\n    marek: Last,\n    nssen: Last,\n    ology: Noun,\n    osome: Sing,\n    tment: Sing,\n    ports: Plrl,\n    rough: Adj,\n    tches: Pres,\n    tieth: 'Ordinal',\n    tures: Plrl,\n    wards: Avb,\n    where: Avb,\n    archy: Noun,\n    pathy: Noun,\n    opoly: Noun,\n    embly: Noun,\n    phate: Noun,\n    ndent: Sing,\n    scent: Sing,\n    onist: Actor,\n    anist: Actor,\n    alist: Actor,\n    olist: Actor,\n    icist: Actor,\n    ounce: Inf,\n    iable: Adj,\n    borne: Adj,\n    gnant: Adj,\n    inant: Adj,\n    igent: Adj,\n    atory: Adj,\n    // ctory: Adj,\n    rient: Sing,\n    dient: Sing,\n    maker: Actor,\n    burgh: Place,\n    mouth: Place,\n    ceter: Place,\n    ville: Place,\n    hurst: Place,\n    stead: Place,\n    endon: Place,\n    brook: Place,\n    shire: Place,\n    worth: Noun,\n    field: Prop,\n    ridge: Place,\n  },\n  {\n    //6-letter\n    auskas: Last,\n    parent: Sing,\n    cedent: Sing,\n    ionary: Sing,\n    cklist: Sing,\n    brooke: Place,\n    keeper: Actor,\n    logist: Actor,\n    teenth: 'Value',\n    worker: Actor,\n    master: Actor,\n    writer: Actor,\n    brough: Place,\n    cester: Place,\n    ington: Place,\n    cliffe: Place,\n    ingham: Place,\n  },\n  {\n    //7-letter\n    chester: Place,\n    logists: Actor,\n    opoulos: Last,\n    borough: Place,\n    sdottir: Last, //swedish female\n  },\n]\n", "//prefixes give very-little away, in general.\n// more-often for scientific terms, etc.\nconst Adj = 'Adjective'\nconst Noun = 'Noun'\nconst Verb = 'Verb'\n\nexport default [\n  null,\n  null,\n  {\n    // 2-letter\n  },\n  {\n    // 3-letter\n    neo: Noun,\n    bio: Noun,\n    // pre: Noun,\n    'de-': Verb,\n    're-': Verb,\n    'un-': Verb,\n    'ex-': Noun,\n  },\n  {\n    // 4-letter\n    anti: Noun,\n    auto: Noun,\n    faux: Adj,\n    hexa: Noun,\n    kilo: Noun,\n    mono: Noun,\n    nano: Noun,\n    octa: Noun,\n    poly: Noun,\n    semi: Adj,\n    tele: Noun,\n    'pro-': Adj,\n    'mis-': Verb,\n    'dis-': Verb,\n    'pre-': Adj, //hmm\n  },\n  {\n    // 5-letter\n    anglo: Noun,\n    centi: Noun,\n    ethno: Noun,\n    ferro: Noun,\n    grand: Noun,\n    hepta: Noun,\n    hydro: Noun,\n    intro: Noun,\n    macro: Noun,\n    micro: Noun,\n    milli: Noun,\n    nitro: Noun,\n    penta: Noun,\n    quasi: Adj,\n    radio: Noun,\n    tetra: Noun,\n    'omni-': Adj,\n    'post-': Adj,\n  },\n  {\n    // 6-letter\n    pseudo: Adj,\n    'extra-': Adj,\n    'hyper-': Adj,\n    'inter-': Adj,\n    'intra-': Adj,\n    'deca-': Adj,\n    // 'trans-': Noun,\n  },\n  {\n    // 7-letter\n    electro: Noun,\n  },\n]\n", "//regex suffix patterns and their most common parts of speech,\n//built using wordnet, by spencer kelly.\n//this mapping shrinks-down the uglified build\nconst Adj = 'Adjective'\nconst Inf = 'Infinitive'\nconst Pres = 'PresentTense'\nconst Sing = 'Singular'\nconst Past = 'PastTense'\nconst Adverb = 'Adverb'\nconst Exp = 'Expression'\nconst Actor = 'Actor'\nconst Verb = 'Verb'\nconst Noun = 'Noun'\nconst Last = 'LastName'\n\nexport default {\n  a: [\n    [/.[aeiou]na$/, Noun, 'tuna'],\n    [/.[oau][wvl]ska$/, Last],\n    [/.[^aeiou]ica$/, Sing, 'harmonica'],\n    [/^([hyj]a+)+$/, Exp, 'haha'], //hahah\n  ],\n  c: [[/.[^aeiou]ic$/, Adj]],\n  d: [\n    //==-ed==\n    //double-consonant\n    [/[aeiou](pp|ll|ss|ff|gg|tt|rr|bb|nn|mm)ed$/, Past, 'popped'],\n    //double-vowel\n    [/.[aeo]{2}[bdgmnprvz]ed$/, Past, 'rammed'],\n    //-hed\n    [/.[aeiou][sg]hed$/, Past, 'gushed'],\n    //-rd\n    [/.[aeiou]red$/, Past, 'hired'],\n    [/.[aeiou]r?ried$/, Past, 'hurried'],\n    // ard\n    [/[^aeiou]ard$/, Sing, 'steward'],\n    // id\n    [/[aeiou][^aeiou]id$/, Adj, ''],\n    [/.[vrl]id$/, Adj, 'livid'],\n\n    // ===== -ed ======\n    //-led\n    [/..led$/, Past, 'hurled'],\n    //-sed\n    [/.[iao]sed$/, Past, ''],\n    [/[aeiou]n?[cs]ed$/, Past, ''],\n    //-med\n    [/[aeiou][rl]?[mnf]ed$/, Past, ''],\n    //-ked\n    [/[aeiou][ns]?c?ked$/, Past, 'bunked'],\n    //-gned\n    [/[aeiou]gned$/, Past],\n    //-ged\n    [/[aeiou][nl]?ged$/, Past],\n    //-ted\n    [/.[tdbwxyz]ed$/, Past],\n    [/[^aeiou][aeiou][tvx]ed$/, Past],\n    //-ied\n    [/.[cdflmnprstv]ied$/, Past, 'emptied'],\n  ],\n  e: [\n    [/.[lnr]ize$/, Inf, 'antagonize'],\n    [/.[^aeiou]ise$/, Inf, 'antagonise'],\n    [/.[aeiou]te$/, Inf, 'bite'],\n    [/.[^aeiou][ai]ble$/, Adj, 'fixable'],\n    [/.[^aeiou]eable$/, Adj, 'maleable'],\n    [/.[ts]ive$/, Adj, 'festive'],\n    [/[a-z]-like$/, Adj, 'woman-like'],\n  ],\n  h: [\n    [/.[^aeiouf]ish$/, Adj, 'cornish'],\n    [/.v[iy]ch$/, Last, '..ovich'],\n    [/^ug?h+$/, Exp, 'ughh'],\n    [/^uh[ -]?oh$/, Exp, 'uhoh'],\n    [/[a-z]-ish$/, Adj, 'cartoon-ish'],\n  ],\n  i: [[/.[oau][wvl]ski$/, Last, 'polish-male']],\n  k: [\n    [/^(k){2}$/, Exp, 'kkkk'], //kkkk\n  ],\n  l: [\n    [/.[gl]ial$/, Adj, 'familial'],\n    [/.[^aeiou]ful$/, Adj, 'fitful'],\n    [/.[nrtumcd]al$/, Adj, 'natal'],\n    [/.[^aeiou][ei]al$/, Adj, 'familial'],\n  ],\n  m: [\n    [/.[^aeiou]ium$/, Sing, 'magnesium'],\n    [/[^aeiou]ism$/, Sing, 'schism'],\n    [/^[hu]m+$/, Exp, 'hmm'],\n    [/^\\d+ ?[ap]m$/, 'Date', '3am'],\n  ],\n  n: [\n    [/.[lsrnpb]ian$/, Adj, 'republican'],\n    [/[^aeiou]ician$/, Actor, 'musician'],\n    [/[aeiou][ktrp]in'$/, 'Gerund', \"cookin'\"], // 'cookin', 'hootin'\n  ],\n  o: [\n    [/^no+$/, Exp, 'noooo'],\n    [/^(yo)+$/, Exp, 'yoo'],\n    [/^wo{2,}[pt]?$/, Exp, 'woop'], //woo\n  ],\n  r: [\n    [/.[bdfklmst]ler$/, 'Noun'],\n    [/[aeiou][pns]er$/, Sing],\n    [/[^i]fer$/, Inf],\n    [/.[^aeiou][ao]pher$/, Actor],\n    [/.[lk]er$/, 'Noun'],\n    [/.ier$/, 'Comparative'],\n  ],\n  t: [\n    [/.[di]est$/, 'Superlative'],\n    [/.[icldtgrv]ent$/, Adj],\n    [/[aeiou].*ist$/, Adj],\n    [/^[a-z]et$/, Verb],\n  ],\n  s: [\n    [/.[^aeiou]ises$/, Pres],\n    [/.[rln]ates$/, Pres],\n    [/.[^z]ens$/, Verb],\n    [/.[lstrn]us$/, Sing],\n    [/.[aeiou]sks$/, Pres],\n    [/.[aeiou]kes$/, Pres],\n    [/[aeiou][^aeiou]is$/, Sing],\n    [/[a-z]'s$/, Noun],\n    [/^yes+$/, Exp], //yessss\n  ],\n  v: [\n    [/.[^aeiou][ai][kln]ov$/, Last], //east-europe\n  ],\n  y: [\n    [/.[cts]hy$/, Adj],\n    [/.[st]ty$/, Adj],\n    [/.[tnl]ary$/, Adj],\n    [/.[oe]ry$/, Sing],\n    [/[rdntkbhs]ly$/, Adverb],\n    [/.(gg|bb|zz)ly$/, Adj],\n    [/...lly$/, Adverb],\n    [/.[gk]y$/, Adj],\n    [/[bszmp]{2}y$/, Adj],\n    [/.[ai]my$/, Adj],\n    [/[ea]{2}zy$/, Adj],\n    [/.[^aeiou]ity$/, Sing],\n  ],\n}\n", "const vb = 'Verb'\nconst nn = 'Noun'\n\nexport default {\n  // looking at the previous word's tags:\n  leftTags: [\n    ['Adjective', nn],\n    ['Possessive', nn],\n    ['Determiner', nn],\n    ['Adverb', vb],\n    ['Pronoun', vb],\n    ['Value', nn],\n    ['Ordinal', nn],\n    ['Modal', vb],\n    ['Superlative', nn],\n    ['Demonym', nn],\n    ['Honorific', 'Person'], //dr. Smith\n  ],\n  // looking at the previous word:\n  leftWords: [\n    ['i', vb],\n    ['first', nn],\n    ['it', vb],\n    ['there', vb],\n    ['not', vb],\n    ['because', nn],\n    ['if', nn],\n    ['but', nn],\n    ['who', vb],\n    ['this', nn],\n    ['his', nn],\n    ['when', nn],\n    ['you', vb],\n    ['very', 'Adjective'],\n    ['old', nn],\n    ['never', vb],\n    ['before', nn],\n    ['a', nn],\n    ['the', nn],\n    ['been', vb],\n  ],\n\n  // looking at the next word's tags:\n  rightTags: [\n    ['Copula', nn],\n    ['PastTense', nn],\n    ['Conjunction', nn],\n    ['Modal', nn],\n  ],\n  // looking at the next word:\n  rightWords: [\n    ['there', vb],\n    ['me', vb],\n    ['man', 'Adjective'],\n    // ['only', vb],\n    ['him', vb],\n    ['it', vb],//relaunch it\n    ['were', nn],\n    ['took', nn],\n    ['himself', vb],\n    ['went', nn],\n    ['who', nn],\n    ['jr', 'Person'],\n  ],\n}\n", "// generated in ./lib/pairs\nexport default {\n  \"Comparative\": {\n    \"fwd\": \"3:ser,ier¦1er:h,t,f,l,n¦1r:e¦2er:ss,or,om\",\n    \"both\": \"3er:ver,ear,alm¦3ner:hin¦3ter:lat¦2mer:im¦2er:ng,rm,mb¦2ber:ib¦2ger:ig¦1er:w,p,k,d¦ier:y\",\n    \"rev\": \"1:tter,yer¦2:uer,ver,ffer,oner,eler,ller,iler,ster,cer,uler,sher,ener,gher,aner,adder,nter,eter,rter,hter,rner,fter¦3:oser,ooler,eafer,user,airer,bler,maler,tler,eater,uger,rger,ainer,urer,ealer,icher,pler,emner,icter,nser,iser¦4:arser,viner,ucher,rosser,somer,ndomer,moter,oother,uarer,hiter¦5:nuiner,esser,emier¦ar:urther\",\n    \"ex\": \"worse:bad¦better:good¦4er:fair,gray,poor¦1urther:far¦3ter:fat,hot,wet¦3der:mad,sad¦3er:shy,fun¦4der:glad¦:¦4r:cute,dire,fake,fine,free,lame,late,pale,rare,ripe,rude,safe,sore,tame,wide¦5r:eerie,stale\"\n  },\n  \"Gerund\": {\n    \"fwd\": \"1:nning,tting,rring,pping,eing,mming,gging,dding,bbing,kking¦2:eking,oling,eling,eming¦3:velling,siting,uiting,fiting,loting,geting,ialing,celling¦4:graming\",\n    \"both\": \"1:aing,iing,fing,xing,ying,oing,hing,wing¦2:tzing,rping,izzing,bting,mning,sping,wling,rling,wding,rbing,uping,lming,wning,mping,oning,lting,mbing,lking,fting,hting,sking,gning,pting,cking,ening,nking,iling,eping,ering,rting,rming,cting,lping,ssing,nting,nding,lding,sting,rning,rding,rking¦3:belling,siping,toming,yaking,uaking,oaning,auling,ooping,aiding,naping,euring,tolling,uzzing,ganing,haning,ualing,halling,iasing,auding,ieting,ceting,ouling,voring,ralling,garing,joring,oaming,oaking,roring,nelling,ooring,uelling,eaming,ooding,eaping,eeting,ooting,ooming,xiting,keting,ooking,ulling,airing,oaring,biting,outing,oiting,earing,naling,oading,eeding,ouring,eaking,aiming,illing,oining,eaning,onging,ealing,aining,eading¦4:thoming,melling,aboring,ivoting,weating,dfilling,onoring,eriting,imiting,tialling,rgining,otoring,linging,winging,lleting,louding,spelling,mpelling,heating,feating,opelling,choring,welling,ymaking,ctoring,calling,peating,iloring,laiting,utoring,uditing,mmaking,loating,iciting,waiting,mbating,voiding,otalling,nsoring,nselling,ocusing,itoring,eloping¦5:rselling,umpeting,atrolling,treating,tselling,rpreting,pringing,ummeting,ossoming,elmaking,eselling,rediting,totyping,onmaking,rfeiting,ntrolling¦5e:chmaking,dkeeping,severing,erouting,ecreting,ephoning,uthoring,ravening,reathing,pediting,erfering,eotyping,fringing,entoring,ombining,ompeting¦4e:emaking,eething,twining,rruling,chuting,xciting,rseding,scoping,edoring,pinging,lunging,agining,craping,pleting,eleting,nciting,nfining,ncoding,tponing,ecoding,writing,esaling,nvening,gnoring,evoting,mpeding,rvening,dhering,mpiling,storing,nviting,ploring¦3e:tining,nuring,saking,miring,haling,ceding,xuding,rining,nuting,laring,caring,miling,riding,hoking,piring,lading,curing,uading,noting,taping,futing,paring,hading,loding,siring,guring,vading,voking,during,niting,laning,caping,luting,muting,ruding,ciding,juring,laming,caling,hining,uoting,liding,ciling,duling,tuting,puting,cuting,coring,uiding,tiring,turing,siding,rading,enging,haping,buting,lining,taking,anging,haring,uiring,coming,mining,moting,suring,viding,luding¦2e:tring,zling,uging,oging,gling,iging,vring,fling,lging,obing,psing,pling,ubing,cling,dling,wsing,iking,rsing,dging,kling,ysing,tling,rging,eging,nsing,uning,osing,uming,using,ibing,bling,aging,ising,asing,ating¦2ie:rlying¦1e:zing,uing,cing,ving\",\n    \"rev\": \"ying:ie¦1ing:se,ke,te,we,ne,re,de,pe,me,le,c,he¦2ing:ll,ng,dd,ee,ye,oe,rg,us¦2ning:un¦2ging:og,ag,ug,ig,eg¦2ming:um¦2bing:ub,ab,eb,ob¦3ning:lan,can,hin,pin,win¦3ring:cur,lur,tir,tar,pur,car¦3ing:ait,del,eel,fin,eat,oat,eem,lel,ool,ein,uin¦3ping:rop,rap,top,uip,wap,hip,hop,lap,rip,cap¦3ming:tem,wim,rim,kim,lim¦3ting:mat,cut,pot,lit,lot,hat,set,pit,put¦3ding:hed,bed,bid¦3king:rek¦3ling:cil,pel¦3bing:rib¦4ning:egin¦4ing:isit,ruit,ilot,nsit,dget,rkel,ival,rcel¦4ring:efer,nfer¦4ting:rmit,mmit,ysit,dmit,emit,bmit,tfit,gret¦4ling:evel,xcel,ivel¦4ding:hred¦5ing:arget,posit,rofit¦5ring:nsfer¦5ting:nsmit,orget,cquit¦5ling:ancel,istil\",\n    \"ex\": \"3:adding,eating,aiming,aiding,airing,outing,gassing,setting,getting,putting,cutting,winning,sitting,betting,mapping,tapping,letting,bidding,hitting,tanning,netting,popping,fitting,capping,lapping,barring,banning,vetting,topping,rotting,tipping,potting,wetting,pitting,dipping,budding,hemming,pinning,jetting,kidding,padding,podding,sipping,wedding,bedding,donning,warring,penning,gutting,cueing,wadding,petting,ripping,napping,matting,tinning,binning,dimming,hopping,mopping,nodding,panning,rapping,ridding,sinning¦4:selling,falling,calling,waiting,editing,telling,rolling,heating,boating,hanging,beating,coating,singing,tolling,felling,polling,discing,seating,voiding,gelling,yelling,baiting,reining,ruining,seeking,spanning,stepping,knitting,emitting,slipping,quitting,dialing,omitting,clipping,shutting,skinning,abutting,flipping,trotting,cramming,fretting,suiting¦5:bringing,treating,spelling,stalling,trolling,expelling,rivaling,wringing,deterring,singeing,befitting,refitting¦6:enrolling,distilling,scrolling,strolling,caucusing,travelling¦7:installing,redefining,stencilling,recharging,overeating,benefiting,unraveling,programing¦9:reprogramming¦is:being¦2e:using,aging,owing¦3e:making,taking,coming,noting,hiring,filing,coding,citing,doping,baking,coping,hoping,lading,caring,naming,voting,riding,mining,curing,lining,ruling,typing,boring,dining,firing,hiding,piling,taping,waning,baling,boning,faring,honing,wiping,luring,timing,wading,piping,fading,biting,zoning,daring,waking,gaming,raking,ceding,tiring,coking,wining,joking,paring,gaping,poking,pining,coring,liming,toting,roping,wiring,aching¦4e:writing,storing,eroding,framing,smoking,tasting,wasting,phoning,shaking,abiding,braking,flaking,pasting,priming,shoring,sloping,withing,hinging¦5e:defining,refining,renaming,swathing,fringing,reciting¦1ie:dying,tying,lying,vying¦7e:sunbathing\"\n  },\n  \"Participle\": {\n    \"fwd\": \"1:mt¦2:llen¦3:iven,aken¦:ne¦y:in\",\n    \"both\": \"1:wn¦2:me,aten¦3:seen,bidden,isen¦4:roven,asten¦3l:pilt¦3d:uilt¦2e:itten¦1im:wum¦1eak:poken¦1ine:hone¦1ose:osen¦1in:gun¦1ake:woken¦ear:orn¦eal:olen¦eeze:ozen¦et:otten¦ink:unk¦ing:ung\",\n    \"rev\": \"2:un¦oken:eak¦ought:eek¦oven:eave¦1ne:o¦1own:ly¦1den:de¦1in:ay¦2t:am¦2n:ee¦3en:all¦4n:rive,sake,take¦5n:rgive\",\n    \"ex\": \"2:been¦3:seen,run¦4:given,taken¦5:shaken¦2eak:broken¦1ive:dove¦2y:flown¦3e:hidden,ridden¦1eek:sought¦1ake:woken¦1eave:woven\"\n  },\n  \"PastTense\": {\n    \"fwd\": \"1:tted,wed,gged,nned,een,rred,pped,yed,bbed,oed,dded,rd,wn,mmed¦2:eed,nded,et,hted,st,oled,ut,emed,eled,lded,ken,rt,nked,apt,ant,eped,eked¦3:eared,eat,eaded,nelled,ealt,eeded,ooted,eaked,eaned,eeted,mited,bid,uit,ead,uited,ealed,geted,velled,ialed,belled¦4:ebuted,hined,comed¦y:ied¦ome:ame¦ear:ore¦ind:ound¦ing:ung,ang¦ep:pt¦ink:ank,unk¦ig:ug¦all:ell¦ee:aw¦ive:ave¦eeze:oze¦old:eld¦ave:ft¦ake:ook¦ell:old¦ite:ote¦ide:ode¦ine:one¦in:un,on¦eal:ole¦im:am¦ie:ay¦and:ood¦1ise:rose¦1eak:roke¦1ing:rought¦1ive:rove¦1el:elt¦1id:bade¦1et:got¦1y:aid¦1it:sat¦3e:lid¦3d:pent\",\n    \"both\": \"1:aed,fed,xed,hed¦2:sged,xted,wled,rped,lked,kied,lmed,lped,uped,bted,rbed,rked,wned,rled,mped,fted,mned,mbed,zzed,omed,ened,cked,gned,lted,sked,ued,zed,nted,ered,rted,rmed,ced,sted,rned,ssed,rded,pted,ved,cted¦3:cled,eined,siped,ooned,uked,ymed,jored,ouded,ioted,oaned,lged,asped,iged,mured,oided,eiled,yped,taled,moned,yled,lit,kled,oaked,gled,naled,fled,uined,oared,valled,koned,soned,aided,obed,ibed,meted,nicked,rored,micked,keted,vred,ooped,oaded,rited,aired,auled,filled,ouled,ooded,ceted,tolled,oited,bited,aped,tled,vored,dled,eamed,nsed,rsed,sited,owded,pled,sored,rged,osed,pelled,oured,psed,oated,loned,aimed,illed,eured,tred,ioned,celled,bled,wsed,ooked,oiled,itzed,iked,iased,onged,ased,ailed,uned,umed,ained,auded,nulled,ysed,eged,ised,aged,oined,ated,used,dged,doned¦4:ntied,efited,uaked,caded,fired,roped,halled,roked,himed,culed,tared,lared,tuted,uared,routed,pited,naked,miled,houted,helled,hared,cored,caled,tired,peated,futed,ciled,called,tined,moted,filed,sided,poned,iloted,honed,lleted,huted,ruled,cured,named,preted,vaded,sured,talled,haled,peded,gined,nited,uided,ramed,feited,laked,gured,ctored,unged,pired,cuted,voked,eloped,ralled,rined,coded,icited,vided,uaded,voted,mined,sired,noted,lined,nselled,luted,jured,fided,puted,piled,pared,olored,cided,hoked,enged,tured,geoned,cotted,lamed,uiled,waited,udited,anged,luded,mired,uired,raded¦5:modelled,izzled,eleted,umpeted,ailored,rseded,treated,eduled,ecited,rammed,eceded,atrolled,nitored,basted,twined,itialled,ncited,gnored,ploded,xcited,nrolled,namelled,plored,efeated,redited,ntrolled,nfined,pleted,llided,lcined,eathed,ibuted,lloted,dhered,cceded¦3ad:sled¦2aw:drew¦2ot:hot¦2ke:made¦2ow:hrew,grew¦2ose:hose¦2d:ilt¦2in:egan¦1un:ran¦1ink:hought¦1ick:tuck¦1ike:ruck¦1eak:poke,nuck¦1it:pat¦1o:did¦1ow:new¦1ake:woke¦go:went\",\n    \"rev\": \"3:rst,hed,hut,cut,set¦4:tbid¦5:dcast,eread,pread,erbid¦ought:uy,eek¦1ied:ny,ly,dy,ry,fy,py,vy,by,ty,cy¦1ung:ling,ting,wing¦1pt:eep¦1ank:rink¦1ore:bear,wear¦1ave:give¦1oze:reeze¦1ound:rind,wind¦1ook:take,hake¦1aw:see¦1old:sell¦1ote:rite¦1ole:teal¦1unk:tink¦1am:wim¦1ay:lie¦1ood:tand¦1eld:hold¦2d:he,ge,re,le,leed,ne,reed,be,ye,lee,pe,we¦2ed:dd,oy,or,ey,gg,rr,us,ew,to¦2ame:ecome,rcome¦2ped:ap¦2ged:ag,og,ug,eg¦2bed:ub,ab,ib,ob¦2lt:neel¦2id:pay¦2ang:pring¦2ove:trive¦2med:um¦2ode:rride¦2at:ysit¦3ted:mit,hat,mat,lat,pot,rot,bat¦3ed:low,end,tow,und,ond,eem,lay,cho,dow,xit,eld,ald,uld,law,lel,eat,oll,ray,ank,fin,oam,out,how,iek,tay,haw,ait,vet,say,cay,bow¦3d:ste,ede,ode,ete,ree,ude,ame,oke,ote,ime,ute,ade¦3red:lur,cur,pur,car¦3ped:hop,rop,uip,rip,lip,tep,top¦3ded:bed,rod,kid¦3ade:orbid¦3led:uel¦3ned:lan,can,kin,pan,tun¦3med:rim,lim¦4ted:quit,llot¦4ed:pear,rrow,rand,lean,mand,anel,pand,reet,link,abel,evel,imit,ceed,ruit,mind,peal,veal,hool,head,pell,well,mell,uell,band,hear,weak¦4led:nnel,qual,ebel,ivel¦4red:nfer,efer,sfer¦4n:sake,trew¦4d:ntee¦4ded:hred¦4ned:rpin¦5ed:light,nceal,right,ndear,arget,hread,eight,rtial,eboot¦5d:edite,nvite¦5ted:egret¦5led:ravel\",\n    \"ex\": \"2:been,upped¦3:added,aged,aided,aimed,aired,bid,died,dyed,egged,erred,eyed,fit,gassed,hit,lied,owed,pent,pied,tied,used,vied,oiled,outed,banned,barred,bet,canned,cut,dipped,donned,ended,feed,inked,jarred,let,manned,mowed,netted,padded,panned,pitted,popped,potted,put,set,sewn,sowed,tanned,tipped,topped,vowed,weed,bowed,jammed,binned,dimmed,hopped,mopped,nodded,pinned,rigged,sinned,towed,vetted¦4:ached,baked,baled,boned,bored,called,caned,cared,ceded,cited,coded,cored,cubed,cured,dared,dined,edited,exited,faked,fared,filed,fined,fired,fuelled,gamed,gelled,hired,hoped,joked,lined,mined,named,noted,piled,poked,polled,pored,pulled,reaped,roamed,rolled,ruled,seated,shed,sided,timed,tolled,toned,voted,waited,walled,waned,winged,wiped,wired,zoned,yelled,tamed,lubed,roped,faded,mired,caked,honed,banged,culled,heated,raked,welled,banded,beat,cast,cooled,cost,dealt,feared,folded,footed,handed,headed,heard,hurt,knitted,landed,leaked,leapt,linked,meant,minded,molded,neared,needed,peaked,plodded,plotted,pooled,quit,read,rooted,sealed,seeded,seeped,shipped,shunned,skimmed,slammed,sparred,stemmed,stirred,suited,thinned,twinned,swayed,winked,dialed,abutted,blotted,fretted,healed,heeded,peeled,reeled¦5:basted,cheated,equalled,eroded,exiled,focused,opined,pleated,primed,quoted,scouted,shored,sloped,smoked,sniped,spelled,spouted,routed,staked,stored,swelled,tasted,treated,wasted,smelled,dwelled,honored,prided,quelled,eloped,scared,coveted,sweated,breaded,cleared,debuted,deterred,freaked,modeled,pleaded,rebutted,speeded¦6:anchored,defined,endured,impaled,invited,refined,revered,strolled,cringed,recast,thrust,unfolded¦7:authored,combined,competed,conceded,convened,excreted,extruded,redefined,restored,secreted,rescinded,welcomed¦8:expedited,infringed¦9:interfered,intervened,persevered¦10:contravened¦eat:ate¦is:was¦go:went¦are:were¦3d:bent,lent,rent,sent¦3e:bit,fled,hid,lost¦3ed:bled,bred¦2ow:blew,grew¦1uy:bought¦2tch:caught¦1o:did¦1ive:dove,gave¦2aw:drew¦2ed:fed¦2y:flew,laid,paid,said¦1ight:fought¦1et:got¦2ve:had¦1ang:hung¦2ad:led¦2ght:lit¦2ke:made¦2et:met¦1un:ran¦1ise:rose¦1it:sat¦1eek:sought¦1each:taught¦1ake:woke,took¦1eave:wove¦2ise:arose¦1ear:bore,tore,wore¦1ind:bound,found,wound¦2eak:broke¦2ing:brought,wrung¦1ome:came¦2ive:drove¦1ig:dug¦1all:fell¦2el:felt¦4et:forgot¦1old:held¦2ave:left¦1ing:rang,sang¦1ide:rode¦1ink:sank¦1ee:saw¦2ine:shone¦4e:slid¦1ell:sold,told¦4d:spent¦2in:spun¦1in:won\"\n  },\n  \"PresentTense\": {\n    \"fwd\": \"1:oes¦1ve:as\",\n    \"both\": \"1:xes¦2:zzes,ches,shes,sses¦3:iases¦2y:llies,plies¦1y:cies,bies,ties,vies,nies,pies,dies,ries,fies¦:s\",\n    \"rev\": \"1ies:ly¦2es:us,go,do¦3es:cho,eto\",\n    \"ex\": \"2:does,goes¦3:gasses¦5:focuses¦is:are¦3y:relies¦2y:flies¦2ve:has\"\n  },\n  \"Superlative\": {\n    \"fwd\": \"1st:e¦1est:l,m,f,s¦1iest:cey¦2est:or,ir¦3est:ver\",\n    \"both\": \"4:east¦5:hwest¦5lest:erful¦4est:weet,lgar,tter,oung¦4most:uter¦3est:ger,der,rey,iet,ong,ear¦3test:lat¦3most:ner¦2est:pt,ft,nt,ct,rt,ht¦2test:it¦2gest:ig¦1est:b,k,n,p,h,d,w¦iest:y\",\n    \"rev\": \"1:ttest,nnest,yest¦2:sest,stest,rmest,cest,vest,lmest,olest,ilest,ulest,ssest,imest,uest¦3:rgest,eatest,oorest,plest,allest,urest,iefest,uelest,blest,ugest,amest,yalest,ealest,illest,tlest,itest¦4:cerest,eriest,somest,rmalest,ndomest,motest,uarest,tiffest¦5:leverest,rangest¦ar:urthest¦3ey:riciest\",\n    \"ex\": \"best:good¦worst:bad¦5est:great¦4est:fast,full,fair,dull¦3test:hot,wet,fat¦4nest:thin¦1urthest:far¦3est:gay,shy,ill¦4test:neat¦4st:late,wide,fine,safe,cute,fake,pale,rare,rude,sore,ripe,dire¦6st:severe\"\n  },\n  \"AdjToNoun\": {\n    \"fwd\": \"1:tistic,eable,lful,sful,ting,tty¦2:onate,rtable,geous,ced,seful,ctful¦3:ortive,ented¦arity:ear¦y:etic¦fulness:begone¦1ity:re¦1y:tiful,gic¦2ity:ile,imous,ilous,ime¦2ion:ated¦2eness:iving¦2y:trious¦2ation:iring¦2tion:vant¦3ion:ect¦3ce:mant,mantic¦3tion:irable¦3y:est,estic¦3m:mistic,listic¦3ess:ning¦4n:utious¦4on:rative,native,vative,ective¦4ce:erant\",\n    \"both\": \"1:king,wing¦2:alous,ltuous,oyful,rdous¦3:gorous,ectable,werful,amatic¦4:oised,usical,agical,raceful,ocused,lined,ightful¦5ness:stful,lding,itous,nuous,ulous,otous,nable,gious,ayful,rvous,ntous,lsive,peful,entle,ciful,osive,leful,isive,ncise,reful,mious¦5ty:ivacious¦5ties:ubtle¦5ce:ilient,adiant,atient¦5cy:icient¦5sm:gmatic¦5on:sessive,dictive¦5ity:pular,sonal,eative,entic¦5sity:uminous¦5ism:conic¦5nce:mperate¦5ility:mitable¦5ment:xcited¦5n:bitious¦4cy:brant,etent,curate¦4ility:erable,acable,icable,ptable¦4ty:nacious,aive,oyal,dacious¦4n:icious¦4ce:vient,erent,stent,ndent,dient,quent,ident¦4ness:adic,ound,hing,pant,sant,oing,oist,tute¦4icity:imple¦4ment:fined,mused¦4ism:otic¦4ry:dantic¦4ity:tund,eral¦4edness:hand¦4on:uitive¦4lity:pitable¦4sm:eroic,namic¦4sity:nerous¦3th:arm¦3ility:pable,bable,dable,iable¦3cy:hant,nant,icate¦3ness:red,hin,nse,ict,iet,ite,oud,ind,ied,rce¦3ion:lute¦3ity:ual,gal,volous,ial¦3ce:sent,fensive,lant,gant,gent,lent,dant¦3on:asive¦3m:fist,sistic,iastic¦3y:terious,xurious,ronic,tastic¦3ur:amorous¦3e:tunate¦3ation:mined¦3sy:rteous¦3ty:ain¦3ry:ave¦3ment:azed¦2ness:de,on,ue,rn,ur,ft,rp,pe,om,ge,rd,od,ay,ss,er,ll,oy,ap,ht,ld,ad,rt¦2inousness:umous¦2ity:neous,ene,id,ane¦2cy:bate,late¦2ation:ized¦2ility:oble,ible¦2y:odic¦2e:oving,aring¦2s:ost¦2itude:pt¦2dom:ee¦2ance:uring¦2tion:reet¦2ion:oted¦2sion:ending¦2liness:an¦2or:rdent¦1th:ung¦1e:uable¦1ness:w,h,k,f¦1ility:mble¦1or:vent¦1ement:ging¦1tiquity:ncient¦1ment:hed¦verty:or¦ength:ong¦eat:ot¦pth:ep¦iness:y\",\n    \"rev\": \"\",\n    \"ex\": \"5:forceful,humorous¦8:charismatic¦13:understanding¦5ity:active¦11ness:adventurous,inquisitive,resourceful¦8on:aggressive,automatic,perceptive¦7ness:amorous,fatuous,furtive,ominous,serious¦5ness:ample,sweet¦12ness:apprehensive,cantankerous,contemptuous,ostentatious¦13ness:argumentative,conscientious¦9ness:assertive,facetious,imperious,inventive,oblivious,rapacious,receptive,seditious,whimsical¦10ness:attractive,expressive,impressive,loquacious,salubrious,thoughtful¦3edom:boring¦4ness:calm,fast,keen,tame¦8ness:cheerful,gracious,specious,spurious,timorous,unctuous¦5sity:curious¦9ion:deliberate¦8ion:desperate¦6e:expensive¦7ce:fragrant¦3y:furious¦9ility:ineluctable¦6ism:mystical¦8ity:physical,proactive,sensitive,vertical¦5cy:pliant¦7ity:positive¦9ity:practical¦12ism:professional¦6ce:prudent¦3ness:red¦6cy:vagrant¦3dom:wise\"\n  }\n}", "\n// 01- full-word exceptions\nconst checkEx = function (str, ex = {}) {\n  if (ex.hasOwnProperty(str)) {\n    return ex[str]\n  }\n  return null\n}\n\n// 02- suffixes that pass our word through\nconst checkSame = function (str, same = []) {\n  for (let i = 0; i < same.length; i += 1) {\n    if (str.endsWith(same[i])) {\n      return str\n    }\n  }\n  return null\n}\n\n// 03- check rules - longest first\nconst checkRules = function (str, fwd, both = {}) {\n  fwd = fwd || {}\n  let max = str.length - 1\n  // look for a matching suffix\n  for (let i = max; i >= 1; i -= 1) {\n    let size = str.length - i\n    let suff = str.substring(size, str.length)\n    // check fwd rules, first\n    if (fwd.hasOwnProperty(suff) === true) {\n      return str.slice(0, size) + fwd[suff]\n    }\n    // check shared rules\n    if (both.hasOwnProperty(suff) === true) {\n      return str.slice(0, size) + both[suff]\n    }\n  }\n  // try a fallback transform\n  if (fwd.hasOwnProperty('')) {\n    return str += fwd['']\n  }\n  if (both.hasOwnProperty('')) {\n    return str += both['']\n  }\n  return null\n}\n\n//sweep-through all suffixes\nconst convert = function (str = '', model = {}) {\n  // 01- check exceptions\n  let out = checkEx(str, model.ex)\n  // 02 - check same\n  out = out || checkSame(str, model.same)\n  // check forward and both rules\n  out = out || checkRules(str, model.fwd, model.both)\n  //return unchanged\n  out = out || str\n  return out\n}\nexport default convert", "const flipObj = function (obj) {\n  return Object.entries(obj).reduce((h, a) => {\n    h[a[1]] = a[0]\n    return h\n  }, {})\n}\n\nconst reverse = function (model = {}) {\n  return {\n    reversed: true,\n    // keep these two\n    both: flipObj(model.both),\n    ex: flipObj(model.ex),\n    // swap this one in\n    fwd: model.rev || {}\n  }\n}\nexport default reverse", "const prefix = /^([0-9]+)/\n\nconst toObject = function (txt) {\n  let obj = {}\n  txt.split('¦').forEach(str => {\n    let [key, vals] = str.split(':')\n    vals = (vals || '').split(',')\n    vals.forEach(val => {\n      obj[val] = key\n    })\n  })\n  return obj\n}\n\nconst growObject = function (key = '', val = '') {\n  val = String(val)\n  let m = val.match(prefix)\n  if (m === null) {\n    return val\n  }\n  let num = Number(m[1]) || 0\n  let pre = key.substring(0, num)\n  let full = pre + val.replace(prefix, '')\n  return full\n}\n\nconst unpackOne = function (str) {\n  let obj = toObject(str)\n  return Object.keys(obj).reduce((h, k) => {\n    h[k] = growObject(k, obj[k])\n    return h\n  }, {})\n}\n\nconst uncompress = function (model = {}) {\n  if (typeof model === 'string') {\n    model = JSON.parse(model)\n  }\n  model.fwd = unpackOne(model.fwd || '')\n  model.both = unpackOne(model.both || '')\n  model.rev = unpackOne(model.rev || '')\n  model.ex = unpackOne(model.ex || '')\n  return model\n}\nexport default uncompress\n", "import data from './_data.js'\nimport { reverse, uncompress } from 'suffix-thumb'\n// import { reverse, uncompress } from '/Users/spencer/mountain/suffix-thumb'\n// const uncompress = function () { }\n// const reverse = function () { }\nconst fromPast = uncompress(data.PastTense)\nconst fromPresent = uncompress(data.PresentTense)\nconst fromGerund = uncompress(data.Gerund)\nconst fromParticiple = uncompress(data.Participle)\n\nconst toPast = reverse(fromPast)\nconst toPresent = reverse(fromPresent)\nconst toGerund = reverse(fromGerund)\nconst toParticiple = reverse(fromParticiple)\n\nconst toComparative = uncompress(data.Comparative)\nconst toSuperlative = uncompress(data.Superlative)\nconst fromComparative = reverse(toComparative)\nconst fromSuperlative = reverse(toSuperlative)\n\nconst adjToNoun = uncompress(data.AdjToNoun)\n\nexport default {\n  fromPast,\n  fromPresent,\n  fromGerund,\n  fromParticiple,\n  toPast,\n  toPresent,\n  toGerund,\n  toParticiple,\n  // adjectives\n  toComparative,\n  toSuperlative,\n  fromComparative,\n  fromSuperlative,\n  adjToNoun\n}\n// console.log(convert('collide', toPast))", "export default [\n  //web tags\n  [/^[\\w.]+@[\\w.]+\\.[a-z]{2,3}$/, 'Email'],\n  [/^(https?:\\/\\/|www\\.)+\\w+\\.[a-z]{2,3}/, 'Url', 'http..'],\n  [/^[a-z0-9./].+\\.(com|net|gov|org|ly|edu|info|biz|dev|ru|jp|de|in|uk|br|io|ai)/, 'Url', '.com'],\n\n  // timezones\n  [/^[PMCE]ST$/, 'Timezone', 'EST'],\n\n  //names\n  [/^ma?c'[a-z]{3}/, 'LastName', \"mc'neil\"],\n  [/^o'[a-z]{3}/, 'LastName', \"o'connor\"],\n  [/^ma?cd[aeiou][a-z]{3}/, 'LastName', 'mcdonald'],\n\n  //slang things\n  [/^(lol)+[sz]$/, 'Expression', 'lol'],\n  [/^wo{2,}a*h?$/, 'Expression', 'wooah'],\n  [/^(hee?){2,}h?$/, 'Expression', 'hehe'],\n  [/^(un|de|re)\\\\-[a-z\\u00C0-\\u00FF]{2}/, 'Verb', 'un-vite'],\n\n  // m/h\n  [/^(m|k|cm|km)\\/(s|h|hr)$/, 'Unit', '5 k/m'],\n  // μg/g\n  [/^(ug|ng|mg)\\/(l|m3|ft3)$/, 'Unit', 'ug/L'],\n\n  // love/hate\n  [/[^:/]\\/\\p{Letter}/u, 'SlashedTerm', 'love/hate'],\n]\n", "export default [\n  // #coolguy\n  [/^#[\\p{Number}_]*\\p{Letter}/u, 'HashTag'], // can't be all numbers\n\n  // @spencermountain\n  [/^@\\w{2,}$/, 'AtMention'],\n\n  // period-ones acronyms - f.b.i.\n  [/^([A-Z]\\.){2}[A-Z]?/i, ['Acronym', 'Noun'], 'F.B.I'], //ascii-only\n\n  // ending-apostrophes\n  [/.{3}[lkmnp]in['‘’‛‵′`´]$/, 'Gerund', \"chillin'\"],\n  [/.{4}s['‘’‛‵′`´]$/, 'Possessive', \"flanders'\"],\n\n  //from https://www.regextester.com/106421\n  // [/^([\\u00a9\\u00ae\\u2319-\\u3300]|\\ud83c[\\ud000-\\udfff]|\\ud83d[\\ud000-\\udfff]|\\ud83e[\\ud000-\\udfff])/, 'Emoji', 'emoji-range']\n  // unicode character range\n  [/^[\\p{Emoji_Presentation}\\p{Extended_Pictographic}]/u, 'Emoji', 'emoji-class'],\n]\n", "export default [\n  [/^@1?[0-9](am|pm)$/i, 'Time', '3pm'],\n  [/^@1?[0-9]:[0-9]{2}(am|pm)?$/i, 'Time', '3:30pm'],\n  [/^'[0-9]{2}$/, 'Year'],\n  // times\n  [/^[012]?[0-9](:[0-5][0-9])(:[0-5][0-9])$/, 'Time', '3:12:31'],\n  [/^[012]?[0-9](:[0-5][0-9])?(:[0-5][0-9])? ?(am|pm)$/i, 'Time', '1:12pm'],\n  [/^[012]?[0-9](:[0-5][0-9])(:[0-5][0-9])? ?(am|pm)?$/i, 'Time', '1:12:31pm'], //can remove?\n\n  // iso-dates\n  [/^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}/i, 'Date', 'iso-date'],\n  [/^[0-9]{1,4}-[0-9]{1,2}-[0-9]{1,4}$/, 'Date', 'iso-dash'],\n  [/^[0-9]{1,4}\\/[0-9]{1,2}\\/([0-9]{4}|[0-9]{2})$/, 'Date', 'iso-slash'],\n  [/^[0-9]{1,4}\\.[0-9]{1,2}\\.[0-9]{1,4}$/, 'Date', 'iso-dot'],\n  [/^[0-9]{1,4}-[a-z]{2,9}-[0-9]{1,4}$/i, 'Date', '12-dec-2019'],\n\n  // timezones\n  [/^utc ?[+-]?[0-9]+$/, 'Timezone', 'utc-9'],\n  [/^(gmt|utc)[+-][0-9]{1,2}$/i, 'Timezone', 'gmt-3'],\n\n  //phone numbers\n  [/^[0-9]{3}-[0-9]{4}$/, 'PhoneNumber', '421-0029'],\n  [/^(\\+?[0-9][ -])?[0-9]{3}[ -]?[0-9]{3}-[0-9]{4}$/, 'PhoneNumber', '1-800-'],\n\n  //money\n  //like $5.30\n  [/^[-+]?\\p{Currency_Symbol}[-+]?[0-9]+(,[0-9]{3})*(\\.[0-9]+)?([kmb]|bn)?\\+?$/u, ['Money', 'Value'], '$5.30'],\n  //like 5.30$\n  [/^[-+]?[0-9]+(,[0-9]{3})*(\\.[0-9]+)?\\p{Currency_Symbol}\\+?$/u, ['Money', 'Value'], '5.30£'],\n  //like\n  [/^[-+]?[$£]?[0-9]([0-9,.])+(usd|eur|jpy|gbp|cad|aud|chf|cny|hkd|nzd|kr|rub)$/i, ['Money', 'Value'], '$400usd'],\n\n  //numbers\n  // 50 | -50 | 3.23  | 5,999.0  | 10+\n  [/^[-+]?[0-9]+(,[0-9]{3})*(\\.[0-9]+)?\\+?$/, ['Cardinal', 'NumericValue'], '5,999'],\n  [/^[-+]?[0-9]+(,[0-9]{3})*(\\.[0-9]+)?(st|nd|rd|r?th)$/, ['Ordinal', 'NumericValue'], '53rd'],\n  // .73th\n  [/^\\.[0-9]+\\+?$/, ['Cardinal', 'NumericValue'], '.73th'],\n  //percent\n  [/^[-+]?[0-9]+(,[0-9]{3})*(\\.[0-9]+)?%\\+?$/, ['Percent', 'Cardinal', 'NumericValue'], '-4%'],\n  [/^\\.[0-9]+%$/, ['Percent', 'Cardinal', 'NumericValue'], '.3%'],\n  //fraction\n  [/^[0-9]{1,4}\\/[0-9]{1,4}(st|nd|rd|th)?s?$/, ['Fraction', 'NumericValue'], '2/3rds'],\n  //range\n  [/^[0-9.]{1,3}[a-z]{0,2}[-–—][0-9]{1,3}[a-z]{0,2}$/, ['Value', 'NumberRange'], '3-4'],\n  //time-range\n  [/^[0-9]{1,2}(:[0-9][0-9])?(am|pm)? ?[-–—] ?[0-9]{1,2}(:[0-9][0-9])?(am|pm)$/, ['Time', 'NumberRange'], '3-4pm'],\n  //number with unit\n  [/^[0-9.]+([a-z°]{1,4})$/, 'NumericValue', '9km'],\n]\n", "//nouns that also signal the title of an unknown organization\n//todo remove/normalize plural forms\nexport default [\n  'academy',\n  'administration',\n  'agence',\n  'agences',\n  'agencies',\n  'agency',\n  'airlines',\n  'airways',\n  'army',\n  'assoc',\n  'associates',\n  'association',\n  'assurance',\n  'authority',\n  'autorite',\n  'aviation',\n  'bank',\n  'banque',\n  'board',\n  'boys',\n  'brands',\n  'brewery',\n  'brotherhood',\n  'brothers',\n  'bureau',\n  'cafe',\n  'co',\n  'caisse',\n  'capital',\n  'care',\n  'cathedral',\n  'center',\n  'centre',\n  'chemicals',\n  'choir',\n  'chronicle',\n  'church',\n  'circus',\n  'clinic',\n  'clinique',\n  'club',\n  'co',\n  'coalition',\n  'coffee',\n  'collective',\n  'college',\n  'commission',\n  'committee',\n  'communications',\n  'community',\n  'company',\n  'comprehensive',\n  'computers',\n  'confederation',\n  'conference',\n  'conseil',\n  'consulting',\n  'containers',\n  'corporation',\n  'corps',\n  'corp',\n  'council',\n  'crew',\n  'data',\n  'departement',\n  'department',\n  'departments',\n  'design',\n  'development',\n  'directorate',\n  'division',\n  'drilling',\n  'education',\n  'eglise',\n  'electric',\n  'electricity',\n  'energy',\n  'ensemble',\n  'enterprise',\n  'enterprises',\n  'entertainment',\n  'estate',\n  'etat',\n  'faculty',\n  'faction',\n  'federation',\n  'financial',\n  'fm',\n  'foundation',\n  'fund',\n  'gas',\n  'gazette',\n  'girls',\n  'government',\n  'group',\n  'guild',\n  'herald',\n  'holdings',\n  'hospital',\n  'hotel',\n  'hotels',\n  'inc',\n  'industries',\n  'institut',\n  'institute',\n  'institutes',\n  'insurance',\n  'international',\n  'interstate',\n  'investment',\n  'investments',\n  'investors',\n  'journal',\n  'laboratory',\n  'labs',\n  'llc',\n  'ltd',\n  'limited',\n  'machines',\n  'magazine',\n  'management',\n  'marine',\n  'marketing',\n  'markets',\n  'media',\n  'memorial',\n  'ministere',\n  'ministry',\n  'military',\n  'mobile',\n  'motor',\n  'motors',\n  'musee',\n  'museum',\n  'news',\n  'observatory',\n  'office',\n  'oil',\n  'optical',\n  'orchestra',\n  'organization',\n  'partners',\n  'partnership',\n  'petrol',\n  'petroleum',\n  'pharmacare',\n  'pharmaceutical',\n  'pharmaceuticals',\n  'pizza',\n  'plc',\n  'police',\n  'politburo',\n  'polytechnic',\n  'post',\n  'power',\n  'press',\n  'productions',\n  'quartet',\n  'radio',\n  'reserve',\n  'resources',\n  'restaurant',\n  'restaurants',\n  'savings',\n  'school',\n  'securities',\n  'service',\n  'services',\n  'societe',\n  'subsidiary',\n  'society',\n  'sons',\n  // 'standard',\n  'subcommittee',\n  'syndicat',\n  'systems',\n  'telecommunications',\n  'telegraph',\n  'television',\n  'times',\n  'tribunal',\n  'tv',\n  'union',\n  'university',\n  'utilities',\n  'workers',\n].reduce((h, str) => {\n  h[str] = true\n  return h\n}, {})\n", "export default [\n  // geology\n  'atoll',\n  'basin',\n  'bay',\n  'beach',\n  'bluff',\n  'bog',\n  'camp',\n  'canyon',\n  'canyons',\n  'cape',\n  'cave',\n  'caves',\n  // 'cliff',\n  'cliffs',\n  'coast',\n  'cove',\n  'coves',\n  'crater',\n  'crossing',\n  'creek',\n  'desert',\n  'dune',\n  'dunes',\n  'downs',\n  'estates',\n  'escarpment',\n  'estuary',\n  'falls',\n  'fjord',\n  'fjords',\n  'forest',\n  'forests',\n  'glacier',\n  'gorge',\n  'gorges',\n  'grove',\n  'gulf',\n  'gully',\n  'highland',\n  'heights',\n  'hollow',\n  'hill',\n  'hills',\n  'inlet',\n  'island',\n  'islands',\n  'isthmus',\n  'junction',\n  'knoll',\n  'lagoon',\n  'lake',\n  'lakeshore',\n  'marsh',\n  'marshes',\n  'mount',\n  'mountain',\n  'mountains',\n  'narrows',\n  'peninsula',\n  'plains',\n  'plateau',\n  'pond',\n  'rapids',\n  'ravine',\n  'reef',\n  'reefs',\n  'ridge',\n  // 'river delta',\n  'river',\n  'rivers',\n  'sandhill',\n  'shoal',\n  'shore',\n  'shoreline',\n  'shores',\n  'strait',\n  'straits',\n  'springs',\n  'stream',\n  'swamp',\n  'tombolo',\n  'trail',\n  'trails',\n  'trench',\n  'valley',\n  'vallies',\n  'village',\n  'volcano',\n  'waterfall',\n  'watershed',\n  'wetland',\n  'woods',\n  'acres',\n\n  // districts\n  'burough',\n  'county',\n  'district',\n  'municipality',\n  'prefecture',\n  'province',\n  'region',\n  'reservation',\n  'state',\n  'territory',\n  'borough',\n  'metropolis',\n  'downtown',\n  'uptown',\n  'midtown',\n  'city',\n  'town',\n  'township',\n  'hamlet',\n  'country',\n  'kingdom',\n  'enclave',\n  'neighbourhood',\n  'neighborhood',\n  'kingdom',\n  'ward',\n  'zone',\n  // 'range',\n\n  //building/ complex\n  'airport',\n  'amphitheater',\n  'arch',\n  'arena',\n  'auditorium',\n  'bar',\n  'barn',\n  'basilica',\n  'battlefield',\n  'bridge',\n  'building',\n  'castle',\n  'centre',\n  'coliseum',\n  'cineplex',\n  'complex',\n  'dam',\n  'farm',\n  'field',\n  'fort',\n  'garden',\n  'gardens',\n  // 'grounds',\n  'gymnasium',\n  'hall',\n  'house',\n  'levee',\n  'library',\n  'manor',\n  'memorial',\n  'monument',\n  'museum',\n  'gallery',\n  'palace',\n  'pillar',\n  'pits',\n  // 'pit',\n  // 'place',\n  // 'point',\n  // 'room',\n  'plantation',\n  'playhouse',\n  'quarry',\n  // 'ruins',\n  'sportsfield',\n  'sportsplex',\n  'stadium',\n  // 'statue',\n  'terrace',\n  'terraces',\n  'theater',\n  'tower',\n  'park',\n  'parks',\n  'site',\n  'ranch',\n  'raceway',\n  'sportsplex',\n\n  // 'sports centre',\n  // 'sports field',\n  // 'soccer complex',\n  // 'soccer centre',\n  // 'sports complex',\n  // 'civic centre',\n\n  // roads\n  'ave',\n  'st',\n  'street',\n  'rd',\n  'road',\n  'lane',\n  'landing',\n  'crescent',\n  'cr',\n  'way',\n  'tr',\n  'terrace',\n  'avenue',\n].reduce((h, str) => {\n  h[str] = true\n  return h\n}, {})\n", "export default [\n  [/([^v])ies$/i, '$1y'],\n  [/(ise)s$/i, '$1'],//promises\n  [/(kn|[^o]l|w)ives$/i, '$1ife'],\n  [/^((?:ca|e|ha|(?:our|them|your)?se|she|wo)l|lea|loa|shea|thie)ves$/i, '$1f'],\n  [/^(dwar|handkerchie|hoo|scar|whar)ves$/i, '$1f'],\n  [/(antenn|formul|nebul|vertebr|vit)ae$/i, '$1a'],\n  [/(octop|vir|radi|nucle|fung|cact|stimul)(i)$/i, '$1us'],\n  [/(buffal|tomat|tornad)(oes)$/i, '$1o'],\n\n  [/(ause)s$/i, '$1'],//causes\n  [/(ease)s$/i, '$1'],//diseases\n  [/(ious)es$/i, '$1'],//geniouses\n  [/(ouse)s$/i, '$1'],//houses\n  [/(ose)s$/i, '$1'],//roses\n\n  [/(..ase)s$/i, '$1'],\n  [/(..[aeiu]s)es$/i, '$1'],\n  [/(vert|ind|cort)(ices)$/i, '$1ex'],\n  [/(matr|append)(ices)$/i, '$1ix'],\n  [/([xo]|ch|ss|sh)es$/i, '$1'],\n  [/men$/i, 'man'],\n  [/(n)ews$/i, '$1ews'],\n  [/([ti])a$/i, '$1um'],\n  [/([^aeiouy]|qu)ies$/i, '$1y'],\n  [/(s)eries$/i, '$1eries'],\n  [/(m)ovies$/i, '$1ovie'],\n  [/(cris|ax|test)es$/i, '$1is'],\n  [/(alias|status)es$/i, '$1'],\n  [/(ss)$/i, '$1'],\n  [/(ic)s$/i, '$1'],\n  [/s$/i, ''],\n]\n", "import rules from './_rules.js'\nconst invertObj = function (obj) {\n  return Object.keys(obj).reduce((h, k) => {\n    h[obj[k]] = k\n    return h\n  }, {})\n}\n\nconst toSingular = function (str, model) {\n  const { irregularPlurals } = model.two\n  let invert = invertObj(irregularPlurals) //(not very efficient)\n  // check irregulars list\n  if (invert.hasOwnProperty(str)) {\n    return invert[str]\n  }\n  // go through our regexes\n  for (let i = 0; i < rules.length; i++) {\n    if (rules[i][0].test(str) === true) {\n      // console.log(rules[i])\n      str = str.replace(rules[i][0], rules[i][1])\n      return str\n    }\n  }\n  return str\n}\nexport default toSingular\n", "import toPlural from './toPlural/index.js'\nimport toSingular from './toSingular/index.js'\n\nconst all = function (str, model) {\n  let arr = [str]\n  let p = toPlural(str, model)\n  if (p !== str) {\n    arr.push(p)\n  }\n  let s = toSingular(str, model)\n  if (s !== str) {\n    arr.push(s)\n  }\n  return arr\n}\n\nexport default { toPlural, toSingular, all }\n", "let guessVerb = {\n  Gerund: ['ing'],\n  Actor: ['erer'],\n  Infinitive: [\n    'ate',\n    'ize',\n    'tion',\n    'rify',\n    'then',\n    'ress',\n    'ify',\n    'age',\n    'nce',\n    'ect',\n    'ise',\n    'ine',\n    'ish',\n    'ace',\n    'ash',\n    'ure',\n    'tch',\n    'end',\n    'ack',\n    'and',\n    'ute',\n    'ade',\n    'ock',\n    'ite',\n    'ase',\n    'ose',\n    'use',\n    'ive',\n    'int',\n    'nge',\n    'lay',\n    'est',\n    'ain',\n    'ant',\n    'ent',\n    'eed',\n    'er',\n    'le',\n    'unk',\n    'ung',\n    'upt',\n    'en',\n  ],\n  PastTense: ['ept', 'ed', 'lt', 'nt', 'ew', 'ld'],\n  PresentTense: [\n    'rks',\n    'cks',\n    'nks',\n    'ngs',\n    'mps',\n    'tes',\n    'zes',\n    'ers',\n    'les',\n    'acks',\n    'ends',\n    'ands',\n    'ocks',\n    'lays',\n    'eads',\n    'lls',\n    'els',\n    'ils',\n    'ows',\n    'nds',\n    'ays',\n    'ams',\n    'ars',\n    'ops',\n    'ffs',\n    'als',\n    'urs',\n    'lds',\n    'ews',\n    'ips',\n    'es',\n    'ts',\n    'ns',\n  ],\n  Participle: ['ken', 'wn']\n}\n//flip it into a lookup object\nguessVerb = Object.keys(guessVerb).reduce((h, k) => {\n  guessVerb[k].forEach(a => (h[a] = k))\n  return h\n}, {})\nexport default guessVerb\n", "import guess from './_guess.js'\n\n/** it helps to know what we're conjugating from */\nconst getTense = function (str) {\n  let three = str.substring(str.length - 3)\n  if (guess.hasOwnProperty(three) === true) {\n    return guess[three]\n  }\n  let two = str.substring(str.length - 2)\n  if (guess.hasOwnProperty(two) === true) {\n    return guess[two]\n  }\n  let one = str.substring(str.length - 1)\n  if (one === 's') {\n    return 'PresentTense'\n  }\n  return null\n}\nexport default getTense", "import { convert } from 'suffix-thumb'\nimport getTense from '../getTense/index.js'\n\nconst toParts = function (str, model) {\n  let prefix = ''\n  let prefixes = {}\n  if (model.one && model.one.prefixes) {\n    prefixes = model.one.prefixes\n  }\n  // pull-apart phrasal verb 'fall over'\n  let [verb, particle] = str.split(/ /)\n  // support 'over cleaned'\n  if (particle && prefixes[verb] === true) {\n    prefix = verb\n    verb = particle\n    particle = ''\n  }\n  return {\n    prefix, verb, particle\n  }\n}\n\n\n// dunno about these..\nconst copulaMap = {\n  are: 'be',\n  were: 'be',\n  been: 'be',\n  is: 'be',\n  am: 'be',\n  was: 'be',\n  be: 'be',\n  being: 'be',\n}\n\nconst toInfinitive = function (str, model, tense) {\n  const { fromPast, fromPresent, fromGerund, fromParticiple } = model.two.models\n  let { prefix, verb, particle } = toParts(str, model)\n  let inf = ''\n  if (!tense) {\n    tense = getTense(str)\n  }\n  if (copulaMap.hasOwnProperty(str)) {\n    inf = copulaMap[str]\n  } else if (tense === 'Participle') {\n    inf = convert(verb, fromParticiple)\n  } else if (tense === 'PastTense') {\n    inf = convert(verb, fromPast)\n  } else if (tense === 'PresentTense') {\n    inf = convert(verb, fromPresent)\n  } else if (tense === 'Gerund') {\n    inf = convert(verb, fromGerund)\n  } else {\n    return str\n  }\n\n  // stitch phrasal back on\n  if (particle) {\n    inf += ' ' + particle\n  }\n  // stitch prefix back on\n  if (prefix) {\n    inf = prefix + ' ' + inf\n  }\n  return inf\n}\nexport default toInfinitive\n\n// console.log(toInfinitive('snarled', { one: {} }))\n// console.log(convert('snarled', fromPast))", "// import { toPast, toPresent, toGerund, toParticiple } from '../../../../model/models/index.js'\nimport { convert } from 'suffix-thumb'\n\n// pull-apart phrasal verb 'fall over'\nconst parse = (inf) => {\n  if (/ /.test(inf)) {\n    return inf.split(/ /)\n  }\n  return [inf, '']\n}\n\n//we run this on every verb in the lexicon, so please keep it fast\n//we assume the input word is a proper infinitive\nconst conjugate = function (inf, model) {\n  const { toPast, toPresent, toGerund, toParticiple } = model.two.models\n  // ad-hoc Copula response\n  if (inf === 'be') {\n    return {\n      Infinitive: inf,\n      Gerund: 'being',\n      PastTense: 'was',\n      PresentTense: 'is',\n    }\n  }\n  let [str, particle] = parse(inf)\n  let found = {\n    Infinitive: str,\n    PastTense: convert(str, toPast),\n    PresentTense: convert(str, toPresent),\n    Gerund: convert(str, toGerund),\n    FutureTense: 'will ' + str\n  }\n  // add past-participle if it's interesting\n  // drive -> driven (not drove)\n  let pastPrt = convert(str, toParticiple)\n  if (pastPrt !== inf && pastPrt !== found.PastTense) {\n    // ensure it's a known participle\n    let lex = model.one.lexicon || {}\n    if (lex[pastPrt] === 'Participle' || lex[pastPrt] === 'Adjective') {\n      // one exception\n      if (inf === 'play') {\n        pastPrt = 'played'\n      }\n      found.Participle = pastPrt\n    }\n  }\n  // put phrasal-verbs back together again\n  if (particle) {\n    Object.keys(found).forEach(k => {\n      found[k] += ' ' + particle\n    })\n  }\n  return found\n}\n\n\nexport default conjugate\n\n// console.log(toPresent.rules.y)\n// console.log(convert('buy', toPresent))\n\n", "import toInfinitive from './toInfinitive/index.js'\nimport conjugate from './conjugate/index.js'\n\nconst all = function (str, model) {\n  let res = conjugate(str, model)\n  delete res.FutureTense\n  return Object.values(res).filter(s => s)\n}\nexport default {\n  toInfinitive, conjugate, all\n}\n", "import { convert } from 'suffix-thumb'\n// import toAdverb from './adverbs/toAdverb.js'\n\n\nconst toSuperlative = function (adj, model) {\n  const mod = model.two.models.toSuperlative\n  return convert(adj, mod)\n}\nconst toComparative = function (adj, model) {\n  const mod = model.two.models.toComparative\n  return convert(adj, mod)\n}\nconst fromComparative = function (adj, model) {\n  const mod = model.two.models.fromComparative\n  return convert(adj, mod)\n}\nconst fromSuperlative = function (adj, model) {\n  const mod = model.two.models.fromSuperlative\n  return convert(adj, mod)\n}\nconst toNoun = function (adj, model) {\n  const mod = model.two.models.adjToNoun\n  return convert(adj, mod)\n}\n\nexport {\n  toSuperlative, toComparative, fromComparative, fromSuperlative, toNoun\n}\n", "//sweep-through all suffixes\nconst suffixLoop = function (str = '', suffixes = []) {\n  const len = str.length\n  let max = len <= 6 ? len - 1 : 6\n  for (let i = max; i >= 1; i -= 1) {\n    let suffix = str.substring(len - i, str.length)\n    if (suffixes[suffix.length].hasOwnProperty(suffix) === true) {\n      let pre = str.slice(0, len - i)\n      let post = suffixes[suffix.length][suffix]\n      return pre + post\n    }\n  }\n  return null\n}\nexport default suffixLoop", "import doRules from './lib.js'\n\nconst s = 'ically'\nconst ical = new Set([\n  'analyt' + s, //analytical\n  'chem' + s,// chemical\n  'class' + s, //classical\n  'clin' + s, // clinical\n  'crit' + s,// critical\n  'ecolog' + s,// ecological\n  'electr' + s,// electrical\n  'empir' + s, // empirical\n  'frant' + s, // frantical\n  'grammat' + s,// grammatical\n  'ident' + s, // identical\n  'ideolog' + s, // ideological\n  'log' + s, // logical\n  'mag' + s, //magical\n  'mathemat' + s,// mathematical\n  'mechan' + s,// mechanical\n  'med' + s,// medical\n  'method' + s, // methodical\n  'method' + s,// methodical\n  'mus' + s, // musical\n  'phys' + s, // physical\n  'phys' + s,// physical\n  'polit' + s,// political\n  'pract' + s,// practical\n  'rad' + s, //radical\n  'satir' + s, // satirical\n  'statist' + s, // statistical\n  'techn' + s,// technical\n  'technolog' + s, // technological\n  'theoret' + s,// theoretical\n  'typ' + s,// typical\n  'vert' + s,// vertical\n  'whims' + s,// whimsical\n])\n\nconst suffixes = [\n  null,\n  {},\n  { 'ly': '' },\n  {\n    'ily': 'y',\n    'bly': 'ble',\n    'ply': 'ple',\n  },\n  {\n    'ally': 'al',\n    'rply': 'rp',\n  },\n  {\n    'ually': 'ual',\n    'ially': 'ial',\n    'cally': 'cal',\n    'eally': 'eal',\n    'rally': 'ral',\n    'nally': 'nal',\n    'mally': 'mal',\n    'eeply': 'eep',\n    'eaply': 'eap',\n  },\n  {\n    ically: 'ic',\n  }\n]\n\nconst noAdj = new Set([\n  'early',\n  'only',\n  'hourly',\n  'daily',\n  'weekly',\n  'monthly',\n  'yearly',\n  'mostly',\n  'duly',\n  'unduly',\n  'especially',\n  'undoubtedly',\n  'conversely',\n  'namely',\n  'exceedingly',\n  'presumably',\n  'accordingly',\n  'overly',\n  'best',\n  'latter',\n  'little',\n  'long',\n  'low'\n])\n\n// exceptions to rules\nconst exceptions = {\n  wholly: 'whole',\n  fully: 'full',\n  truly: 'true',\n  gently: 'gentle',\n  singly: 'single',\n  customarily: 'customary',\n  idly: 'idle',\n  publically: 'public',\n  quickly: 'quick',\n  superbly: 'superb',\n  cynically: 'cynical',\n  well: 'good',// -?\n}\n\n\nconst toAdjective = function (str) {\n  if (!str.endsWith('ly')) {\n    return null\n  }\n  // 'electronic' vs 'electronical'\n  if (ical.has(str)) {\n    return str.replace(/ically/, 'ical')\n  }\n  if (noAdj.has(str)) {\n    return null\n  }\n  if (exceptions.hasOwnProperty(str)) {\n    return exceptions[str]\n  }\n  return doRules(str, suffixes) || str\n}\nexport default toAdjective\n\n// console.log(toAdjective('emphatically'))\n// console.log(toAdjective('usually'))\n// console.log(toAdjective('mechanically'))\n// console.log(toAdjective('vertically'))", "import doRules from './lib.js'\n\nconst suffixes = [\n  null,\n  {\n    y: 'ily'\n  },\n  {\n    ly: 'ly',//unchanged\n    ic: 'ically'\n  },\n  {\n    ial: 'ially',\n    ual: 'ually',\n    tle: 'tly',\n    ble: 'bly',\n    ple: 'ply',\n    ary: 'arily',\n  },\n  {},\n  {},\n  {},\n]\n\nconst exceptions = {\n  cool: 'cooly',\n  whole: 'wholly',\n  full: 'fully',\n  good: 'well',\n  idle: 'idly',\n  public: 'publicly',\n  single: 'singly',\n  special: 'especially',\n}\n\n// a lot of adjectives *don't really* have a adverb\n// 'roomy' -> 'roomily'\n// but here, conjugate what it would be, if it made sense to\nconst toAdverb = function (str) {\n  if (exceptions.hasOwnProperty(str)) {\n    return exceptions[str]\n  }\n  let adv = doRules(str, suffixes)\n  if (!adv) {\n    adv = str + 'ly'\n  }\n  // only return this if it exists in lexicon?\n  // console.log(model.one.lexicon[adv])\n  return adv\n}\nexport default toAdverb\n// console.log(toAdverb('unsightly'))", "import { toSuperlative, toComparative, fromSuperlative, fromComparative, toNoun } from './inflect.js'\nimport fromAdverb from './conjugate/fromAdverb.js'\nimport toAdverb from './conjugate/toAdverb.js'\n// import toNoun from './conjugate/toNoun.js'\n\nconst all = function (str, model) {\n  let arr = [str]\n  arr.push(toSuperlative(str, model))\n  arr.push(toComparative(str, model))\n  arr.push(toAdverb(str))\n  arr = arr.filter(s => s)\n  arr = new Set(arr)\n  return Array.from(arr)\n}\n\n\nexport default {\n  toSuperlative, toComparative, toAdverb, toNoun,\n  fromAdverb, fromSuperlative, fromComparative,\n  all,\n}", "import nouns from './nouns/index.js'\nimport verbs from './verbs/index.js'\nimport adjectives from './adjectives/index.js'\n\nexport default {\n  noun: nouns,\n  verb: verbs,\n  adjective: adjectives\n}\n", "// transformations to make on our lexicon\nexport default {\n  // add plural forms of singular nouns\n  Singular: (word, lex, methods, model) => {\n    let already = model.one.lexicon\n    let plural = methods.two.transform.noun.toPlural(word, model)\n    if (!already[plural]) {\n      lex[plural] = lex[plural] || 'Plural'\n    }\n  },\n  // 'lawyer', 'manager' plural forms\n  Actor: (word, lex, methods, model) => {\n    let already = model.one.lexicon\n    let plural = methods.two.transform.noun.toPlural(word, model)\n    if (!already[plural]) {\n      lex[plural] = lex[plural] || ['Plural', 'Actor']\n    }\n  },\n\n  // superlative/ comparative forms for adjectives\n  Comparable: (word, lex, methods, model) => {\n    let already = model.one.lexicon\n    let { toSuperlative, toComparative } = methods.two.transform.adjective\n    // fast -> fastest\n    let sup = toSuperlative(word, model)\n    if (!already[sup]) {\n      lex[sup] = lex[sup] || 'Superlative'\n    }\n    // fast -> faster\n    let comp = toComparative(word, model)\n    if (!already[comp]) {\n      lex[comp] = lex[comp] || 'Comparative'\n    }\n    // overwrite\n    lex[word] = 'Adjective'\n  },\n\n  // 'german' -> 'germans'\n  Demonym: (word, lex, methods, model) => {\n    let plural = methods.two.transform.noun.toPlural(word, model)\n    lex[plural] = lex[plural] || ['Demonym', 'Plural']\n  },\n\n  // conjugate all forms of these verbs\n  Infinitive: (word, lex, methods, model) => {\n    let already = model.one.lexicon\n    let all = methods.two.transform.verb.conjugate(word, model)\n    Object.entries(all).forEach(a => {\n      if (!already[a[1]] && !lex[a[1]] && a[0] !== 'FutureTense') {\n        lex[a[1]] = a[0]\n      }\n    })\n  },\n\n  // 'walk up' should conjugate, too\n  PhrasalVerb: (word, lex, methods, model) => {\n    let already = model.one.lexicon\n    lex[word] = ['PhrasalVerb', 'Infinitive']\n    let _multi = model.one._multiCache\n    let [inf, rest] = word.split(' ')\n    // add root verb\n    if (!already[inf]) {\n      lex[inf] = lex[inf] || 'Infinitive'\n    }\n    // conjugate it\n    let all = methods.two.transform.verb.conjugate(inf, model)\n    delete all.FutureTense\n    Object.entries(all).forEach(a => {\n      // not 'walker up', or 'had taken up'\n      if (a[0] === 'Actor' || a[1] === '') {\n        return\n      }\n      // add the root verb, alone\n      if (!lex[a[1]] && !already[a[1]]) {\n        lex[a[1]] = a[0]\n      }\n      _multi[a[1]] = 2\n      let str = a[1] + ' ' + rest\n      lex[str] = lex[str] || [a[0], 'PhrasalVerb']\n    })\n  },\n\n  // expand 'million'\n  Multiple: (word, lex) => {\n    lex[word] = ['Multiple', 'Cardinal']\n    // 'millionth'\n    lex[word + 'th'] = ['Multiple', 'Ordinal']\n    // 'millionths'\n    lex[word + 'ths'] = ['Multiple', 'Fraction']\n  },\n  // expand number-words\n  Cardinal: (word, lex) => {\n    lex[word] = ['TextValue', 'Cardinal']\n  },\n\n  // 'millionth'\n  Ordinal: (word, lex) => {\n    lex[word] = ['TextValue', 'Ordinal']\n    lex[word + 's'] = ['TextValue', 'Fraction']\n  },\n  // 'thames'\n  Place: (word, lex) => {\n    lex[word] = ['Place', 'ProperNoun']\n  },\n  // 'ontario'\n  Region: (word, lex) => {\n    lex[word] = ['Region', 'ProperNoun']\n  },\n}\n", "import byTag from './byTag.js'\n\n// derive clever things from our lexicon key-value pairs\n// this method runs as the pre-tagger plugin gets loaded\nconst expand = function (words, world) {\n  const { methods, model } = world\n  let lex = {}\n  // console.log('start:', Object.keys(lex).length)\n  let _multi = {}\n  // go through each word in this key-value obj:\n  Object.keys(words).forEach(word => {\n    let tag = words[word]\n    // normalize lexicon a little bit\n    word = word.toLowerCase().trim()\n    word = word.replace(/'s\\b/, '')\n    // cache multi-word terms\n    let split = word.split(/ /)\n    if (split.length > 1) {\n      // prefer longer ones\n      if (_multi[split[0]] === undefined || split.length > _multi[split[0]]) {\n        _multi[split[0]] = split.length\n      }\n    }\n    // do any clever-business, by it's tag\n    if (byTag.hasOwnProperty(tag) === true) {\n      byTag[tag](word, lex, methods, model)\n    }\n    lex[word] = lex[word] || tag\n  })\n  // cleanup\n  delete lex['']\n  delete lex[null]\n  delete lex[' ']\n  return { lex, _multi }\n}\nexport default expand\n", "// roughly, split a document by comma or semicolon\n\nconst splitOn = function (terms, i) {\n  const isNum = /^[0-9]+$/\n  let term = terms[i]\n  // early on, these may not be dates yet:\n  if (!term) {\n    return false\n  }\n  const maybeDate = new Set(['may', 'april', 'august', 'jan'])\n  // veggies, like figs\n  if (term.normal === 'like' || maybeDate.has(term.normal)) {\n    return false\n  }\n  // toronto, canada  - tuesday, march\n  if (term.tags.has('Place') || term.tags.has('Date')) {\n    return false\n  }\n  if (terms[i - 1]) {\n    let lastTerm = terms[i - 1]\n    // thursday, june\n    if (lastTerm.tags.has('Date') || maybeDate.has(lastTerm.normal)) {\n      return false\n    }\n    // pretty, nice, and fun\n    if (lastTerm.tags.has('Adjective') || term.tags.has('Adjective')) {\n      return false\n    }\n  }\n  // don't split numbers, yet\n  let str = term.normal\n  if (str.length === 1 || str.length === 2 || str.length === 4) {\n    if (isNum.test(str)) {\n      return false\n    }\n  }\n  return true\n}\n\n// kind-of a dirty sentence chunker\nconst quickSplit = function (document) {\n  const splitHere = /[,:;]/\n  let arr = []\n  document.forEach(terms => {\n    let start = 0\n    terms.forEach((term, i) => {\n      // does it have a comma/semicolon ?\n      if (splitHere.test(term.post) && splitOn(terms, i + 1)) {\n        arr.push(terms.slice(start, i + 1))\n        start = i + 1\n      }\n    })\n    if (start < terms.length) {\n      arr.push(terms.slice(start, terms.length))\n    }\n  })\n  return arr\n}\n\nexport default quickSplit", "//similar to plural/singularize rules, but not the same\nconst isPlural = {\n  e: ['mice', 'louse', 'antennae', 'formulae', 'nebulae', 'vertebrae', 'vitae'],\n  i: ['tia', 'octopi', 'viri', 'radii', 'nuclei', 'fungi', 'cacti', 'stimuli'],\n  n: ['men'],\n  t: ['feet'],\n}\n// plural words as exceptions to suffix-rules\nconst exceptions = new Set([\n  // 'formulas',\n  // 'umbrellas',\n  // 'gorillas',\n  // 'koalas',\n  'israelis',\n  'menus',\n  'logos',\n])\n\nconst notPlural = [\n  'bus',\n  'mas', //christmas\n  'was',\n  // 'las',\n  'ias', //alias\n  'xas',\n  'vas',\n  'cis', //probocis\n  'lis',\n  'nis', //tennis\n  'ois',\n  'ris',\n  'sis', //thesis\n  'tis', //mantis, testis\n  'xis',\n  'aus',\n  'cus',\n  'eus', //nucleus\n  'fus', //doofus\n  'gus', //fungus\n  'ius', //radius\n  'lus', //stimulus\n  'nus',\n  'das',\n  'ous',\n  'pus', //octopus\n  'rus', //virus\n  'sus', //census\n  'tus', //status,cactus\n  'xus',\n  'aos', //chaos\n  'igos',\n  'ados', //barbados\n  'ogos',\n  \"'s\",\n  'ss',\n]\n\nconst looksPlural = function (str) {\n  // not long enough to be plural\n  if (!str || str.length <= 3) {\n    return false\n  }\n  // 'menus' etc\n  if (exceptions.has(str)) {\n    return true\n  }\n  let end = str[str.length - 1]\n  // look at 'firemen'\n  if (isPlural.hasOwnProperty(end)) {\n    return isPlural[end].find(suff => str.endsWith(suff))\n  }\n  if (end !== 's') {\n    return false\n  }\n  // look for 'virus'\n  if (notPlural.find(suff => str.endsWith(suff))) {\n    return false\n  }\n  // ends with an s, seems plural i guess.\n  return true\n}\nexport default looksPlural\n", "import transform from './transform/index.js'\nimport expandLexicon from './expand/index.js'\nimport quickSplit from './quickSplit.js'\nimport looksPlural from './looksPlural.js'\n\n\nexport default {\n  two: {\n    quickSplit,\n    expandLexicon,\n    transform,\n    looksPlural\n  },\n}\n", "// import irregularVerbs from './conjugations.js'\n// harvest list of irregulars for any juicy word-data\nconst expandIrregulars = function (model) {\n  const { irregularPlurals } = model.two\n  const { lexicon } = model.one\n  Object.entries(irregularPlurals).forEach(a => {\n    lexicon[a[0]] = lexicon[a[0]] || 'Singular'\n    lexicon[a[1]] = lexicon[a[1]] || 'Plural'\n  })\n  return model\n}\nexport default expandIrregulars\n", "import methods from '../../methods/index.js'\nimport expandIrregulars from './irregulars.js'\nimport toPlural from '../../methods/transform/nouns/toPlural/index.js'\nimport conjugate from '../../methods/transform/verbs/conjugate/index.js'\nimport { toSuperlative, toComparative } from '../../methods/transform/adjectives/inflect.js'\nimport toInfinitive from '../../methods/transform/verbs/toInfinitive/index.js'\nimport models from '../models/index.js'\nlet tmpModel = {\n  one: { lexicon: {} },\n  two: { models }\n}\n\n// defaults for switches\nconst switchDefaults = {\n  // 'pilot'\n  'Actor|Verb': 'Actor', //\n  // 'amusing'\n  'Adj|Gerund': 'Adjective', //+conjugations\n  // 'standard'\n  'Adj|Noun': 'Adjective',\n  // 'boiled'\n  'Adj|Past': 'Adjective', //+conjugations\n  // 'smooth'\n  'Adj|Present': 'Adjective',//+conjugations\n  // 'box'\n  'Noun|Verb': 'Singular', //+conjugations (no-present)\n  //'singing'\n  'Noun|Gerund': 'Gerund', //+conjugations\n  // 'hope'\n  'Person|Noun': 'Noun',\n  // 'April'\n  'Person|Date': 'Month',\n  // 'rob'\n  'Person|Verb': 'FirstName',//+conjugations\n  // 'victoria'\n  'Person|Place': 'Person',\n  // 'rusty'\n  'Person|Adj': 'Comparative',\n  // 'boxes'\n  'Plural|Verb': 'Plural', //(these are already derivative)\n  // 'miles'\n  'Unit|Noun': 'Noun',\n}\n\nconst expandLexicon = function (words, model) {\n  // do clever tricks to grow the words\n  const world = { model, methods }\n  let { lex, _multi } = methods.two.expandLexicon(words, world)\n  // store multiple-word terms in a cache\n  Object.assign(model.one.lexicon, lex)\n  Object.assign(model.one._multiCache, _multi)\n  return model\n}\n\n// these words have no singular/plural conjugation\nconst addUncountables = function (words, model) {\n  Object.keys(words).forEach(k => {\n    if (words[k] === 'Uncountable') {\n      model.two.uncountable[k] = true\n      words[k] = 'Uncountable'\n    }\n  })\n  return model\n}\n\nconst expandVerb = function (str, words, doPresent) {\n  let obj = conjugate(str, tmpModel)\n  words[obj.PastTense] = words[obj.PastTense] || 'PastTense'\n  words[obj.Gerund] = words[obj.Gerund] || 'Gerund'\n  if (doPresent === true) {\n    // is this plural noun, or present-tense?\n    words[obj.PresentTense] = words[obj.PresentTense] || 'PresentTense'\n  }\n}\n\nconst expandAdjective = function (str, words, model) {\n  let sup = toSuperlative(str, model)\n  words[sup] = words[sup] || 'Superlative'\n  let comp = toComparative(str, model)\n  words[comp] = words[comp] || 'Comparative'\n}\n\nconst expandNoun = function (str, words, model) {\n  let plur = toPlural(str, model)\n  words[plur] = words[plur] || 'Plural'\n}\n\n// harvest ambiguous words for any conjugations\nconst expandVariable = function (switchWords, model) {\n  let words = {}\n  const lex = model.one.lexicon\n  //add first tag as an assumption for each variable word\n  Object.keys(switchWords).forEach(w => {\n    const name = switchWords[w]\n    words[w] = switchDefaults[name]\n    // conjugate some verbs\n    if (name === 'Noun|Verb' || name === 'Person|Verb' || name === 'Actor|Verb') {\n      expandVerb(w, lex, false)\n    }\n    if (name === 'Adj|Present') {\n      expandVerb(w, lex, true)\n      expandAdjective(w, lex, model)\n    }\n    if (name === 'Person|Adj') {\n      expandAdjective(w, lex, model)\n    }\n    // add infinitives for gerunds\n    if (name === 'Adj|Gerund' || name === 'Noun|Gerund') {\n      let inf = toInfinitive(w, tmpModel, 'Gerund')\n      if (!lex[inf]) {\n        words[inf] = 'Infinitive' //expand it later\n      }\n    }\n    // add plurals for nouns\n    if (name === 'Noun|Gerund' || name === 'Adj|Noun' || name === 'Person|Noun') {\n      expandNoun(w, lex, model)\n    }\n    if (name === 'Adj|Past') {\n      let inf = toInfinitive(w, tmpModel, 'PastTense')\n      if (!lex[inf]) {\n        words[inf] = 'Infinitive' //expand it later\n      }\n    }\n  })\n  // add conjugations\n  model = expandLexicon(words, model)\n  return model\n}\n\nconst expand = function (model) {\n  model = expandLexicon(model.one.lexicon, model)\n  model = addUncountables(model.one.lexicon, model)\n  model = expandVariable(model.two.switches, model)\n  model = expandIrregulars(model)\n  return model\n}\nexport default expand\n", "import irregularPlurals from './irregulars/plurals.js'\nimport { lexicon, switches, frozenLex } from './lexicon/index.js'\nimport clues from './clues/index.js'\nimport suffixPatterns from './patterns/suffixes.js'\nimport prefixPatterns from './patterns/prefixes.js'\nimport endsWith from './patterns/endsWith.js'\nimport neighbours from './patterns/neighbours.js'\nimport models from './models/index.js'\nimport regexNormal from './regex/regex-normal.js'\nimport regexText from './regex/regex-text.js'\nimport regexNumbers from './regex/regex-numbers.js'\nimport orgWords from './orgWords.js'\nimport placeWords from './placeWords.js'\nimport expandLexicon from './_expand/index.js'\n\nlet model = {\n  one: {\n    _multiCache: {},\n    lexicon,\n    frozenLex,\n  },\n  two: {\n    irregularPlurals,\n    models,\n\n    suffixPatterns,\n    prefixPatterns,\n    endsWith,\n    neighbours,\n\n    regexNormal,\n    regexText,\n    regexNumbers,\n\n    switches,\n    clues,\n\n    uncountable: {},\n\n    orgWords,\n    placeWords,\n  },\n}\nmodel = expandLexicon(model)\nexport default model\n\n// console.log(model.one.lexicon.see)\n", "const byPunctuation = function (terms, i, model, world) {\n  const setTag = world.methods.one.setTag\n  // colon following first word\n  // edit: foo\n  // breaking: foobar\n  if (i === 0 && terms.length >= 3) {\n    const hasColon = /:/\n    let post = terms[0].post\n    if (post.match(hasColon)) {\n      // phone: 555-2938\n      let nextTerm = terms[1]\n      if (nextTerm.tags.has('Value') || nextTerm.tags.has('Email') || nextTerm.tags.has('PhoneNumber')) {\n        return\n      }\n      //\n      setTag([terms[0]], 'Expression', world, null, `2-punct-colon''`)\n    }\n  }\n}\nexport default byPunctuation\n", "const byHyphen = function (terms, i, model, world) {\n  const setTag = world.methods.one.setTag\n  // two words w/ a dash\n  if (terms[i].post === '-' && terms[i + 1]) {\n    setTag([terms[i], terms[i + 1]], 'Hyphenated', world, null, `1-punct-hyphen''`)\n\n    // bone-headed, man-made, good-tempered, coursely-ground\n    // if (terms[i + 1].tags.has('PastTense')) {\n    //   let tags = terms[i].tags\n    //   if (tags.has('Noun') || tags.has('Adverb')) {\n    //     setTag([terms[i], terms[i + 1]], 'Adjective', world, null, `2-punct-dash''`)\n    //   }\n\n    // }\n  }\n}\nexport default byHyphen\n", "const prefix = /^(under|over|mis|re|un|dis|semi)-?/\n\nconst tagSwitch = function (terms, i, model) {\n  const switches = model.two.switches\n  let term = terms[i]\n  if (switches.hasOwnProperty(term.normal)) {\n    term.switch = switches[term.normal]\n    return\n  }\n  // support 'restrike' -> 'strike'\n  if (prefix.test(term.normal)) {\n    let stem = term.normal.replace(prefix, '')\n    if (stem.length > 3 && switches.hasOwnProperty(stem)) {\n      term.switch = switches[stem]\n    }\n  }\n}\nexport default tagSwitch", "// verbose-mode tagger debuging\nconst log = (term, tag, reason = '') => {\n  const yellow = str => '\\x1b[33m\\x1b[3m' + str + '\\x1b[0m'\n  const i = str => '\\x1b[3m' + str + '\\x1b[0m'\n  let word = term.text || '[' + term.implicit + ']'\n  if (typeof tag !== 'string' && tag.length > 2) {\n    tag = tag.slice(0, 2).join(', #') + ' +' //truncate the list of tags\n  }\n  tag = typeof tag !== 'string' ? tag.join(', #') : tag\n  console.log(` ${yellow(word).padEnd(24)} \\x1b[32m→\\x1b[0m #${tag.padEnd(22)}  ${i(reason)}`) // eslint-disable-line\n}\n\n// a faster version than the user-facing one in ./methods\nconst fastTag = function (term, tag, reason) {\n  if (!tag || tag.length === 0) {\n    return\n  }\n  if (term.frozen === true) {\n    return\n  }\n  // some logging for debugging\n  const env = typeof process === 'undefined' || !process.env ? self.env || {} : process.env\n  if (env && env.DEBUG_TAGS) {\n    log(term, tag, reason)\n  }\n  term.tags = term.tags || new Set()\n  if (typeof tag === 'string') {\n    term.tags.add(tag)\n  } else {\n    tag.forEach(tg => term.tags.add(tg))\n  }\n}\n\nexport default fastTag\n", "import fastTag from '../_fastTag.js'\nimport looksPlural from '../../../methods/looksPlural.js'\nimport getTense from '../../../methods/transform/verbs/getTense/index.js'\n// tags that are neither plural or singular\nconst uncountable = [\n  'Acronym',\n  'Abbreviation',\n  'ProperNoun',\n  'Uncountable',\n  'Possessive',\n  'Pronoun',\n  'Activity',\n  'Honorific',\n  'Month',\n]\n// try to guess if each noun is a plural/singular\nconst setPluralSingular = function (term) {\n  if (!term.tags.has('Noun') || term.tags.has('Plural') || term.tags.has('Singular')) {\n    return\n  }\n  if (uncountable.find(tag => term.tags.has(tag))) {\n    return\n  }\n  if (looksPlural(term.normal)) {\n    fastTag(term, 'Plural', '3-plural-guess')\n  } else {\n    fastTag(term, 'Singular', '3-singular-guess')\n  }\n}\n\n// try to guess the tense of a naked verb\nconst setTense = function (term) {\n  let tags = term.tags\n  if (tags.has('Verb') && tags.size === 1) {\n    let guess = getTense(term.normal)\n    if (guess) {\n      fastTag(term, guess, '3-verb-tense-guess')\n    }\n  }\n}\n\n//add deduced parent tags to our terms\nconst fillTags = function (terms, i, model) {\n  let term = terms[i]\n  //there is probably just one tag, but we'll allow more\n  let tags = Array.from(term.tags)\n  for (let k = 0; k < tags.length; k += 1) {\n    if (model.one.tagSet[tags[k]]) {\n      let toAdd = model.one.tagSet[tags[k]].parents\n      fastTag(term, toAdd, ` -inferred by #${tags[k]}`)\n    }\n  }\n  // turn 'Noun' into Plural/Singular\n  setPluralSingular(term)\n  // turn 'Verb' into Present/PastTense\n  setTense(term, model)\n}\nexport default fillTags\n", "import fastTag from '../_fastTag.js'\nimport fillTags from '../3rd-pass/_fillTags.js'\n\nconst titleCase = /^\\p{Lu}[\\p{Ll}'’]/u\nconst hasNumber = /[0-9]/\nconst notProper = ['Date', 'Month', 'WeekDay', 'Unit', 'Expression']\n\n// roman numeral by regex\nconst hasIVX = /[IVX]/ // does it ~look like~ a roman numeral?\n// quick-version\nconst romanNumeral = /^[IVXLCDM]{2,}$/\n// https://stackoverflow.com/a/267405/168877\nconst romanNumValid = /^M{0,4}(CM|CD|D?C{0,3})(XC|XL|L?X{0,3})(IX|IV|V?I{0,3})$/\nconst nope = {\n  li: true,\n  dc: true,\n  md: true,\n  dm: true,\n  ml: true,\n}\n\n// if it's a unknown titlecase word, it's a propernoun\nconst checkCase = function (terms, i, model) {\n  let term = terms[i]\n  // assume terms are already indexed\n  term.index = term.index || [0, 0]\n  let index = term.index[1]\n  let str = term.text || '' //need case info\n  // titlecase and not first word of sentence\n  if (index !== 0 && titleCase.test(str) === true && hasNumber.test(str) === false) {\n    // skip Dates and stuff\n    if (notProper.find(tag => term.tags.has(tag))) {\n      return null\n    }\n    // first word in a quotation?\n    if (term.pre.match(/[\"']$/)) {\n      return null\n    }\n    if (term.normal === 'the') {\n      return null\n    }\n    fillTags(terms, i, model)\n    if (!term.tags.has('Noun') && !term.frozen) {\n      term.tags.clear()\n    }\n    fastTag(term, 'ProperNoun', '2-titlecase')\n    return true\n  }\n  //roman numberals - XVII\n  if (str.length >= 2 && romanNumeral.test(str) && hasIVX.test(str) && romanNumValid.test(str) && !nope[term.normal]) {\n    fastTag(term, 'RomanNumeral', '2-xvii')\n    return true\n  }\n\n  return null\n}\nexport default checkCase\n", "import fastTag from '../_fastTag.js'\n\n//sweep-through all suffixes\nconst suffixLoop = function (str = '', suffixes = []) {\n  const len = str.length\n  let max = 7\n  if (len <= max) {\n    max = len - 1\n  }\n  for (let i = max; i > 1; i -= 1) {\n    let suffix = str.substring(len - i, len)\n    if (suffixes[suffix.length].hasOwnProperty(suffix) === true) {\n      // console.log(suffix)\n      let tag = suffixes[suffix.length][suffix]\n      return tag\n    }\n  }\n  return null\n}\n\n// decide tag from the ending of the word\nconst tagBySuffix = function (terms, i, model) {\n  let term = terms[i]\n  if (term.tags.size === 0) {\n    let tag = suffixLoop(term.normal, model.two.suffixPatterns)\n    if (tag !== null) {\n      fastTag(term, tag, '2-suffix')\n      term.confidence = 0.7\n      return true\n    }\n    // try implicit form of word, too\n    if (term.implicit) {\n      tag = suffixLoop(term.implicit, model.two.suffixPatterns)\n      if (tag !== null) {\n        fastTag(term, tag, '2-implicit-suffix')\n        term.confidence = 0.7\n        return true\n      }\n    }\n    // Infinitive suffix + 's' can be PresentTense\n    // if (term.normal[term.normal.length - 1] === 's') {\n    //   let str = term.normal.replace(/s$/, '')\n    //   if (suffixLoop(str, model.two.suffixPatterns) === 'Infinitive') {\n    //     console.log(str)\n    //     fastTag(term, 'PresentTense', '2-implied-present')\n    //     term.confidence = 0.5\n    //     return true\n    //   }\n    // }\n  }\n  return null\n}\nexport default tagBySuffix\n", "const hasApostrophe = /['‘’‛‵′`´]/\n\n// normal regexes\nconst doRegs = function (str, regs) {\n  for (let i = 0; i < regs.length; i += 1) {\n    if (regs[i][0].test(str) === true) {\n      return regs[i]\n    }\n  }\n  return null\n}\n// suffix-regexes, indexed by last-character\nconst doEndsWith = function (str = '', byEnd) {\n  let char = str[str.length - 1]\n  if (byEnd.hasOwnProperty(char) === true) {\n    let regs = byEnd[char] || []\n    for (let r = 0; r < regs.length; r += 1) {\n      if (regs[r][0].test(str) === true) {\n        return regs[r]\n      }\n    }\n  }\n  return null\n}\n\nconst checkRegex = function (terms, i, model, world) {\n  const setTag = world.methods.one.setTag\n  let { regexText, regexNormal, regexNumbers, endsWith } = model.two\n  let term = terms[i]\n  let normal = term.machine || term.normal\n  let text = term.text\n  // keep dangling apostrophe?\n  if (hasApostrophe.test(term.post) && !hasApostrophe.test(term.pre)) {\n    text += term.post.trim()\n  }\n  let arr = doRegs(text, regexText) || doRegs(normal, regexNormal)\n  // hide a bunch of number regexes behind this one\n  if (!arr && /[0-9]/.test(normal)) {\n    arr = doRegs(normal, regexNumbers)\n  }\n  // only run endsWith if we're desperate\n  if (!arr && term.tags.size === 0) {\n    arr = doEndsWith(normal, endsWith)\n  }\n  if (arr) {\n    // console.log(arr)\n    setTag([term], arr[1], world, null, `2-regex-'${arr[2] || arr[0]}'`)\n    term.confidence = 0.6\n    return true\n  }\n  return null\n}\nexport default checkRegex\n", "import fastTag from '../_fastTag.js'\n// const prefixes = /^(anti|re|un|non|extra|inter|intra|over)([a-z-]{3})/\n\n//sweep-through all prefixes\nconst prefixLoop = function (str = '', prefixes = []) {\n  const len = str.length\n  let max = 7\n  if (max > len - 3) {\n    max = len - 3\n  }\n  for (let i = max; i > 2; i -= 1) {\n    let prefix = str.substring(0, i)\n    if (prefixes[prefix.length].hasOwnProperty(prefix) === true) {\n      let tag = prefixes[prefix.length][prefix]\n      return tag\n    }\n  }\n  return null\n}\n\n// give 'overwork' the same tag as 'work'\nconst checkPrefix = function (terms, i, model) {\n  let term = terms[i]\n  if (term.tags.size === 0) {\n    let tag = prefixLoop(term.normal, model.two.prefixPatterns)\n    if (tag !== null) {\n      // console.log(term.normal, '->', tag)\n      fastTag(term, tag, '2-prefix')\n      term.confidence = 0.5\n      return true\n    }\n  }\n  return null\n}\nexport default checkPrefix\n", "import fastTag from '../_fastTag.js'\nconst min = 1400\nconst max = 2100\n\nconst dateWords = new Set([\n  'in',\n  'on',\n  'by',\n  'until',\n  'for',\n  'to',\n  'during',\n  'throughout',\n  'through',\n  'within',\n  'before',\n  'after',\n  'of',\n  'this',\n  'next',\n  'last',\n  'circa',\n  'around',\n  'post',\n  'pre',\n  'budget',\n  'classic',\n  'plan',\n  'may',\n])\n\nconst seemsGood = function (term) {\n  if (!term) {\n    return false\n  }\n  let str = term.normal || term.implicit\n  if (dateWords.has(str)) {\n    return true\n  }\n  if (term.tags.has('Date') || term.tags.has('Month') || term.tags.has('WeekDay') || term.tags.has('Year')) {\n    return true\n  }\n  // 1999 Film Festival\n  if (term.tags.has('ProperNoun')) {\n    return true\n  }\n  return false\n}\n\nconst seemsOkay = function (term) {\n  if (!term) {\n    return false\n  }\n  if (term.tags.has('Ordinal')) {\n    return true\n  }\n  // untagged 'june 13 2007'\n  if (term.tags.has('Cardinal') && term.normal.length < 3) {\n    return true\n  }\n  // 2020 was ..\n  if (term.normal === 'is' || term.normal === 'was') {\n    return true\n  }\n  return false\n}\n\nconst seemsFine = function (term) {\n  return term && (term.tags.has('Date') || term.tags.has('Month') || term.tags.has('WeekDay') || term.tags.has('Year'))\n}\n\n// recognize '1993' as a year\nconst tagYear = function (terms, i) {\n  const term = terms[i]\n  if (term.tags.has('NumericValue') && term.tags.has('Cardinal') && term.normal.length === 4) {\n    let num = Number(term.normal)\n    // number between 1400 and 2100\n    if (num && !isNaN(num)) {\n      if (num > min && num < max) {\n        let lastTerm = terms[i - 1]\n        let nextTerm = terms[i + 1]\n        if (seemsGood(lastTerm) || seemsGood(nextTerm)) {\n          return fastTag(term, 'Year', '2-tagYear')\n        }\n        // or is it really-close to a year?\n        if (num >= 1920 && num < 2025) {\n          // look at neighbours\n          if (seemsOkay(lastTerm) || seemsOkay(nextTerm)) {\n            return fastTag(term, 'Year', '2-tagYear-close')\n          }\n          // look at far-neighbours\n          if (seemsFine(terms[i - 2]) || seemsFine(terms[i + 2])) {\n            return fastTag(term, 'Year', '2-tagYear-far')\n          }\n          // 'the 2002 hit', 'my 1950 convertable'\n          if (lastTerm && (lastTerm.tags.has('Determiner') || lastTerm.tags.has('Possessive'))) {\n            if (nextTerm && nextTerm.tags.has('Noun') && !nextTerm.tags.has('Plural')) {\n              return fastTag(term, 'Year', '2-tagYear-noun')\n            }\n          }\n        }\n      }\n    }\n  }\n  return null\n}\n\nexport default tagYear\n", "const verbType = function (terms, i, model, world) {\n  const setTag = world.methods.one.setTag\n  const term = terms[i]\n  const types = ['PastTense', 'PresentTense', 'Auxiliary', 'Modal', 'Particle']\n  if (term.tags.has('Verb')) {\n    let type = types.find(typ => term.tags.has(typ))\n    // is it a bare #Verb tag?\n    if (!type) {\n      setTag([term], 'Infinitive', world, null, `2-verb-type''`)\n    }\n  }\n}\nexport default verbType", "import fastTag from '../_fastTag.js'\n\nconst oneLetterAcronym = /^[A-Z]('s|,)?$/\nconst isUpperCase = /^[A-Z-]+$/\nconst upperThenS = /^[A-Z]+s$/\nconst periodAcronym = /([A-Z]\\.)+[A-Z]?,?$/\nconst noPeriodAcronym = /[A-Z]{2,}('s|,)?$/\nconst lowerCaseAcronym = /([a-z]\\.)+[a-z]\\.?$/\n\nconst oneLetterWord = {\n  I: true,\n  A: true,\n}\n\n// only assume these are places if they are uppercased\nconst places = {\n  la: true,\n  ny: true,\n  us: true,\n  dc: true,\n  gb: true,\n}\n\n// just uppercase acronyms, no periods - 'UNOCHA'\nconst isNoPeriodAcronym = function (term, model) {\n  let str = term.text\n  // ensure it's all upper-case\n  if (isUpperCase.test(str) === false) {\n    // allow lower-case plural - 'MMVAs'\n    if (str.length > 3 && upperThenS.test(str) === true) {\n      str = str.replace(/s$/, '')\n    } else {\n      return false\n    }\n  }\n  // long capitalized words are not usually either\n  if (str.length > 5) {\n    return false\n  }\n  // 'I' is not a acronym\n  if (oneLetterWord.hasOwnProperty(str)) {\n    return false\n  }\n  // known-words, like 'PIZZA' is not an acronym.\n  if (model.one.lexicon.hasOwnProperty(term.normal)) {\n    return false\n  }\n  //like N.D.A\n  if (periodAcronym.test(str) === true) {\n    return true\n  }\n  //like c.e.o\n  if (lowerCaseAcronym.test(str) === true) {\n    return true\n  }\n  //like 'F.'\n  if (oneLetterAcronym.test(str) === true) {\n    return true\n  }\n  //like NDA\n  if (noPeriodAcronym.test(str) === true) {\n    return true\n  }\n  return false\n}\n\nconst isAcronym = function (terms, i, model) {\n  let term = terms[i]\n  //these are not acronyms\n  if (term.tags.has('RomanNumeral') || term.tags.has('Acronym') || term.frozen) {\n    return null\n  }\n  //non-period ones are harder\n  if (isNoPeriodAcronym(term, model)) {\n    term.tags.clear()\n    fastTag(term, ['Acronym', 'Noun'], '3-no-period-acronym')\n    // ny, la\n    if (places[term.normal] === true) {\n      fastTag(term, 'Place', '3-place-acronym')\n    }\n    // UFOs\n    if (upperThenS.test(term.text) === true) {\n      fastTag(term, 'Plural', '3-plural-acronym')\n    }\n    // if(term.normal\n    return true\n  }\n  // one-letter acronyms\n  if (!oneLetterWord.hasOwnProperty(term.text) && oneLetterAcronym.test(term.text)) {\n    term.tags.clear()\n    fastTag(term, ['Acronym', 'Noun'], '3-one-letter-acronym')\n    return true\n  }\n  //if it's a very-short organization?\n  if (term.tags.has('Organization') && term.text.length <= 3) {\n    fastTag(term, 'Acronym', '3-org-acronym')\n    return true\n  }\n  // upper-case org, like UNESCO\n  if (term.tags.has('Organization') && isUpperCase.test(term.text) && term.text.length <= 6) {\n    fastTag(term, 'Acronym', '3-titlecase-acronym')\n    return true\n  }\n  return null\n}\nexport default isAcronym\n", "import fastTag from '../_fastTag.js'\nimport fillTag from './_fillTags.js'\n\nconst lookAtWord = function (term, words) {\n  if (!term) {\n    return null\n  }\n  // look at prev word <-\n  let found = words.find(a => term.normal === a[0])\n  if (found) {\n    return found[1]\n  }\n  return null\n}\n\nconst lookAtTag = function (term, tags) {\n  if (!term) {\n    return null\n  }\n  let found = tags.find(a => term.tags.has(a[0]))\n  if (found) {\n    return found[1]\n  }\n  return null\n}\n\n// look at neighbours for hints on unknown words\nconst neighbours = function (terms, i, model) {\n  const { leftTags, leftWords, rightWords, rightTags } = model.two.neighbours\n  let term = terms[i]\n  if (term.tags.size === 0) {\n    let tag = null\n    // look left <-\n    tag = tag || lookAtWord(terms[i - 1], leftWords)\n    // look right ->\n    tag = tag || lookAtWord(terms[i + 1], rightWords)\n    // look left <-\n    tag = tag || lookAtTag(terms[i - 1], leftTags)\n    // look right ->\n    tag = tag || lookAtTag(terms[i + 1], rightTags)\n    if (tag) {\n      fastTag(term, tag, '3-[neighbour]')\n      fillTag(terms, i, model)\n      terms[i].confidence = 0.2\n      return true\n    }\n  }\n  return null\n}\nexport default neighbours\n", "const isTitleCase = (str) => /^\\p{Lu}[\\p{Ll}'’]/u.test(str)\n\nconst isOrg = function (term, i, yelling) {\n  if (!term) {\n    return false\n  }\n  if (term.tags.has('FirstName') || term.tags.has('Place')) {\n    return false\n  }\n  if (term.tags.has('ProperNoun') || term.tags.has('Organization') || term.tags.has('Acronym')) {\n    return true\n  }\n  // allow anything titlecased to be an org\n  if (!yelling && isTitleCase(term.text)) {\n    // only tag a titlecased first-word, if it checks-out\n    if (i === 0) {\n      return term.tags.has('Singular')\n    }\n    return true\n  }\n  return false\n}\n\nconst tagOrgs = function (terms, i, world, yelling) {\n  const orgWords = world.model.two.orgWords\n  const setTag = world.methods.one.setTag\n  let term = terms[i]\n  let str = term.machine || term.normal\n  if (orgWords[str] === true && isOrg(terms[i - 1], i - 1, yelling)) {\n    setTag([terms[i]], 'Organization', world, null, '3-[org-word]')\n    // loop backwards, tag organization-like things\n    for (let t = i; t >= 0; t -= 1) {\n      if (isOrg(terms[t], t, yelling)) {\n        setTag([terms[t]], 'Organization', world, null, '3-[org-word]')\n      } else {\n        break\n      }\n    }\n  }\n  return null\n}\nexport default tagOrgs", "const isTitleCase = str => /^\\p{Lu}[\\p{Ll}'’]/u.test(str)\nconst isPossessive = /'s$/\n\n// words that can fit inside a place\nconst placeCont = new Set([\n  'athletic',\n  'city',\n  'community',\n  'eastern',\n  'federal',\n  'financial',\n  'great',\n  'historic',\n  'historical',\n  'local',\n  'memorial',\n  'municipal',\n  'national',\n  'northern',\n  'provincial',\n  'southern',\n  'state',\n  'western',\n  'spring',\n  'pine',\n  'sunset',\n  'view',\n  'oak',\n  'maple',\n  'spruce',\n  'cedar',\n  'willow',\n])\n// center of...\nconst noBefore = new Set(['center', 'centre', 'way', 'range', 'bar', 'bridge', 'field', 'pit'])\n\nconst isPlace = function (term, i, yelling) {\n  if (!term) {\n    return false\n  }\n  let tags = term.tags\n  if (tags.has('Organization') || tags.has('Possessive') || isPossessive.test(term.normal)) {\n    return false\n  }\n  if (tags.has('ProperNoun') || tags.has('Place')) {\n    return true\n  }\n  // allow anything titlecased to be an org\n  if (!yelling && isTitleCase(term.text)) {\n    // only tag a titlecased first-word, if it checks-out\n    if (i === 0) {\n      return tags.has('Singular')\n    }\n    return true\n  }\n  return false\n}\n\nconst tagOrgs = function (terms, i, world, yelling) {\n  const placeWords = world.model.two.placeWords\n  const setTag = world.methods.one.setTag\n  let term = terms[i]\n  let str = term.machine || term.normal\n\n  // 'river', delta, street, etc\n  if (placeWords[str] === true) {\n    //loop backward - 'Foo River ...'\n    for (let n = i - 1; n >= 0; n -= 1) {\n      // 'municipal ...'\n      if (placeCont.has(terms[n].normal)) {\n        continue\n      }\n      if (isPlace(terms[n], n, yelling)) {\n        setTag(terms.slice(n, i + 1), 'Place', world, null, '3-[place-of-foo]')\n        continue\n      }\n      break\n    }\n    //loop forward - 'River of Foo...'\n    // 'center of x'\n    if (noBefore.has(str)) {\n      return false\n    }\n    for (let n = i + 1; n < terms.length; n += 1) {\n      if (isPlace(terms[n], n, yelling)) {\n        setTag(terms.slice(i, n + 1), 'Place', world, null, '3-[foo-place]')\n        return true\n      }\n      // 'municipal ...'\n      if (terms[n].normal === 'of' || placeCont.has(terms[n].normal)) {\n        continue\n      }\n      break\n    }\n  }\n  return null\n}\nexport default tagOrgs\n", "import fastTag from '../_fastTag.js'\nimport fillTag from './_fillTags.js'\n\nconst nounFallback = function (terms, i, model) {\n  let isEmpty = false\n  let tags = terms[i].tags\n  if (tags.size === 0) {\n    isEmpty = true\n  } else if (tags.size === 1) {\n    // weaker tags to ignore\n    if (tags.has('Hyphenated') || tags.has('HashTag') || tags.has('Prefix') || tags.has('SlashedTerm')) {\n      isEmpty = true\n    }\n  }\n  if (isEmpty) {\n    fastTag(terms[i], 'Noun', '3-[fallback]')\n    // try to give it singluar/plural tags, too\n    fillTag(terms, i, model)\n    terms[i].confidence = 0.1\n  }\n}\nexport default nounFallback\n", "const isTitleCase = /^[A-Z][a-z]/\n\nconst isCapital = (terms, i) => {\n  if (terms[i].tags.has('ProperNoun') && isTitleCase.test(terms[i].text)) {// 'Comfort Inn'\n    return 'Noun'\n  }\n  return null\n}\n\nconst isAlone = (terms, i, tag) => {\n  if (i === 0 && !terms[1]) {// 'Help'\n    return tag\n  }\n  return null\n}\n\n// 'a rental'\nconst isEndNoun = function (terms, i) {\n  if (!terms[i + 1] && terms[i - 1] && terms[i - 1].tags.has('Determiner')) {\n    return 'Noun'\n  }\n  return null\n}\n\n// the first word in the sentence\nconst isStart = function (terms, i, tag) {\n  if (i === 0 && terms.length > 3) {\n    return tag\n  }\n  return null\n}\n\nconst adhoc = {\n  'Adj|Gerund': (terms, i) => {\n    return isCapital(terms, i)\n  },\n  'Adj|Noun': (terms, i) => {\n    return isCapital(terms, i) || isEndNoun(terms, i)\n  },\n  'Actor|Verb': (terms, i) => {\n    return isCapital(terms, i)\n  },\n  'Adj|Past': (terms, i) => {\n    return isCapital(terms, i)\n  },\n  'Adj|Present': (terms, i) => {\n    return isCapital(terms, i)\n  },\n  'Noun|Gerund': (terms, i) => {\n    return isCapital(terms, i)\n  },\n  'Noun|Verb': (terms, i) => {\n    return (i > 0 && isCapital(terms, i)) || isAlone(terms, i, 'Infinitive')\n  },\n  'Plural|Verb': (terms, i) => {\n    return isCapital(terms, i) || isAlone(terms, i, 'PresentTense') || isStart(terms, i, 'Plural')\n  },\n  'Person|Noun': (terms, i) => {\n    return isCapital(terms, i)\n  },\n  'Person|Verb': (terms, i) => {\n    if (i !== 0) {\n      return isCapital(terms, i)\n    }\n    return null\n  },\n  'Person|Adj': (terms, i) => {\n    if (i === 0 && terms.length > 1) {\n      return 'Person'\n    }\n    return isCapital(terms, i) ? 'Person' : null\n  },\n}\nexport default adhoc", "/* eslint-disable no-console */\nimport fillTags from './_fillTags.js'\nconst env = typeof process === 'undefined' || !process.env ? self.env || {} : process.env\nimport adhoc from './_adhoc.js'\nconst prefix = /^(under|over|mis|re|un|dis|semi)-?/\n\nconst checkWord = (term, obj) => {\n  if (!term || !obj) {\n    return null\n  }\n  let str = term.normal || term.implicit\n  let found = null\n  if (obj.hasOwnProperty(str)) {\n    found = obj[str]\n  }\n  if (found && env.DEBUG_TAGS) {\n    console.log(`\\n  \\x1b[2m\\x1b[3m     ↓ - '${str}' \\x1b[0m`)\n  }\n  return found\n}\n\nconst checkTag = (term, obj = {}, tagSet) => {\n  if (!term || !obj) {\n    return null\n  }\n  // rough sort, so 'Noun' is after ProperNoun, etc\n  let tags = Array.from(term.tags).sort((a, b) => {\n    let numA = tagSet[a] ? tagSet[a].parents.length : 0\n    let numB = tagSet[b] ? tagSet[b].parents.length : 0\n    return numA > numB ? -1 : 1\n  })\n  let found = tags.find(tag => obj[tag])\n  if (found && env.DEBUG_TAGS) {\n    console.log(`  \\x1b[2m\\x1b[3m      ↓ - '${term.normal || term.implicit}' (#${found})  \\x1b[0m`)\n  }\n  found = obj[found]\n  return found\n}\n\nconst pickTag = function (terms, i, clues, model) {\n  if (!clues) {\n    return null\n  }\n  const beforeIndex = terms[i - 1]?.text !== 'also' ? i - 1 : Math.max(0, i - 2)\n  const tagSet = model.one.tagSet\n  // look -> right word, first\n  let tag = checkWord(terms[i + 1], clues.afterWords)\n  // look <- left word, second\n  tag = tag || checkWord(terms[beforeIndex], clues.beforeWords)\n  // look <- left tag\n  tag = tag || checkTag(terms[beforeIndex], clues.beforeTags, tagSet)\n  // look -> right tag\n  tag = tag || checkTag(terms[i + 1], clues.afterTags, tagSet)\n  // console.log(clues)\n  return tag\n}\n\n// words like 'bob' that can change between two tags\nconst doSwitches = function (terms, i, world) {\n  const model = world.model\n  const setTag = world.methods.one.setTag\n  const { switches, clues } = model.two\n  const term = terms[i]\n  let str = term.normal || term.implicit || ''\n  // support prefixes for switching words\n  if (prefix.test(str) && !switches[str]) {\n    str = str.replace(prefix, '') // could use some guards, here\n  }\n  if (term.switch) {\n    let form = term.switch\n    // skip propernouns, acronyms, etc\n    if (term.tags.has('Acronym') || term.tags.has('PhrasalVerb')) {\n      return\n    }\n    let tag = pickTag(terms, i, clues[form], model)\n    // lean-harder on some variable forms\n    if (adhoc[form]) {\n      tag = adhoc[form](terms, i) || tag\n    }\n    // did we find anything?\n    if (tag) {\n      // tag it\n      setTag([term], tag, world, null, `3-[switch] (${form})`)\n      // add plural/singular etc.\n      fillTags(terms, i, model)\n    } else if (env.DEBUG_TAGS) {\n      console.log(`\\n -> X  - '${str}'  : (${form})  `)\n    }\n  }\n}\nexport default doSwitches\n", "const beside = {\n  there: true, //go there\n  this: true, //try this\n  it: true, //do it\n  him: true,\n  her: true,\n  us: true, //tell us\n}\n\n// '[place] tea bags in hot water'\nconst imperative = function (terms, world) {\n  const setTag = world.methods.one.setTag\n  const multiWords = world.model.one._multiCache || {}\n  let t = terms[0]\n  let isRight = t.switch === 'Noun|Verb' || t.tags.has('Infinitive')\n  if (isRight && terms.length >= 2) {\n    // ensure rest of sentence is ok\n    if (terms.length < 4 && !beside[terms[1].normal]) {\n      return\n    }\n    // avoid multi-noun words like '[board] room'\n    if (!t.tags.has('PhrasalVerb') && multiWords.hasOwnProperty(t.normal)) {\n      return\n    }\n    // is the next word a noun? - 'compile information ..'\n    let nextNoun = terms[1].tags.has('Noun') || terms[1].tags.has('Determiner')\n    if (nextNoun) {\n      // ensure no soon-verb -  'waste materials are ..'\n      let soonVerb = terms.slice(1, 3).some(term => term.tags.has('Verb'))\n      if (!soonVerb || t.tags.has('#PhrasalVerb')) {\n        setTag([t], 'Imperative', world, null, '3-[imperative]')\n      }\n    }\n  }\n}\nexport default imperative\n", "import colons from './1st-pass/01-colons.js'\nimport hyphens from './1st-pass/02-hyphens.js'\n\nimport tagSwitch from './2nd-pass/00-tagSwitch.js'\nimport checkCase from './2nd-pass/01-case.js'\nimport checkSuffix from './2nd-pass/02-suffix.js'\nimport checkRegex from './2nd-pass/03-regex.js'\nimport checkPrefix from './2nd-pass/04-prefix.js'\nimport checkYear from './2nd-pass/05-year.js'\nimport verbType from './3rd-pass/07-verb-type.js'\n\nimport fillTags from './3rd-pass/_fillTags.js'\nimport checkAcronym from './3rd-pass/01-acronym.js'\nimport neighbours from './3rd-pass/02-neighbours.js'\nimport orgWords from './3rd-pass/03-orgWords.js'\nimport placeWords from './3rd-pass/04-placeWords.js'\nimport nounFallback from './3rd-pass/05-fallback.js'\nimport switches from './3rd-pass/06-switches.js'\nimport imperative from './3rd-pass/08-imperative.js'\n\n// is it all yelling-case?\nconst ignoreCase = function (terms) {\n  // allow 'John F Kennedy'\n  if (terms.filter(t => !t.tags.has('ProperNoun')).length <= 3) {\n    return false\n  }\n  const lowerCase = /^[a-z]/\n  return terms.every(t => !lowerCase.test(t.text))\n}\n\n// taggers with no clause-splitting\nconst firstPass = function (docs, model, world) {\n  docs.forEach(terms => {\n    // check whitespace/punctuation\n    colons(terms, 0, model, world)\n  })\n}\n\n// these methods don't care about word-neighbours\nconst secondPass = function (terms, model, world, isYelling) {\n  for (let i = 0; i < terms.length; i += 1) {\n    // skip frozen terms, for now\n    if (terms[i].frozen === true) {\n      continue\n    }\n    // mark Noun|Verb on term metadata\n    tagSwitch(terms, i, model)\n    //  is it titlecased?\n    if (isYelling === false) {\n      checkCase(terms, i, model)\n    }\n    // look at word ending\n    checkSuffix(terms, i, model)\n    // try look-like rules\n    checkRegex(terms, i, model, world)\n    // check for recognized prefix, like 'micro-'\n    checkPrefix(terms, i, model)\n    // turn '1993' into a year\n    checkYear(terms, i, model)\n  }\n}\n\n// neighbour-based tagging\nconst thirdPass = function (terms, model, world, isYelling) {\n  for (let i = 0; i < terms.length; i += 1) {\n    // let these tags get layered\n    let found = checkAcronym(terms, i, model)\n    // deduce parent tags\n    fillTags(terms, i, model)\n    // look left+right for hints\n    found = found || neighbours(terms, i, model)\n    //  ¯\\_(ツ)_/¯ - found nothing\n    found = found || nounFallback(terms, i, model)\n  }\n  for (let i = 0; i < terms.length; i += 1) {\n    // skip these\n    if (terms[i].frozen === true) {\n      continue\n    }\n    // Johnson LLC\n    orgWords(terms, i, world, isYelling)\n    // Wawel Castle\n    placeWords(terms, i, world, isYelling)\n    // verb-noun disambiguation, etc\n    switches(terms, i, world)\n    // give bare verbs more tags\n    verbType(terms, i, model, world)\n    // hard-nosed\n    hyphens(terms, i, model, world)\n  }\n  // place tea bags\n  imperative(terms, world)\n}\n\nconst preTagger = function (view) {\n  const { methods, model, world } = view\n  let docs = view.docs\n  // try some early stuff\n  firstPass(docs, model, world)\n  // roughly split sentences up by clause\n  let document = methods.two.quickSplit(docs)\n  // start with all terms\n  for (let n = 0; n < document.length; n += 1) {\n    let terms = document[n]\n    // is it all upper-case?\n    const isYelling = ignoreCase(terms)\n    // guess by the letters\n    secondPass(terms, model, world, isYelling)\n    // guess by the neighbours\n    thirdPass(terms, model, world, isYelling)\n  }\n  return document\n}\n\nexport default preTagger\n", "const toRoot = {\n  // 'spencer's' -> 'spencer'\n  'Possessive': (term) => {\n    let str = term.machine || term.normal || term.text\n    str = str.replace(/'s$/, '')\n    return str\n  },\n  // 'drinks' -> 'drink'\n  'Plural': (term, world) => {\n    let str = term.machine || term.normal || term.text\n    return world.methods.two.transform.noun.toSingular(str, world.model)\n  },\n  // ''\n  'Copula': () => {\n    return 'is'\n  },\n  // 'walked' -> 'walk'\n  'PastTense': (term, world) => {\n    let str = term.machine || term.normal || term.text\n    return world.methods.two.transform.verb.toInfinitive(str, world.model, 'PastTense')\n  },\n  // 'walking' -> 'walk'\n  'Gerund': (term, world) => {\n    let str = term.machine || term.normal || term.text\n    return world.methods.two.transform.verb.toInfinitive(str, world.model, 'Gerund')\n  },\n  // 'walks' -> 'walk'\n  'PresentTense': (term, world) => {\n    let str = term.machine || term.normal || term.text\n    if (term.tags.has('Infinitive')) {\n      return str\n    }\n    return world.methods.two.transform.verb.toInfinitive(str, world.model, 'PresentTense')\n  },\n  // 'quieter' -> 'quiet'\n  'Comparative': (term, world) => {\n    let str = term.machine || term.normal || term.text\n    return world.methods.two.transform.adjective.fromComparative(str, world.model)\n  },\n  // 'quietest' -> 'quiet'\n  'Superlative': (term, world) => {\n    let str = term.machine || term.normal || term.text\n    return world.methods.two.transform.adjective.fromSuperlative(str, world.model)\n  },\n  // 'suddenly' -> 'sudden'\n  'Adverb': (term, world) => {\n    const { fromAdverb } = world.methods.two.transform.adjective\n    let str = term.machine || term.normal || term.text\n    return fromAdverb(str)\n  },\n}\n\nconst getRoot = function (view) {\n  const world = view.world\n  const keys = Object.keys(toRoot)\n  view.docs.forEach(terms => {\n    for (let i = 0; i < terms.length; i += 1) {\n      const term = terms[i]\n      for (let k = 0; k < keys.length; k += 1) {\n        if (term.tags.has(keys[k])) {\n          const fn = toRoot[keys[k]]\n          let root = fn(term, world)\n          if (term.normal !== root) {\n            term.root = root\n          }\n          break\n        }\n      }\n    }\n  })\n}\nexport default getRoot", "// rough connection between compromise tagset and Penn Treebank\n// https://www.ling.upenn.edu/courses/Fall_2003/ling001/penn_treebank_pos.html\n\nconst mapping = {\n  // adverbs\n  // 'Comparative': 'RBR',\n  // 'Superlative': 'RBS',\n  Adverb: 'RB',\n\n  // adjectives\n  Comparative: 'JJR',\n  Superlative: 'JJS',\n  Adjective: 'JJ',\n  TO: 'Conjunction',\n\n  // verbs\n  Modal: 'MD',\n  Auxiliary: 'MD',\n  Gerund: 'VBG', //throwing\n  PastTense: 'VBD', //threw\n  Participle: 'VBN', //thrown\n  PresentTense: 'VBZ', //throws\n  Infinitive: 'VB', //throw\n  Particle: 'RP', //phrasal particle\n  Verb: 'VB', // throw\n\n  // pronouns\n  Pronoun: 'PRP',\n\n  // misc\n  Cardinal: 'CD',\n  Conjunction: 'CC',\n  Determiner: 'DT',\n  Preposition: 'IN',\n  // 'Determiner': 'WDT',\n  // 'Expression': 'FW',\n  QuestionWord: 'WP',\n  Expression: 'UH',\n\n  //nouns\n  Possessive: 'POS',\n  ProperNoun: 'NNP',\n  Person: 'NNP',\n  Place: 'NNP',\n  Organization: 'NNP',\n  Singular: 'NN',\n  Plural: 'NNS',\n  Noun: 'NN',\n\n  There: 'EX', //'there'\n  // 'Adverb':'WRB',\n  // 'Noun':'PDT', //predeterminer\n  // 'Noun':'SYM', //symbol\n  // 'Noun':'NFP', //\n\n  //  WDT \tWh-determiner\n  // \tWP \tWh-pronoun\n  // \tWP$ \tPossessive wh-pronoun\n  // \tWRB \tWh-adverb\n}\n\nconst toPenn = function (term) {\n  // try some ad-hoc ones\n  if (term.tags.has('ProperNoun') && term.tags.has('Plural')) {\n    return 'NNPS'\n  }\n  if (term.tags.has('Possessive') && term.tags.has('Pronoun')) {\n    return 'PRP$'\n  }\n  if (term.normal === 'there') {\n    return 'EX'\n  }\n  if (term.normal === 'to') {\n    return 'TO'\n  }\n  // run through an ordered list of tags\n  let arr = term.tagRank || []\n  for (let i = 0; i < arr.length; i += 1) {\n    if (mapping.hasOwnProperty(arr[i])) {\n      return mapping[arr[i]]\n    }\n  }\n  return null\n}\n\nconst pennTag = function (view) {\n  view.compute('tagRank')\n  view.docs.forEach(terms => {\n    terms.forEach(term => {\n      term.penn = toPenn(term)\n    })\n  })\n}\nexport default pennTag\n", "import preTagger from './tagger/index.js'\nimport root from './root.js'\nimport penn from './penn.js'\n\nexport default { preTagger, root, penn }\n", "const entity = ['Person', 'Place', 'Organization']\n\nexport default {\n  Noun: {\n    not: ['Verb', 'Adjective', 'Adverb', 'Value', 'Determiner'],\n  },\n  Singular: {\n    is: 'Noun',\n    not: ['Plural', 'Uncountable'],\n  },\n  // 'Canada'\n  ProperNoun: {\n    is: 'Noun',\n  },\n  Person: {\n    is: 'Singular',\n    also: ['ProperNoun'],\n    not: ['Place', 'Organization', 'Date'],\n  },\n  FirstName: {\n    is: 'Person',\n  },\n  MaleName: {\n    is: 'FirstName',\n    not: ['FemaleName', 'LastName'],\n  },\n  FemaleName: {\n    is: 'FirstName',\n    not: ['MaleName', 'LastName'],\n  },\n  LastName: {\n    is: 'Person',\n    not: ['FirstName'],\n  },\n  // 'dr.'\n  Honorific: {\n    is: 'Person',\n    not: ['FirstName', 'LastName', 'Value'],\n  },\n  Place: {\n    is: 'Singular',\n    not: ['Person', 'Organization'],\n  },\n  Country: {\n    is: 'Place',\n    also: ['ProperNoun'],\n    not: ['City'],\n  },\n  City: {\n    is: 'Place',\n    also: ['ProperNoun'],\n    not: ['Country'],\n  },\n  // 'california'\n  Region: {\n    is: 'Place',\n    also: ['ProperNoun'],\n  },\n  Address: {\n    // is: 'Place',\n  },\n  Organization: {\n    is: 'ProperNoun',\n    not: ['Person', 'Place'],\n  },\n  SportsTeam: {\n    is: 'Organization',\n  },\n  School: {\n    is: 'Organization',\n  },\n  Company: {\n    is: 'Organization',\n  },\n  Plural: {\n    is: 'Noun',\n    not: ['Singular', 'Uncountable'],\n  },\n  // 'gravity'\n  Uncountable: {\n    is: 'Noun',\n  },\n  // 'it'\n  Pronoun: {\n    is: 'Noun',\n    not: entity,\n  },\n  // 'swimmer'\n  Actor: {\n    is: 'Noun',\n    not: ['Place', 'Organization'],\n  },\n  // walking\n  Activity: {\n    is: 'Noun',\n    not: ['Person', 'Place'],\n  },\n  // kilometres\n  Unit: {\n    is: 'Noun',\n    not: entity,\n  },\n  // canadian\n  Demonym: {\n    is: 'Noun',\n    also: ['ProperNoun'],\n    not: entity,\n  },\n  // [spencer's] hat\n  Possessive: {\n    is: 'Noun',\n  },\n  // 'yourself'\n  Reflexive: {\n    is: 'Pronoun',\n  },\n}\n", "export default {\n  Verb: {\n    not: ['Noun', 'Adjective', 'Adverb', 'Value', 'Expression'],\n  },\n  // 'he [walks]'\n  PresentTense: {\n    is: 'Verb',\n    not: ['PastTense', 'FutureTense'],\n  },\n  // 'will [walk]'\n  Infinitive: {\n    is: 'PresentTense',\n    not: ['Gerund'],\n  },\n  // '[walk] now!'\n  Imperative: {\n    is: 'Verb',\n    not: ['PastTense', 'Gerund', 'Copula'],\n  },\n  // walking\n  Gerund: {\n    is: 'PresentTense',\n    not: ['Copula'],\n  },\n  // walked\n  PastTense: {\n    is: 'Verb',\n    not: ['PresentTense', 'Gerund', 'FutureTense'],\n  },\n  // will walk\n  FutureTense: {\n    is: 'Verb',\n    not: ['PresentTense', 'PastTense'],\n  },\n  // is/was\n  Copula: {\n    is: 'Verb',\n  },\n  // '[could] walk'\n  Modal: {\n    is: 'Verb',\n    not: ['Infinitive'],\n  },\n  // 'awaken'\n  Participle: {\n    is: 'PastTense',\n  },\n  // '[will have had] walked'\n  Auxiliary: {\n    is: 'Verb',\n    not: ['PastTense', 'PresentTense', 'Gerund', 'Conjunction'],\n  },\n  // 'walk out'\n  PhrasalVerb: {\n    is: 'Verb',\n  },\n  // 'walk [out]'\n  Particle: {\n    is: 'PhrasalVerb',\n    not: ['PastTense', 'PresentTense', 'Copula', 'Gerund'],\n  },\n  // 'walked by'\n  Passive: {\n    is: 'Verb',\n  },\n}\n", "export default {\n  Value: {\n    not: ['Verb', 'Adjective', 'Adverb'],\n  },\n  Ordinal: {\n    is: 'Value',\n    not: ['Cardinal'],\n  },\n  Cardinal: {\n    is: 'Value',\n    not: ['Ordinal'],\n  },\n  Fraction: {\n    is: 'Value',\n    not: ['Noun'],\n  },\n  Multiple: {\n    is: 'TextValue',\n  },\n  RomanNumeral: {\n    is: 'Cardinal',\n    not: ['TextValue'],\n  },\n  TextValue: {\n    is: 'Value',\n    not: ['NumericValue'],\n  },\n  NumericValue: {\n    is: 'Value',\n    not: ['TextValue'],\n  },\n  Money: {\n    is: 'Cardinal',\n  },\n  Percent: {\n    is: 'Value',\n  },\n}\n", "export default {\n  Date: {\n    not: ['Verb', 'Adverb', 'Adjective'],\n  },\n  Month: {\n    is: 'Date',\n    also: ['Noun'],\n    not: ['Year', 'WeekDay', 'Time'],\n  },\n  WeekDay: {\n    is: 'Date',\n    also: ['Noun'],\n  },\n  Year: {\n    is: 'Date',\n    not: ['RomanNumeral'],\n  },\n  FinancialQuarter: {\n    is: 'Date',\n    not: 'Fraction',\n  },\n  // 'easter'\n  Holiday: {\n    is: 'Date',\n    also: ['Noun'],\n  },\n  // 'summer'\n  Season: {\n    is: 'Date',\n  },\n  Timezone: {\n    is: 'Date',\n    also: ['Noun'],\n    not: ['ProperNoun'],\n  },\n  Time: {\n    is: 'Date',\n    not: ['AtMention'],\n  },\n  // 'months'\n  Duration: {\n    is: 'Date',\n    also: ['Noun'],\n  },\n}\n", "const anything = ['Noun', 'Verb', 'Adjective', 'Adverb', 'Value', 'QuestionWord']\n\nexport default {\n  Adjective: {\n    not: ['Noun', 'Verb', 'Adverb', 'Value'],\n  },\n  Comparable: {\n    is: 'Adjective',\n  },\n  Comparative: {\n    is: 'Adjective',\n  },\n  Superlative: {\n    is: 'Adjective',\n    not: ['Comparative'],\n  },\n  NumberRange: {},\n  Adverb: {\n    not: ['Noun', 'Verb', 'Adjective', 'Value'],\n  },\n\n  Determiner: {\n    not: ['Noun', 'Verb', 'Adjective', 'Adverb', 'QuestionWord', 'Conjunction'], //allow 'a' to be a Determiner/Value\n  },\n  Conjunction: {\n    not: anything,\n  },\n  Preposition: {\n    not: ['Noun', 'Verb', 'Adjective', 'Adverb', 'QuestionWord', 'Determiner'],\n  },\n  QuestionWord: {\n    not: ['Determiner'],\n  },\n  Currency: {\n    is: 'Noun',\n  },\n  Expression: {\n    not: ['Noun', 'Adjective', 'Verb', 'Adverb'],\n  },\n  Abbreviation: {},\n  Url: {\n    not: ['HashTag', 'PhoneNumber', 'Verb', 'Adjective', 'Value', 'AtMention', 'Email', 'SlashedTerm'],\n  },\n  PhoneNumber: {\n    not: ['HashTag', 'Verb', 'Adjective', 'Value', 'AtMention', 'Email'],\n  },\n  HashTag: {},\n  AtMention: {\n    is: 'Noun',\n    not: ['HashTag', 'Email'],\n  },\n  Emoji: {\n    not: ['HashTag', 'Verb', 'Adjective', 'Value', 'AtMention'],\n  },\n  Emoticon: {\n    not: ['HashTag', 'Verb', 'Adjective', 'Value', 'AtMention', 'SlashedTerm'],\n  },\n  SlashedTerm: {\n    not: ['Emoticon', 'Url', 'Value']\n  },\n  Email: {\n    not: ['HashTag', 'Verb', 'Adjective', 'Value', 'AtMention'],\n  },\n  Acronym: {\n    not: ['Plural', 'RomanNumeral', 'Pronoun', 'Date'],\n  },\n  Negative: {\n    not: ['Noun', 'Adjective', 'Value', 'Expression'],\n  },\n  Condition: {\n    not: ['Verb', 'Adjective', 'Noun', 'Value'],\n  },\n  // existential 'there'\n  There: {\n    not: ['Verb', 'Adjective', 'Noun', 'Value', 'Conjunction', 'Preposition'],\n  },\n  // 'co-wrote'\n  Prefix: {\n    not: ['Abbreviation', 'Acronym', 'ProperNoun'],\n  },\n  // hard-nosed, bone-headed\n  Hyphenated: {},\n}\n", "import nouns from './nouns.js'\nimport verbs from './verbs.js'\nimport values from './values.js'\nimport dates from './dates.js'\nimport misc from './misc.js'\n\nlet allTags = Object.assign({}, nouns, verbs, values, dates, misc)\n// const tagSet = compute(allTags)\nexport default allTags\n", "import model from './model/index.js'\nimport methods from './methods/index.js'\nimport compute from './compute/index.js'\nimport tags from './tagSet/index.js'\n\nexport default {\n  compute,\n  methods,\n  model,\n  tags,\n  hooks: ['preTagger'],\n}\n", "const postPunct = /[,)\"';:\\-–—.…]/\n\nconst setContraction = function (m, suffix) {\n  if (!m.found) {\n    return\n  }\n  let terms = m.termList()\n  //avoid any problematic punctuation\n  for (let i = 0; i < terms.length - 1; i++) {\n    const t = terms[i]\n    if (postPunct.test(t.post)) {\n      return\n    }\n  }\n  // set first word as full text\n  terms[0].implicit = terms[0].normal\n  terms[0].text += suffix\n  terms[0].normal += suffix\n  // clean-up the others\n  terms.slice(1).forEach(t => {\n    t.implicit = t.normal\n    t.text = ''\n    t.normal = ''\n  })\n  for (let i = 0; i < terms.length - 1; i++) {\n    terms[i].post = terms[i].post.replace(/ /, '')\n  }\n}\n\n/** turn 'i am' into i'm */\nconst contract = function () {\n  let doc = this.not('@hasContraction')\n  // we are -> we're\n  let m = doc.match('(we|they|you) are')\n  setContraction(m, `'re`)\n  // they will -> they'll\n  m = doc.match('(he|she|they|it|we|you) will')\n  setContraction(m, `'ll`)\n  // she is -> she's\n  m = doc.match('(he|she|they|it|we) is')\n  setContraction(m, `'s`)\n  // spencer is -> spencer's\n  m = doc.match('#Person is')\n  setContraction(m, `'s`)\n  // spencer would -> spencer'd\n  m = doc.match('#Person would')\n  setContraction(m, `'d`)\n  // would not -> wouldn't\n  m = doc.match('(is|was|had|would|should|could|do|does|have|has|can) not')\n  setContraction(m, `n't`)\n  // i have -> i've\n  m = doc.match('(i|we|they) have')\n  setContraction(m, `'ve`)\n  // would have -> would've\n  m = doc.match('(would|should|could) have')\n  setContraction(m, `'ve`)\n  // i am -> i'm\n  m = doc.match('i am')\n  setContraction(m, `'m`)\n  // going to -> gonna\n  m = doc.match('going to')\n  return this\n}\nexport default contract\n", "const titleCase = /^\\p{Lu}[\\p{Ll}'’]/u //upercase, then lowercase\nimport contract from './contract.js'\n\nconst toTitleCase = function (str = '') {\n  str = str.replace(/^ *[a-z\\u00C0-\\u00FF]/, x => x.toUpperCase()) //TODO: support unicode\n  return str\n}\n\nconst api = function (View) {\n  /** */\n  class Contractions extends View {\n    constructor(document, pointer, groups) {\n      super(document, pointer, groups)\n      this.viewType = 'Contraction'\n    }\n    /** i've -> 'i have' */\n    expand() {\n      this.docs.forEach(terms => {\n        let isTitleCase = titleCase.test(terms[0].text)\n        terms.forEach((t, i) => {\n          t.text = t.implicit || ''\n          delete t.implicit\n          //add whitespace\n          if (i < terms.length - 1 && t.post === '') {\n            t.post += ' '\n          }\n          // flag it as dirty\n          t.dirty = true\n        })\n        // make the first word title-case?\n        if (isTitleCase) {\n          terms[0].text = toTitleCase(terms[0].text)\n        }\n      })\n      this.compute('normal') //re-set normalized text\n      return this\n    }\n  }\n  // add fn to View\n  View.prototype.contractions = function () {\n    let m = this.match('@hasContraction+')\n    return new Contractions(this.document, m.pointer)\n  }\n  View.prototype.contract = contract\n}\n\nexport default api\n", "// put n new words where 1 word was\nconst insertContraction = function (document, point, words) {\n  let [n, w] = point\n  if (!words || words.length === 0) {\n    return\n  }\n  words = words.map((word, i) => {\n    word.implicit = word.text\n    word.machine = word.text\n    word.pre = ''\n    word.post = ''\n    word.text = ''\n    word.normal = ''\n    word.index = [n, w + i]\n    return word\n  })\n  if (words[0]) {\n    // move whitespace over\n    words[0].pre = document[n][w].pre\n    words[words.length - 1].post = document[n][w].post\n    // add the text/normal to the first term\n    words[0].text = document[n][w].text\n    words[0].normal = document[n][w].normal // move tags too?\n  }\n  // do the splice\n  document[n].splice(w, 1, ...words)\n}\nexport default insertContraction\n", "const hasContraction = /'/\n\nconst hasWords = new Set([\n  'been', //the meeting's been ..\n  'become', //my son's become\n])\nconst isWords = new Set([\n  'what', //it's what\n  'how', //it's how\n  'when',\n  'if', //it's if\n  'too',\n])\nlet adjLike = new Set(['too', 'also', 'enough'])\n\n// the big clue is the tense of the following verb\nconst isOrHas = (terms, i) => {\n  // scan ahead for the next verb or adjective\n  for (let o = i + 1; o < terms.length; o += 1) {\n    let t = terms[o]\n    if (hasWords.has(t.normal)) {\n      return 'has'\n    }\n    if (isWords.has(t.normal)) {\n      return 'is'\n    }\n    // the cat's sleeping\n    if (t.tags.has('Gerund')) {\n      return 'is'\n    }\n    // she's the one\n    if (t.tags.has('Determiner')) {\n      return 'is'\n    }\n    // the food's ready\n    if (t.tags.has('Adjective')) {\n      return 'is'\n    }\n    // the car's parked\n    if (t.switch === 'Adj|Past') {\n      if (terms[o + 1]) {\n        // car's parked too ..\n        if (adjLike.has(terms[o + 1].normal)) {\n          return 'is'\n        }\n        // car's parked on ..\n        if (terms[o + 1].tags.has('Preposition')) {\n          return 'is'\n        }\n      }\n      // return 'is'\n    }\n    // The meeting's scheduled vs The plane's landed\n    if (t.tags.has('PastTense')) {\n      // meeting's scheduled for\n      if (terms[o + 1] && terms[o + 1].normal === 'for') {\n        return 'is'\n      }\n      return 'has'\n    }\n  }\n  return 'is'\n}\n\n// 's -> [possessive, 'has', 'is', 'are', 'us']\nconst apostropheS = function (terms, i) {\n  // possessive, is/has\n  let before = terms[i].normal.split(hasContraction)[0]\n  // let's - >[let, us]\n  if (before === 'let') {\n    return [before, 'us']\n  }\n  // allow slang \"there's cookies\" -> there are\n  if (before === 'there') {\n    let t = terms[i + 1]\n    if (t && t.tags.has('Plural')) {\n      return [before, 'are']\n    }\n  }\n  // spencer's got -> spencer has got\n  if (isOrHas(terms, i) === 'has') {\n    return [before, 'has']\n  }\n  return [before, 'is']\n}\nexport default apostropheS\n", "const hasContraction = /'/\n\nconst hadWords = new Set([\n  'better', //had better\n  'done', //had done\n  'before', // he'd _ before\n  'it', // he'd _ it\n  'had', //she'd had -> she would have..\n])\n\nconst wouldWords = new Set([\n  'have', // 'i'd have' -> i would have..\n  'be', //' she'd be'\n])\n\n//look for a past-tense verb\n// You'd mentioned -> you had mentioned\n// You'd mention -> you would mention\nconst hadOrWould = (terms, i) => {\n  // scan ahead\n  for (let o = i + 1; o < terms.length; o += 1) {\n    let t = terms[o]\n    // you'd better go\n    if (hadWords.has(t.normal)) {\n      return 'had'\n    }\n    // we'd have\n    if (wouldWords.has(t.normal)) {\n      return 'would'\n    }\n    // You'd mentioned -> you had mentioned\n    if (t.tags.has('PastTense') || t.switch === 'Adj|Past') {\n      return 'had'\n    }\n    // You'd mention -> you would mention\n    if (t.tags.has('PresentTense') || t.tags.has('Infinitive')) {\n      return 'would'\n    }\n    // i'd an issue\n    if (t.tags.has('#Determiner')) {\n      return 'had'\n    }\n    if (t.tags.has('Adjective')) {\n      return 'would'\n    }\n  }\n  return false\n}\n\n// he'd walked -> had\n// how'd -> did\n// he'd go -> would\nconst _apostropheD = function (terms, i) {\n  let before = terms[i].normal.split(hasContraction)[0]\n  // what'd, how'd\n  if (before === 'how' || before === 'what') {\n    return [before, 'did']\n  }\n  if (hadOrWould(terms, i) === 'had') {\n    return [before, 'had']\n  }\n  // had/would/did\n  return [before, 'would']\n}\nexport default _apostropheD\n", "const lastNoun = function (terms, i) {\n  for (let n = i - 1; n >= 0; n -= 1) {\n    if (\n      terms[n].tags.has('Noun') ||\n      terms[n].tags.has('Pronoun') ||\n      terms[n].tags.has('Plural') ||\n      terms[n].tags.has('Singular')\n    ) {\n      return terms[n]\n    }\n  }\n  return null\n}\n\n//ain't -> are/is not\nconst apostropheT = function (terms, i) {\n  if (terms[i].normal === \"ain't\" || terms[i].normal === 'aint') {\n    // \"ain't never\" -> have never (?)\n    if (terms[i + 1] && terms[i + 1].normal === 'never') {\n      return ['have']\n    }\n    // we aint -> are not,   she aint -> is not\n    let noun = lastNoun(terms, i)\n    if (noun) {\n      // plural/singular pronouns\n      if (noun.normal === 'we' || noun.normal === 'they') {\n        return ['are', 'not']\n      }\n      if (noun.normal === 'i') {\n        return ['am', 'not']\n      }\n      // plural/singular tags\n      if (noun.tags && noun.tags.has('Plural')) {\n        return ['are', 'not']\n      }\n    }\n    return ['is', 'not']\n  }\n  let before = terms[i].normal.replace(/n't/, '')\n  return [before, 'not']\n}\n\nexport default apostropheT\n", "const banList = {\n  that: true,\n  there: true,\n  let: true,\n  here: true,\n  everywhere: true,\n}\n\nconst beforePossessive = {\n  in: true, //in sunday's\n  by: true, //by sunday's\n  for: true, //for sunday's\n}\nlet adjLike = new Set(['too', 'also', 'enough', 'about'])\nlet nounLike = new Set(['is', 'are', 'did', 'were', 'could', 'should', 'must', 'had', 'have'])\n\nconst isPossessive = (terms, i) => {\n  let term = terms[i]\n  // these can't be possessive\n  if (banList.hasOwnProperty(term.machine || term.normal)) {\n    return false\n  }\n  // if we already know it\n  if (term.tags.has('Possessive')) {\n    return true\n  }\n  // who's\n  if (term.tags.has('QuestionWord')) {\n    return false\n  }\n  // some pronouns are never possessive\n  if (term.normal === `he's` || term.normal === `she's`) {\n    return false\n  }\n  //if end of sentence, it is possessive - \"was spencer's\"\n  let nextTerm = terms[i + 1]\n  if (!nextTerm) {\n    return true\n  }\n  // \"it's a life\" vs \"run it's business\"\n  if (term.normal === `it's`) {\n    if (nextTerm.tags.has('#Noun')) {\n      return true\n    }\n    return false\n  }\n  // the sun's setting vs the artist's painting\n  // gerund = is,  noun = possessive\n  // (we are doing some dupe-work of the switch classifier here)\n  if (nextTerm.switch == 'Noun|Gerund') {\n    let next2 = terms[i + 2]\n    // the artist's painting.\n    if (!next2) {\n      if (term.tags.has('Actor') || term.tags.has('ProperNoun')) {\n        return true\n      }\n      return false\n    }\n    // the artist's painting is..\n    if (next2.tags.has('Copula')) {\n      return true\n    }\n    // the cat's sleeping on ..\n    if (next2.normal === 'on' || next2.normal === 'in') {\n      return false\n    }\n    return false\n  }\n  //a gerund suggests 'is walking'\n  if (nextTerm.tags.has('Verb')) {\n    //fix 'jamie's bite'\n    if (nextTerm.tags.has('Infinitive')) {\n      return true\n    }\n    //'jamaica's growing'\n    if (nextTerm.tags.has('Gerund')) {\n      return false\n    }\n    //fix 'spencer's runs'\n    if (nextTerm.tags.has('PresentTense')) {\n      return true\n    }\n    return false\n  }\n\n  // john's nuts\n  if (nextTerm.switch === 'Adj|Noun') {\n    let twoTerm = terms[i + 2]\n    if (!twoTerm) {\n      return false //adj\n    }\n    // john's nuts were..\n    if (nounLike.has(twoTerm.normal)) {\n      return true\n    }\n    // john's nuts about..\n    if (adjLike.has(twoTerm.normal)) {\n      return false //adj\n    }\n  }\n  //spencer's house\n  if (nextTerm.tags.has('Noun')) {\n    let nextStr = nextTerm.machine || nextTerm.normal\n    // 'spencer's here'\n    if (nextStr === 'here' || nextStr === 'there' || nextStr === 'everywhere') {\n      return false\n    }\n    // the chair's his\n    if (nextTerm.tags.has('Possessive')) {\n      return false\n    }\n    // the captain's John\n    if (nextTerm.tags.has('ProperNoun') && !term.tags.has('ProperNoun')) {\n      return false\n    }\n    return true\n  }\n\n  // by sunday's final\n  if (terms[i - 1] && beforePossessive[terms[i - 1].normal] === true) {\n    return true\n  }\n\n  // spencer's tired\n  if (nextTerm.tags.has('Adjective')) {\n    let twoTerm = terms[i + 2]\n    //the rocket's red\n    if (!twoTerm) {\n      return false\n    }\n    // rocket's red nozzle\n    if (twoTerm.tags.has('Noun') && !twoTerm.tags.has('Pronoun')) {\n      //project's behind schedule\n      let str = nextTerm.normal\n      if (str === 'above' || str === 'below' || str === 'behind') {\n        return false\n      }\n      return true\n    }\n    // rocket's red glare\n    if (twoTerm.switch === 'Noun|Verb') {\n      return true\n    }\n    //othwerwise, an adjective suggests 'is good'\n    return false\n  }\n  // baby's first steps\n  if (nextTerm.tags.has('Value')) {\n    return true\n  }\n  // otherwise not possessive\n  return false\n}\nexport default isPossessive\n", "import splice from './_splice.js'\nimport apostropheS from './apostrophe-s.js'\nimport apostropheD from './apostrophe-d.js'\nimport apostropheT from './apostrophe-t.js'\nimport isPossessive from './isPossessive.js'\n\nconst byApostrophe = /'/\n\n// poor-mans reindexing of this sentence only\nconst reIndex = function (terms) {\n  terms.forEach((t, i) => {\n    if (t.index) {\n      t.index[1] = i\n    }\n  })\n}\n\n// run tagger on our new implicit terms\nconst reTag = function (terms, view, start, len) {\n  let tmp = view.update()\n  tmp.document = [terms]\n  // offer to re-tag neighbours, too\n  let end = start + len\n  if (start > 0) {\n    start -= 1\n  }\n  if (terms[end]) {\n    end += 1\n  }\n  tmp.ptrs = [[0, start, end]]\n  tmp.compute(['freeze', 'lexicon', 'preTagger', 'unfreeze'])\n  // don't for a reindex of the whole document\n  reIndex(terms)\n}\n\nconst byEnd = {\n  // how'd\n  d: (terms, i) => apostropheD(terms, i),\n  // we ain't\n  t: (terms, i) => apostropheT(terms, i),\n  // bob's\n  s: (terms, i, world) => {\n    // [bob's house] vs [bob's cool]\n    if (isPossessive(terms, i)) {\n      return world.methods.one.setTag([terms[i]], 'Possessive', world, null, '2-contraction')\n    }\n    return apostropheS(terms, i)\n  },\n}\n\nconst toDocs = function (words, view) {\n  let doc = view.fromText(words.join(' '))\n  doc.compute('id')\n  return doc.docs[0]\n}\n\n//really easy ones\nconst contractionTwo = view => {\n  let { world, document } = view\n  // each sentence\n  document.forEach((terms, n) => {\n    // loop through terms backwards\n    for (let i = terms.length - 1; i >= 0; i -= 1) {\n      // is it already a contraction\n      if (terms[i].implicit) {\n        continue\n      }\n      let after = null\n      if (byApostrophe.test(terms[i].normal) === true) {\n        after = terms[i].normal.split(byApostrophe)[1]\n      }\n      let words = null\n      // any known-ones, like 'dunno'?\n      if (byEnd.hasOwnProperty(after)) {\n        words = byEnd[after](terms, i, world)\n      }\n      // actually insert the new terms\n      if (words) {\n        words = toDocs(words, view)\n        splice(document, [n, i], words)\n        reTag(document[n], view, i, words.length)\n        continue\n      }\n    }\n  })\n}\nexport default { contractionTwo }\n", "import api from './api/index.js'\nimport compute from './compute/index.js'\n\nexport default {\n  compute,\n  api,\n  hooks: ['contractionTwo']\n}", "export default [\n  // all fell apart\n  { match: '[(all|both)] #Determiner #Noun', group: 0, tag: 'Noun', reason: 'all-noun' },\n  //sometimes not-adverbs\n  { match: '#Copula [(just|alone)]$', group: 0, tag: 'Adjective', reason: 'not-adverb' },\n  //jack is guarded\n  { match: '#Singular is #Adverb? [#PastTense$]', group: 0, tag: 'Adjective', reason: 'is-filled' },\n  // smoked poutine is\n  { match: '[#PastTense] #Singular is', group: 0, tag: 'Adjective', reason: 'smoked-poutine' },\n  // baked onions are\n  { match: '[#PastTense] #Plural are', group: 0, tag: 'Adjective', reason: 'baked-onions' },\n  // well made\n  { match: 'well [#PastTense]', group: 0, tag: 'Adjective', reason: 'well-made' },\n  // is f*ed up\n  { match: '#Copula [fucked up?]', group: 0, tag: 'Adjective', reason: 'swears-adjective' },\n  //jack seems guarded\n  { match: '#Singular (seems|appears) #Adverb? [#PastTense$]', group: 0, tag: 'Adjective', reason: 'seems-filled' },\n  // jury is out - preposition ➔ adjective\n  { match: '#Copula #Adjective? [(out|in|through)]$', group: 0, tag: 'Adjective', reason: 'still-out' },\n  // shut the door\n  { match: '^[#Adjective] (the|your) #Noun', group: 0, notIf: '(all|even)', tag: 'Infinitive', reason: 'shut-the' },\n  // the said card\n  { match: 'the [said] #Noun', group: 0, tag: 'Adjective', reason: 'the-said-card' },\n  // faith-based, much-appreciated, soft-boiled\n  { match: '[#Hyphenated (#Hyphenated && #PastTense)] (#Noun|#Conjunction)', group: 0, tag: 'Adjective', notIf: '#Adverb', reason: 'faith-based' },\n  //self-driving\n  { match: '[#Hyphenated (#Hyphenated && #Gerund)] (#Noun|#Conjunction)', group: 0, tag: 'Adjective', notIf: '#Adverb', reason: 'self-driving' },\n  //dammed-up\n  { match: '[#PastTense (#Hyphenated && #PhrasalVerb)] (#Noun|#Conjunction)', group: 0, tag: 'Adjective', reason: 'dammed-up' },\n  //two-fold\n  { match: '(#Hyphenated && #Value) fold', tag: 'Adjective', reason: 'two-fold' },\n  //must-win\n  { match: 'must (#Hyphenated && #Infinitive)', tag: 'Adjective', reason: 'must-win' },\n  // vacuum-sealed\n  { match: `(#Hyphenated && #Infinitive) #Hyphenated`, tag: 'Adjective', notIf: '#PhrasalVerb', reason: 'vacuum-sealed' },\n\n  { match: 'too much', tag: 'Adverb Adjective', reason: 'bit-4' },\n  { match: 'a bit much', tag: 'Determiner Adverb Adjective', reason: 'bit-3' },\n\n  // adjective-prefixes - 'un skilled'\n  { match: '[(un|contra|extra|inter|intra|macro|micro|mid|mis|mono|multi|pre|sub|tri|ex)] #Adjective', group: 0, tag: ['Adjective', 'Prefix'], reason: 'un-skilled' },\n\n]\n", "const adverbAdj = `(dark|bright|flat|light|soft|pale|dead|dim|faux|little|wee|sheer|most|near|good|extra|all)`\nconst noLy = '(hard|fast|late|early|high|right|deep|close|direct)'\n\nexport default [\n  // kinda sparkly\n  { match: `#Adverb [#Adverb] (and|or|then)`, group: 0, tag: 'Adjective', reason: 'kinda-sparkly-and' },\n  // dark green\n  { match: `[${adverbAdj}] #Adjective`, group: 0, tag: 'Adverb', reason: 'dark-green' },\n  // far too\n  { match: `#Copula [far too] #Adjective`, group: 0, tag: 'Adverb', reason: 'far-too' },\n  // was still in\n  { match: `#Copula [still] (in|#Gerund|#Adjective)`, group: 0, tag: 'Adverb', reason: 'was-still-walking' },\n  // studies hard\n  { match: `#Plural ${noLy}`, tag: '#PresentTense #Adverb', reason: 'studies-hard' },\n  // shops direct\n  {\n    match: `#Verb [${noLy}] !#Noun?`,\n    group: 0,\n    notIf: '(#Copula|get|got|getting|become|became|becoming|feel|feels|feeling|#Determiner|#Preposition)',\n    tag: 'Adverb',\n    reason: 'shops-direct',\n  },\n  // studies a lot\n  { match: `[#Plural] a lot`, tag: 'PresentTense', reason: 'studies-a-lot' },\n]\n", "// Gerund-Adjectives - 'amusing, annoying'\nexport default [\n  //a staggering cost\n  // { match: '(a|an) [#Gerund]', group: 0, tag: 'Adjective', reason: 'a|an' },\n  //as amusing as\n  { match: 'as [#Gerund] as', group: 0, tag: 'Adjective', reason: 'as-gerund-as' },\n  // more amusing than\n  { match: 'more [#Gerund] than', group: 0, tag: 'Adjective', reason: 'more-gerund-than' },\n  // very amusing\n  { match: '(so|very|extremely) [#Gerund]', group: 0, tag: 'Adjective', reason: 'so-gerund' },\n  // found it amusing\n  { match: '(found|found) it #Adverb? [#Gerund]', group: 0, tag: 'Adjective', reason: 'found-it-gerund' },\n  // a bit amusing\n  { match: 'a (little|bit|wee) bit? [#Gerund]', group: 0, tag: 'Adjective', reason: 'a-bit-gerund' },\n  // looking annoying\n  {\n    match: '#Gerund [#Gerund]',\n    group: 0,\n    tag: 'Adjective',\n    notIf: '(impersonating|practicing|considering|assuming)',\n    reason: 'looking-annoying',\n  },\n  // looked amazing\n  {\n    match: '(looked|look|looks) #Adverb? [%Adj|Gerund%]',\n    group: 0,\n    tag: 'Adjective',\n    notIf: '(impersonating|practicing|considering|assuming)',\n    reason: 'looked-amazing',\n  },\n  // were really amazing\n  // { match: '(looked|look|looks) #Adverb [%Adj|Gerund%]', group: 0, tag: 'Adjective', notIf: '(impersonating|practicing|considering|assuming)', reason: 'looked-amazing' },\n  // developing a\n  { match: '[%Adj|Gerund%] #Determiner', group: 0, tag: 'Gerund', reason: 'developing-a' },\n  // world's leading manufacturer\n  { match: '#Possessive [%Adj|Gerund%] #Noun', group: 0, tag: 'Adjective', reason: 'leading-manufacturer' },\n  // meaning alluring\n  { match: '%Noun|Gerund% %Adj|Gerund%', tag: 'Gerund #Adjective', reason: 'meaning-alluring' },\n\n  // face shocking revelations\n  {\n    match: '(face|embrace|reveal|stop|start|resume) %Adj|Gerund%',\n    tag: '#PresentTense #Adjective',\n    reason: 'face-shocking',\n  },\n  // are enduring symbols\n  { match: '(are|were) [%Adj|Gerund%] #Plural', group: 0, tag: 'Adjective', reason: 'are-enduring-symbols' },\n]\n", "export default [\n  //the above is clear\n  { match: '#Determiner [#Adjective] #Copula', group: 0, tag: 'Noun', reason: 'the-adj-is' },\n  //real evil is\n  { match: '#Adjective [#Adjective] #Copula', group: 0, tag: 'Noun', reason: 'adj-adj-is' },\n  //his fine\n  { match: '(his|its) [%Adj|Noun%]', group: 0, tag: 'Noun', notIf: '#Hyphenated', reason: 'his-fine' },\n  //is all\n  { match: '#Copula #Adverb? [all]', group: 0, tag: 'Noun', reason: 'is-all' },\n  // have fun\n  { match: `(have|had) [#Adjective] #Preposition .`, group: 0, tag: 'Noun', reason: 'have-fun' },\n  // brewing giant\n  { match: `#Gerund (giant|capital|center|zone|application)`, tag: 'Noun', reason: 'brewing-giant' },\n  // in an instant\n  { match: `#Preposition (a|an) [#Adjective]$`, group: 0, tag: 'Noun', reason: 'an-instant' },\n  // no golden would\n  { match: `no [#Adjective] #Modal`, group: 0, tag: 'Noun', reason: 'no-golden' },\n  // brand new\n  { match: `[brand #Gerund?] new`, group: 0, tag: 'Adverb', reason: 'brand-new' },\n  // some kind\n  { match: `(#Determiner|#Comparative|new|different) [kind]`, group: 0, tag: 'Noun', reason: 'some-kind' },\n  // her favourite sport\n  { match: `#Possessive [%Adj|Noun%] #Noun`, group: 0, tag: 'Adjective', reason: 'her-favourite' },\n  // must-win\n  { match: `must && #Hyphenated .`, tag: 'Adjective', reason: 'must-win' },\n  // the present\n  {\n    match: `#Determiner [#Adjective]$`,\n    tag: 'Noun',\n    notIf: '(this|that|#Comparative|#Superlative)',\n    reason: 'the-south',\n  }, //are that crazy.\n  // company-wide\n  {\n    match: `(#Noun && #Hyphenated) (#Adjective && #Hyphenated)`,\n    tag: 'Adjective',\n    notIf: '(this|that|#Comparative|#Superlative)',\n    reason: 'company-wide',\n  },\n  // the poor were\n  {\n    match: `#Determiner [#Adjective] (#Copula|#Determiner)`,\n    notIf: '(#Comparative|#Superlative)',\n    group: 0,\n    tag: 'Noun',\n    reason: 'the-poor',\n  },\n  // professional bodybuilder\n  {\n    match: `[%Adj|Noun%] #Noun`,\n    notIf: '(#Pronoun|#ProperNoun)',\n    group: 0,\n    tag: 'Adjective',\n    reason: 'stable-foundations',\n  },\n]\n", "export default [\n  // amusing his aunt\n  // { match: '[#Adjective] #Possessive #Noun', group: 0, tag: 'Verb', reason: 'gerund-his-noun' },\n  // loving you\n  // { match: '[#Adjective] (us|you)', group: 0, tag: 'Gerund', reason: 'loving-you' },\n  // slowly stunning\n  { match: '(slowly|quickly) [#Adjective]', group: 0, tag: 'Verb', reason: 'slowly-adj' },\n  // does mean\n  { match: 'does (#Adverb|not)? [#Adjective]', group: 0, tag: 'PresentTense', reason: 'does-mean' },\n  // okay by me\n  { match: '[(fine|okay|cool|ok)] by me', group: 0, tag: 'Adjective', reason: 'okay-by-me' },\n  // i mean\n  { match: 'i (#Adverb|do)? not? [mean]', group: 0, tag: 'PresentTense', reason: 'i-mean' },\n  //will secure our\n  { match: 'will #Adjective', tag: 'Auxiliary Infinitive', reason: 'will-adj' },\n  //he disguised the thing\n  { match: '#Pronoun [#Adjective] #Determiner #Adjective? #Noun', group: 0, tag: 'Verb', reason: 'he-adj-the' },\n  //is eager to go\n  { match: '#Copula [%Adj|Present%] to #Verb', group: 0, tag: 'Verb', reason: 'adj-to' },\n  //is done well\n  { match: '#Copula [#Adjective] (well|badly|quickly|slowly)', group: 0, tag: 'Verb', reason: 'done-well' },\n  // rude and insulting\n  { match: '#Adjective and [#Gerund] !#Preposition?', group: 0, tag: 'Adjective', reason: 'rude-and-x' },\n  // were over cooked\n  { match: '#Copula #Adverb? (over|under) [#PastTense]', group: 0, tag: 'Adjective', reason: 'over-cooked' },\n  // was bland and overcooked\n  { match: '#Copula #Adjective+ (and|or) [#PastTense]$', group: 0, tag: 'Adjective', reason: 'bland-and-overcooked' },\n  // got tired of\n  { match: 'got #Adverb? [#PastTense] of', group: 0, tag: 'Adjective', reason: 'got-tired-of' },\n  //felt loved\n  {\n    match:\n      '(seem|seems|seemed|appear|appeared|appears|feel|feels|felt|sound|sounds|sounded) (#Adverb|#Adjective)? [#PastTense]',\n    group: 0,\n    tag: 'Adjective',\n    reason: 'felt-loved',\n  },\n  // seem confused\n  { match: '(seem|feel|seemed|felt) [#PastTense #Particle?]', group: 0, tag: 'Adjective', reason: 'seem-confused' },\n  // a bit confused\n  { match: 'a (bit|little|tad) [#PastTense #Particle?]', group: 0, tag: 'Adjective', reason: 'a-bit-confused' },\n  // do not be embarrassed\n  { match: 'not be [%Adj|Past% #Particle?]', group: 0, tag: 'Adjective', reason: 'do-not-be-confused' },\n  // is just right\n  { match: '#Copula just [%Adj|Past% #Particle?]', group: 0, tag: 'Adjective', reason: 'is-just-right' },\n  // as pale as\n  { match: 'as [#Infinitive] as', group: 0, tag: 'Adjective', reason: 'as-pale-as' },\n  //failed and oppressive\n  { match: '[%Adj|Past%] and #Adjective', group: 0, tag: 'Adjective', reason: 'faled-and-oppressive' },\n  // or heightened emotion\n  {\n    match: 'or [#PastTense] #Noun',\n    group: 0,\n    tag: 'Adjective',\n    notIf: '(#Copula|#Pronoun)',\n    reason: 'or-heightened-emotion',\n  },\n  // became involved\n  { match: '(become|became|becoming|becomes) [#Verb]', group: 0, tag: 'Adjective', reason: 'become-verb' },\n  // their declared intentions\n  { match: '#Possessive [#PastTense] #Noun', group: 0, tag: 'Adjective', reason: 'declared-intentions' },\n  // is he cool\n  { match: '#Copula #Pronoun [%Adj|Present%]', group: 0, tag: 'Adjective', reason: 'is-he-cool' },\n  // is crowded with\n  {\n    match: '#Copula [%Adj|Past%] with',\n    group: 0,\n    tag: 'Adjective',\n    notIf: '(associated|worn|baked|aged|armed|bound|fried|loaded|mixed|packed|pumped|filled|sealed)',\n    reason: 'is-crowded-with',\n  },\n  // is empty$\n  { match: '#Copula #Adverb? [%Adj|Present%]$', group: 0, tag: 'Adjective', reason: 'was-empty$' },\n]\n", "// const adverbAdj = '(dark|bright|flat|light|soft|pale|dead|dim|faux|little|wee|sheer|most|near|good|extra|all)'\n\nexport default [\n  //still good\n  { match: '[still] #Adjective', group: 0, tag: 'Adverb', reason: 'still-advb' },\n  //still make\n  { match: '[still] #Verb', group: 0, tag: 'Adverb', reason: 'still-verb' },\n  // so hot\n  { match: '[so] #Adjective', group: 0, tag: 'Adverb', reason: 'so-adv' },\n  // way hotter\n  { match: '[way] #Comparative', group: 0, tag: 'Adverb', reason: 'way-adj' },\n  // way too hot\n  { match: '[way] #Adverb #Adjective', group: 0, tag: 'Adverb', reason: 'way-too-adj' },\n  // all singing\n  { match: '[all] #Verb', group: 0, tag: 'Adverb', reason: 'all-verb' },\n  // sing like an angel\n  { match: '#Verb  [like]', group: 0, notIf: '(#Modal|#PhrasalVerb)', tag: 'Adverb', reason: 'verb-like' },\n  //barely even walk\n  { match: '(barely|hardly) even', tag: 'Adverb', reason: 'barely-even' },\n  //even held\n  { match: '[even] #Verb', group: 0, tag: 'Adverb', reason: 'even-walk' },\n  //even worse\n  { match: '[even] #Comparative', group: 0, tag: 'Adverb', reason: 'even-worse' },\n  // even the greatest\n  { match: '[even] (#Determiner|#Possessive)', group: 0, tag: '#Adverb', reason: 'even-the' },\n  // even left\n  { match: 'even left', tag: '#Adverb #Verb', reason: 'even-left' },\n  // way over\n  { match: '[way] #Adjective', group: 0, tag: '#Adverb', reason: 'way-over' },\n  //cheering hard - dropped -ly's\n  {\n    match: '#PresentTense [(hard|quick|bright|slow|fast|backwards|forwards)]',\n    notIf: '#Copula',\n    group: 0,\n    tag: 'Adverb',\n    reason: 'lazy-ly',\n  },\n  // much appreciated\n  { match: '[much] #Adjective', group: 0, tag: 'Adverb', reason: 'bit-1' },\n  // is well\n  { match: '#Copula [#Adverb]$', group: 0, tag: 'Adjective', reason: 'is-well' },\n  // a bit cold\n  { match: 'a [(little|bit|wee) bit?] #Adjective', group: 0, tag: 'Adverb', reason: 'a-bit-cold' },\n  // super strong\n  { match: `[(super|pretty)] #Adjective`, group: 0, tag: 'Adverb', reason: 'super-strong' },\n  // become overly weakened\n  { match: '(become|fall|grow) #Adverb? [#PastTense]', group: 0, tag: 'Adjective', reason: 'overly-weakened' },\n  // a completely beaten man\n  { match: '(a|an) #Adverb [#Participle] #Noun', group: 0, tag: 'Adjective', reason: 'completely-beaten' },\n  //a close\n  { match: '#Determiner #Adverb? [close]', group: 0, tag: 'Adjective', reason: 'a-close' },\n  //walking close\n  { match: '#Gerund #Adverb? [close]', group: 0, tag: 'Adverb', notIf: '(getting|becoming|feeling)', reason: 'being-close' },\n  // a blown motor\n  { match: '(the|those|these|a|an) [#Participle] #Noun', group: 0, tag: 'Adjective', reason: 'blown-motor' },\n  // charged back\n  { match: '(#PresentTense|#PastTense) [back]', group: 0, tag: 'Adverb', notIf: '(#PhrasalVerb|#Copula)', reason: 'charge-back' },\n  // send around\n  { match: '#Verb [around]', group: 0, tag: 'Adverb', notIf: '#PhrasalVerb', reason: 'send-around' },\n  // later say\n  { match: '[later] #PresentTense', group: 0, tag: 'Adverb', reason: 'later-say' },\n  // the well\n  { match: '#Determiner [well] !#PastTense?', group: 0, tag: 'Noun', reason: 'the-well' },\n  // high enough\n  { match: '#Adjective [enough]', group: 0, tag: 'Adverb', reason: 'high-enough' },\n]\n", "export default [\n  // ==== Holiday ====\n  { match: '#Holiday (day|eve)', tag: 'Holiday', reason: 'holiday-day' },\n  //5th of March\n  { match: '#Value of #Month', tag: 'Date', reason: 'value-of-month' },\n  //5 March\n  { match: '#Cardinal #Month', tag: 'Date', reason: 'cardinal-month' },\n  //march 5 to 7\n  { match: '#Month #Value to #Value', tag: 'Date', reason: 'value-to-value' },\n  //march the 12th\n  { match: '#Month the #Value', tag: 'Date', reason: 'month-the-value' },\n  //june 7\n  { match: '(#WeekDay|#Month) #Value', tag: 'Date', reason: 'date-value' },\n  //7 june\n  { match: '#Value (#WeekDay|#Month)', tag: 'Date', reason: 'value-date' },\n  //may twenty five\n  { match: '(#TextValue && #Date) #TextValue', tag: 'Date', reason: 'textvalue-date' },\n  // 'aug 20-21'\n  { match: `#Month #NumberRange`, tag: 'Date', reason: 'aug 20-21' },\n  // wed march 5th\n  { match: `#WeekDay #Month #Ordinal`, tag: 'Date', reason: 'week mm-dd' },\n  // aug 5th 2021\n  { match: `#Month #Ordinal #Cardinal`, tag: 'Date', reason: 'mm-dd-yyy' },\n\n  // === timezones ===\n  // china standard time\n  { match: `(#Place|#Demonmym|#Time) (standard|daylight|central|mountain)? time`, tag: 'Timezone', reason: 'std-time' },\n  // eastern time\n  {\n    match: `(eastern|mountain|pacific|central|atlantic) (standard|daylight|summer)? time`,\n    tag: 'Timezone',\n    reason: 'eastern-time',\n  },\n  // 5pm central\n  { match: `#Time [(eastern|mountain|pacific|central|est|pst|gmt)]`, group: 0, tag: 'Timezone', reason: '5pm-central' },\n  // central european time\n  { match: `(central|western|eastern) european time`, tag: 'Timezone', reason: 'cet' },\n]\n", "export default [\n  // ==== WeekDay ====\n  // sun the 5th\n  { match: '[sun] the #Ordinal', tag: 'WeekDay', reason: 'sun-the-5th' },\n  //sun feb 2\n  { match: '[sun] #Date', group: 0, tag: 'WeekDay', reason: 'sun-feb' },\n  //1pm next sun\n  { match: '#Date (on|this|next|last|during)? [sun]', group: 0, tag: 'WeekDay', reason: '1pm-sun' },\n  //this sat\n  { match: `(in|by|before|during|on|until|after|of|within|all) [sat]`, group: 0, tag: 'WeekDay', reason: 'sat' },\n  { match: `(in|by|before|during|on|until|after|of|within|all) [wed]`, group: 0, tag: 'WeekDay', reason: 'wed' },\n  { match: `(in|by|before|during|on|until|after|of|within|all) [march]`, group: 0, tag: 'Month', reason: 'march' },\n  //sat november\n  { match: '[sat] #Date', group: 0, tag: 'WeekDay', reason: 'sat-feb' },\n\n  // ==== Month ====\n  //all march\n  { match: `#Preposition [(march|may)]`, group: 0, tag: 'Month', reason: 'in-month' },\n  //this march\n  { match: `(this|next|last) (march|may) !#Infinitive?`, tag: '#Date #Month', reason: 'this-month' },\n  // march 5th\n  { match: `(march|may) the? #Value`, tag: '#Month #Date #Date', reason: 'march-5th' },\n  // 5th of march\n  { match: `#Value of? (march|may)`, tag: '#Date #Date #Month', reason: '5th-of-march' },\n  // march and feb\n  { match: `[(march|may)] .? #Date`, group: 0, tag: 'Month', reason: 'march-and-feb' },\n  // feb to march\n  { match: `#Date .? [(march|may)]`, group: 0, tag: 'Month', reason: 'feb-and-march' },\n  //quickly march\n  { match: `#Adverb [(march|may)]`, group: 0, tag: 'Verb', reason: 'quickly-march' },\n  //march quickly\n  { match: `[(march|may)] #Adverb`, group: 0, tag: 'Verb', reason: 'march-quickly' },\n  //12 am\n  { match: `#Value (am|pm)`, tag: 'Time', reason: '2-am' },\n]\n", "const infNouns =\n  '(feel|sense|process|rush|side|bomb|bully|challenge|cover|crush|dump|exchange|flow|function|issue|lecture|limit|march|process)'\nexport default [\n  //'more' is not always an adverb\n  // any more\n  { match: '(the|any) [more]', group: 0, tag: 'Singular', reason: 'more-noun' },\n  // more players\n  { match: '[more] #Noun', group: 0, tag: 'Adjective', reason: 'more-noun' },\n  // rights of man\n  { match: '(right|rights) of .', tag: 'Noun', reason: 'right-of' },\n  // a bit\n  { match: 'a [bit]', group: 0, tag: 'Singular', reason: 'bit-2' },\n  // a must\n  { match: 'a [must]', group: 0, tag: 'Singular', reason: 'must-2' },\n  // we all\n  { match: '(we|us) [all]', group: 0, tag: 'Noun', reason: 'we all' },\n  // due to weather\n  { match: 'due to [#Verb]', group: 0, tag: 'Noun', reason: 'due-to' },\n\n  //some pressing issues\n  { match: 'some [#Verb] #Plural', group: 0, tag: 'Noun', reason: 'determiner6' },\n  // my first thought\n  { match: '#Possessive #Ordinal [#PastTense]', group: 0, tag: 'Noun', reason: 'first-thought' },\n  //the nice swim\n  {\n    match: '(the|this|those|these) #Adjective [%Verb|Noun%]',\n    group: 0,\n    tag: 'Noun',\n    notIf: '#Copula',\n    reason: 'the-adj-verb',\n  },\n  // the truly nice swim\n  { match: '(the|this|those|these) #Adverb #Adjective [#Verb]', group: 0, tag: 'Noun', reason: 'determiner4' },\n  //the wait to vote\n  { match: 'the [#Verb] #Preposition .', group: 0, tag: 'Noun', reason: 'determiner1' },\n  //a sense of\n  { match: '(a|an|the) [#Verb] of', group: 0, tag: 'Noun', reason: 'the-verb-of' },\n  //the threat of force\n  { match: '#Determiner #Noun of [#Verb]', group: 0, tag: 'Noun', notIf: '#Gerund', reason: 'noun-of-noun' },\n  // ended in ruins\n  {\n    match: '#PastTense #Preposition [#PresentTense]',\n    group: 0,\n    notIf: '#Gerund',\n    tag: 'Noun',\n    reason: 'ended-in-ruins',\n  },\n  //'u' as pronoun\n  { match: '#Conjunction [u]', group: 0, tag: 'Pronoun', reason: 'u-pronoun-2' },\n  { match: '[u] #Verb', group: 0, tag: 'Pronoun', reason: 'u-pronoun-1' },\n  //the western line\n  {\n    match: '#Determiner [(western|eastern|northern|southern|central)] #Noun',\n    group: 0,\n    tag: 'Noun',\n    reason: 'western-line',\n  },\n  //air-flow\n  { match: '(#Singular && @hasHyphen) #PresentTense', tag: 'Noun', reason: 'hyphen-verb' },\n  //is no walk\n  { match: 'is no [#Verb]', group: 0, tag: 'Noun', reason: 'is-no-verb' },\n  //do so\n  { match: 'do [so]', group: 0, tag: 'Noun', reason: 'so-noun' },\n  // what the hell\n  { match: '#Determiner [(shit|damn|hell)]', group: 0, tag: 'Noun', reason: 'swears-noun' },\n  // go to shit\n  { match: 'to [(shit|hell)]', group: 0, tag: 'Noun', reason: 'to-swears' },\n  // the staff were\n  { match: '(the|these) [#Singular] (were|are)', group: 0, tag: 'Plural', reason: 'singular-were' },\n  // a comdominium, or simply condo\n  { match: `a #Noun+ or #Adverb+? [#Verb]`, group: 0, tag: 'Noun', reason: 'noun-or-noun' },\n  // walk the walk\n  {\n    match: '(the|those|these|a|an) #Adjective? [#PresentTense #Particle?]',\n    group: 0,\n    tag: 'Noun',\n    notIf: '(seem|appear|include|#Gerund|#Copula)',\n    reason: 'det-inf',\n  },\n  // { match: '(the|those|these|a|an) #Adjective? [#PresentTense #Particle?]', group: 0, tag: 'Noun', notIf: '(#Gerund|#Copula)', reason: 'det-pres' },\n\n  // ==== Actor ====\n  //Aircraft designer\n  { match: '#Noun #Actor', tag: 'Actor', notIf: '(#Person|#Pronoun)', reason: 'thing-doer' },\n  //lighting designer\n  { match: '#Gerund #Actor', tag: 'Actor', reason: 'gerund-doer' },\n  // captain sanders\n  // { match: '[#Actor+] #ProperNoun', group: 0, tag: 'Honorific', reason: 'sgt-kelly' },\n  // co-founder\n  { match: `co #Singular`, tag: 'Actor', reason: 'co-noun' },\n  // co-founder\n  {\n    match: `[#Noun+] #Actor`,\n    group: 0,\n    tag: 'Actor',\n    notIf: '(#Honorific|#Pronoun|#Possessive)',\n    reason: 'air-traffic-controller',\n  },\n  // fine-artist\n  {\n    match: `(urban|cardiac|cardiovascular|respiratory|medical|clinical|visual|graphic|creative|dental|exotic|fine|certified|registered|technical|virtual|professional|amateur|junior|senior|special|pharmaceutical|theoretical)+ #Noun? #Actor`,\n    tag: 'Actor',\n    reason: 'fine-artist',\n  },\n  // dance coach\n  {\n    match: `#Noun+ (coach|chef|king|engineer|fellow|personality|boy|girl|man|woman|master)`,\n    tag: 'Actor',\n    reason: 'dance-coach',\n  },\n  // chief design officer\n  { match: `chief . officer`, tag: 'Actor', reason: 'chief-x-officer' },\n  // chief of police\n  { match: `chief of #Noun+`, tag: 'Actor', reason: 'chief-of-police' },\n  // president of marketing\n  { match: `senior? vice? president of #Noun+`, tag: 'Actor', reason: 'president-of' },\n\n  // ==== Singular ====\n  //the sun\n  { match: '#Determiner [sun]', group: 0, tag: 'Singular', reason: 'the-sun' },\n  //did a 900, paid a 20\n  { match: '#Verb (a|an) [#Value]$', group: 0, tag: 'Singular', reason: 'did-a-value' },\n  //'the can'\n  { match: 'the [(can|will|may)]', group: 0, tag: 'Singular', reason: 'the can' },\n\n  // ==== Possessive ====\n  //spencer kelly's\n  { match: '#FirstName #Acronym? (#Possessive && #LastName)', tag: 'Possessive', reason: 'name-poss' },\n  //Super Corp's fundraiser\n  { match: '#Organization+ #Possessive', tag: 'Possessive', reason: 'org-possessive' },\n  //Los Angeles's fundraiser\n  { match: '#Place+ #Possessive', tag: 'Possessive', reason: 'place-possessive' },\n  // Ptolemy's experiments\n  { match: '#Possessive #PresentTense #Particle?', notIf: '(#Gerund|her)', tag: 'Noun', reason: 'possessive-verb' }, // anna's eating vs anna's eating lunch\n  // my presidents house\n  { match: '(my|our|their|her|his|its) [(#Plural && #Actor)] #Noun', tag: 'Possessive', reason: 'my-dads' },\n\n  // 10th of a second\n  { match: '#Value of a [second]', group: 0, unTag: 'Value', tag: 'Singular', reason: '10th-of-a-second' },\n  // 10 seconds\n  { match: '#Value [seconds]', group: 0, unTag: 'Value', tag: 'Plural', reason: '10-seconds' },\n  // in time\n  { match: 'in [#Infinitive]', group: 0, tag: 'Singular', reason: 'in-age' },\n  // a minor in\n  { match: 'a [#Adjective] #Preposition', group: 0, tag: 'Noun', reason: 'a-minor-in' },\n  //the repairer said\n  { match: '#Determiner [#Singular] said', group: 0, tag: 'Actor', reason: 'the-actor-said' },\n  //the euro sense\n  {\n    match: `#Determiner #Noun [${infNouns}] !(#Preposition|to|#Adverb)?`,\n    group: 0,\n    tag: 'Noun',\n    reason: 'the-noun-sense',\n  },\n  // photographs of a computer are\n  { match: '[#PresentTense] (of|by|for) (a|an|the) #Noun #Copula', group: 0, tag: 'Plural', reason: 'photographs-of' },\n  // fight and win\n  { match: '#Infinitive and [%Noun|Verb%]', group: 0, tag: 'Infinitive', reason: 'fight and win' },\n  // peace and flowers and love\n  { match: '#Noun and [#Verb] and #Noun', group: 0, tag: 'Noun', reason: 'peace-and-flowers' },\n  // the 1992 classic\n  { match: 'the #Cardinal [%Adj|Noun%]', group: 0, tag: 'Noun', reason: 'the-1992-classic' },\n  // the premier university\n  { match: '#Copula the [%Adj|Noun%] #Noun', group: 0, tag: 'Adjective', reason: 'the-premier-university' },\n\n  // scottish - i ate me sandwich\n  { match: 'i #Verb [me] #Noun', group: 0, tag: 'Possessive', reason: 'scottish-me' },\n  // dance music\n  {\n    match: '[#PresentTense] (music|class|lesson|night|party|festival|league|ceremony)',\n    group: 0,\n    tag: 'Noun',\n    reason: 'dance-music',\n  },\n  // wit it\n  { match: '[wit] (me|it)', group: 0, tag: 'Presposition', reason: 'wit-me' },\n  //left-her-boots, shoved her hand\n  { match: '#PastTense #Possessive [#Verb]', group: 0, tag: 'Noun', notIf: '(saw|made)', reason: 'left-her-boots' },\n  //35 signs\n  { match: '#Value [%Plural|Verb%]', group: 0, tag: 'Plural', notIf: '(one|1|a|an)', reason: '35-signs' },\n  //had time\n  { match: 'had [#PresentTense]', group: 0, tag: 'Noun', notIf: '(#Gerund|come|become)', reason: 'had-time' },\n  //instant access\n  { match: '%Adj|Noun% %Noun|Verb%', tag: '#Adjective #Noun', notIf: '#ProperNoun #Noun', reason: 'instant-access' },\n  // a representative to\n  { match: '#Determiner [%Adj|Noun%] #Conjunction', group: 0, tag: 'Noun', reason: 'a-rep-to' },\n  // near death experiences, ambitious sales targets\n  {\n    match: '#Adjective #Noun [%Plural|Verb%]$',\n    group: 0,\n    tag: 'Plural',\n    notIf: '#Pronoun',\n    reason: 'near-death-experiences',\n  },\n  // your guild colors\n  { match: '#Possessive #Noun [%Plural|Verb%]$', group: 0, tag: 'Plural', reason: 'your-guild-colors' },\n]\n", "export default [\n  // the planning processes\n  { match: '(this|that|the|a|an) [#Gerund #Infinitive]', group: 0, tag: 'Singular', reason: 'the-planning-process' },\n  // the paving stones\n  { match: '(that|the) [#Gerund #PresentTense]', group: 0, ifNo: '#Copula', tag: 'Plural', reason: 'the-paving-stones' },\n  // this swimming\n  // { match: '(this|that|the) [#Gerund]', group: 0, tag: 'Noun', reason: 'this-gerund' },\n  // the remaining claims\n  { match: '#Determiner [#Gerund] #Noun', group: 0, tag: 'Adjective', reason: 'the-gerund-noun' },\n  // i think tipping sucks\n  { match: `#Pronoun #Infinitive [#Gerund] #PresentTense`, group: 0, tag: 'Noun', reason: 'tipping-sucks' },\n  // early warning\n  { match: '#Adjective [#Gerund]', group: 0, tag: 'Noun', notIf: '(still|even|just)', reason: 'early-warning' },\n  //walking is cool\n  { match: '[#Gerund] #Adverb? not? #Copula', group: 0, tag: 'Activity', reason: 'gerund-copula' },\n  //are doing is\n  { match: '#Copula [(#Gerund|#Activity)] #Copula', group: 0, tag: 'Gerund', reason: 'are-doing-is' },\n  //walking should be fun\n  { match: '[#Gerund] #Modal', group: 0, tag: 'Activity', reason: 'gerund-modal' },\n  // finish listening\n  // { match: '#Infinitive [#Gerund]', group: 0, tag: 'Activity', reason: 'finish-listening' },\n  // the ruling party\n\n  // responsibility for setting\n  { match: '#Singular for [%Noun|Gerund%]', group: 0, tag: 'Gerund', reason: 'noun-for-gerund' },\n  // better for training\n  { match: '#Comparative (for|at) [%Noun|Gerund%]', group: 0, tag: 'Gerund', reason: 'better-for-gerund' },\n  // keep the touching\n  { match: '#PresentTense the [#Gerund]', group: 0, tag: 'Noun', reason: 'keep-the-touching' },\n]\n", "export default [\n  // do the dance\n  { match: '#Infinitive (this|that|the) [#Infinitive]', group: 0, tag: 'Noun', reason: 'do-this-dance' },\n  //running-a-show\n  { match: '#Gerund #Determiner [#Infinitive]', group: 0, tag: 'Noun', reason: 'running-a-show' },\n  //the-only-reason\n  { match: '#Determiner (only|further|just|more|backward) [#Infinitive]', group: 0, tag: 'Noun', reason: 'the-only-reason' },\n  // a stream runs\n  { match: '(the|this|a|an) [#Infinitive] #Adverb? #Verb', group: 0, tag: 'Noun', reason: 'determiner5' },\n  //a nice deal\n  { match: '#Determiner #Adjective #Adjective? [#Infinitive]', group: 0, tag: 'Noun', reason: 'a-nice-inf' },\n  // the mexican train\n  { match: '#Determiner #Demonym [#PresentTense]', group: 0, tag: 'Noun', reason: 'mexican-train' },\n  //next career move\n  { match: '#Adjective #Noun+ [#Infinitive] #Copula', group: 0, tag: 'Noun', reason: 'career-move' },\n  // at some point\n  { match: 'at some [#Infinitive]', group: 0, tag: 'Noun', reason: 'at-some-inf' },\n  // goes to sleep\n  { match: '(go|goes|went) to [#Infinitive]', group: 0, tag: 'Noun', reason: 'goes-to-verb' },\n  //a close watch on\n  { match: '(a|an) #Adjective? #Noun [#Infinitive] (#Preposition|#Noun)', group: 0, notIf: 'from', tag: 'Noun', reason: 'a-noun-inf' },\n  //a tv show\n  { match: '(a|an) #Noun [#Infinitive]$', group: 0, tag: 'Noun', reason: 'a-noun-inf2' },\n  //is mark hughes\n  // { match: '#Copula [#Infinitive] #Noun', group: 0, tag: 'Noun', reason: 'is-pres-noun' },\n  // good wait staff\n  // { match: '#Adjective [#Infinitive] #Noun', group: 0, tag: 'Noun', reason: 'good-wait-staff' },\n  // running for congress\n  { match: '#Gerund #Adjective? for [#Infinitive]', group: 0, tag: 'Noun', reason: 'running-for' },\n  // running to work\n  // { match: '#Gerund #Adjective to [#Infinitive]', group: 0, tag: 'Noun', reason: 'running-to' },\n  // about love\n  { match: 'about [#Infinitive]', group: 0, tag: 'Singular', reason: 'about-love' },\n  // singers on stage\n  { match: '#Plural on [#Infinitive]', group: 0, tag: 'Noun', reason: 'on-stage' },\n  // any charge\n  { match: 'any [#Infinitive]', group: 0, tag: 'Noun', reason: 'any-charge' },\n  // no doubt\n  { match: 'no [#Infinitive]', group: 0, tag: 'Noun', reason: 'no-doubt' },\n  // number of seats\n  { match: 'number of [#PresentTense]', group: 0, tag: 'Noun', reason: 'number-of-x' },\n  // teaches/taught\n  { match: '(taught|teaches|learns|learned) [#PresentTense]', group: 0, tag: 'Noun', reason: 'teaches-x' },\n  // use reverse\n  { match: '(try|use|attempt|build|make) [#Verb #Particle?]', notIf: '(#Copula|#Noun|sure|fun|up)', group: 0, tag: 'Noun', reason: 'do-verb' },//make sure of\n  // checkmate is\n  { match: '^[#Infinitive] (is|was)', group: 0, tag: 'Noun', reason: 'checkmate-is' },\n  // get much sleep\n  { match: '#Infinitive much [#Infinitive]', group: 0, tag: 'Noun', reason: 'get-much' },\n  // cause i gotta\n  { match: '[cause] #Pronoun #Verb', group: 0, tag: 'Conjunction', reason: 'cause-cuz' },\n  // the cardio dance party\n  { match: 'the #Singular [#Infinitive] #Noun', group: 0, tag: 'Noun', notIf: '#Pronoun', reason: 'cardio-dance' },\n\n  // that should smoke\n  { match: '#Determiner #Modal [#Noun]', group: 0, tag: 'PresentTense', reason: 'should-smoke' },\n  //this rocks\n  { match: 'this [#Plural]', group: 0, tag: 'PresentTense', notIf: '(#Preposition|#Date)', reason: 'this-verbs' },\n  //voice that rocks\n  { match: '#Noun that [#Plural]', group: 0, tag: 'PresentTense', notIf: '(#Preposition|#Pronoun|way)', reason: 'voice-that-rocks' },\n  //that leads to\n  { match: 'that [#Plural] to', group: 0, tag: 'PresentTense', notIf: '#Preposition', reason: 'that-leads-to' },\n  //let him glue\n  {\n    match: '(let|make|made) (him|her|it|#Person|#Place|#Organization)+ [#Singular] (a|an|the|it)',\n    group: 0,\n    tag: 'Infinitive',\n    reason: 'let-him-glue',\n  },\n\n  // assign all tasks\n  { match: '#Verb (all|every|each|most|some|no) [#PresentTense]', notIf: '#Modal', group: 0, tag: 'Noun', reason: 'all-presentTense' },  // PresentTense/Noun ambiguities\n  // big dreams, critical thinking\n  // have big dreams\n  { match: '(had|have|#PastTense) #Adjective [#PresentTense]', group: 0, tag: 'Noun', notIf: 'better', reason: 'adj-presentTense' },\n  // excellent answer spencer\n  // { match: '^#Adjective [#PresentTense]', group: 0, tag: 'Noun', reason: 'start adj-presentTense' },\n  // one big reason\n  { match: '#Value #Adjective [#PresentTense]', group: 0, tag: 'Noun', notIf: '#Copula', reason: 'one-big-reason' },\n  // won widespread support\n  { match: '#PastTense #Adjective+ [#PresentTense]', group: 0, tag: 'Noun', notIf: '(#Copula|better)', reason: 'won-wide-support' },\n  // many poses\n  { match: '(many|few|several|couple) [#PresentTense]', group: 0, tag: 'Noun', notIf: '#Copula', reason: 'many-poses' },\n  // very big dreams\n  { match: '#Determiner #Adverb #Adjective [%Noun|Verb%]', group: 0, tag: 'Noun', notIf: '#Copula', reason: 'very-big-dream' },\n  // from start to finish\n  { match: 'from #Noun to [%Noun|Verb%]', group: 0, tag: 'Noun', reason: 'start-to-finish' },\n  // for comparison or contrast\n  { match: '(for|with|of) #Noun (and|or|not) [%Noun|Verb%]', group: 0, tag: 'Noun', notIf: '#Pronoun', reason: 'for-food-and-gas' },\n  // adorable little store\n  { match: '#Adjective #Adjective [#PresentTense]', group: 0, tag: 'Noun', notIf: '#Copula', reason: 'adorable-little-store' },\n  // of basic training\n  // { match: '#Preposition #Adjective [#PresentTense]', group: 0, tag: 'Noun', reason: 'of-basic-training' },\n  // justifiying higher costs\n  { match: '#Gerund #Adverb? #Comparative [#PresentTense]', group: 0, tag: 'Noun', notIf: '#Copula', reason: 'higher-costs' },\n\n  { match: '(#Noun && @hasComma) #Noun (and|or) [#PresentTense]', group: 0, tag: 'Noun', notIf: '#Copula', reason: 'noun-list' },\n\n  // any questions for\n  { match: '(many|any|some|several) [#PresentTense] for', group: 0, tag: 'Noun', reason: 'any-verbs-for' },\n  // to facilitate gas exchange with\n  { match: `to #PresentTense #Noun [#PresentTense] #Preposition`, group: 0, tag: 'Noun', reason: 'gas-exchange' },\n  // waited until release\n  { match: `#PastTense (until|as|through|without) [#PresentTense]`, group: 0, tag: 'Noun', reason: 'waited-until-release' },\n  // selling like hot cakes\n  { match: `#Gerund like #Adjective? [#PresentTense]`, group: 0, tag: 'Plural', reason: 'like-hot-cakes' },\n  // some valid reason\n  { match: `some #Adjective [#PresentTense]`, group: 0, tag: 'Noun', reason: 'some-reason' },\n  // for some reason\n  { match: `for some [#PresentTense]`, group: 0, tag: 'Noun', reason: 'for-some-reason' },\n  // same kind of shouts\n  { match: `(same|some|the|that|a) kind of [#PresentTense]`, group: 0, tag: 'Noun', reason: 'some-kind-of' },\n  // a type of shout\n  { match: `(same|some|the|that|a) type of [#PresentTense]`, group: 0, tag: 'Noun', reason: 'some-type-of' },\n  // doing better for fights\n  { match: `#Gerund #Adjective #Preposition [#PresentTense]`, group: 0, tag: 'Noun', reason: 'doing-better-for-x' },\n  // get better aim\n  { match: `(get|got|have) #Comparative [#PresentTense]`, group: 0, tag: 'Noun', reason: 'got-better-aim' },\n  // whose name was\n  { match: 'whose [#PresentTense] #Copula', group: 0, tag: 'Noun', reason: 'whos-name-was' },\n  // give up on reason\n  { match: `#PhrasalVerb #Particle #Preposition [#PresentTense]`, group: 0, tag: 'Noun', reason: 'given-up-on-x' },\n  //there are reasons\n  { match: 'there (are|were) #Adjective? [#PresentTense]', group: 0, tag: 'Plural', reason: 'there-are' },\n  // 30 trains\n  { match: '#Value [#PresentTense] of', group: 0, notIf: '(one|1|#Copula|#Infinitive)', tag: 'Plural', reason: '2-trains' },\n  // compromises are possible\n  { match: '[#PresentTense] (are|were) #Adjective', group: 0, tag: 'Plural', reason: 'compromises-are-possible' },\n  // hope i helped\n  { match: '^[(hope|guess|thought|think)] #Pronoun #Verb', group: 0, tag: 'Infinitive', reason: 'suppose-i' },\n  //pursue its dreams\n  // { match: '#PresentTense #Possessive [#PresentTense]', notIf: '#Gerund', group: 0, tag: 'Plural', reason: 'pursue-its-dreams' },\n  // our unyielding support\n  { match: '#Possessive #Adjective [#Verb]', group: 0, tag: 'Noun', notIf: '#Copula', reason: 'our-full-support' },\n  // tastes good\n  { match: '[(tastes|smells)] #Adverb? #Adjective', group: 0, tag: 'PresentTense', reason: 'tastes-good' },\n  // are you playing golf\n  // { match: '^are #Pronoun [#Noun]', group: 0, notIf: '(here|there)', tag: 'Verb', reason: 'are-you-x' },\n  // ignoring commute\n  { match: '#Copula #Gerund [#PresentTense] !by?', group: 0, tag: 'Noun', notIf: 'going', reason: 'ignoring-commute' },\n  // noun-pastTense variables\n  { match: '#Determiner #Adjective? [(shed|thought|rose|bid|saw|spelt)]', group: 0, tag: 'Noun', reason: 'noun-past' },\n\n  // 'verb-to'\n  // how to watch\n  { match: 'how to [%Noun|Verb%]', group: 0, tag: 'Infinitive', reason: 'how-to-noun' },\n  // which boost it\n  { match: 'which [%Noun|Verb%] #Noun', group: 0, tag: 'Infinitive', reason: 'which-boost-it' },\n  // asking questions\n  { match: '#Gerund [%Plural|Verb%]', group: 0, tag: 'Plural', reason: 'asking-questions' },\n  // ready to stream\n  { match: '(ready|available|difficult|hard|easy|made|attempt|try) to [%Noun|Verb%]', group: 0, tag: 'Infinitive', reason: 'ready-to-noun' },\n  // bring to market\n  { match: '(bring|went|go|drive|run|bike) to [%Noun|Verb%]', group: 0, tag: 'Noun', reason: 'bring-to-noun' },\n  // can i sleep, would you look\n  { match: '#Modal #Noun [%Noun|Verb%]', group: 0, tag: 'Infinitive', reason: 'would-you-look' },\n  // is just spam\n  { match: '#Copula just [#Infinitive]', group: 0, tag: 'Noun', reason: 'is-just-spam' },\n  // request copies\n  { match: '^%Noun|Verb% %Plural|Verb%', tag: 'Imperative #Plural', reason: 'request-copies' },\n  // homemade pickles and drinks\n  { match: '#Adjective #Plural and [%Plural|Verb%]', group: 0, tag: '#Plural', reason: 'pickles-and-drinks' },\n  // the 1968 film\n  { match: '#Determiner #Year [#Verb]', group: 0, tag: 'Noun', reason: 'the-1968-film' },\n  // the break up\n  { match: '#Determiner [#PhrasalVerb #Particle]', group: 0, tag: 'Noun', reason: 'the-break-up' },\n  // the individual goals\n  { match: '#Determiner [%Adj|Noun%] #Noun', group: 0, tag: 'Adjective', notIf: '(#Pronoun|#Possessive|#ProperNoun)', reason: 'the-individual-goals' },\n  // work or prepare\n  { match: '[%Noun|Verb%] or #Infinitive', group: 0, tag: 'Infinitive', reason: 'work-or-prepare' },\n  // to give thanks\n  { match: 'to #Infinitive [#PresentTense]', group: 0, tag: 'Noun', notIf: '(#Gerund|#Copula|help)', reason: 'to-give-thanks' },\n  // kills me\n  { match: '[#Noun] me', group: 0, tag: 'Verb', reason: 'kills-me' },\n  // removes wrinkles\n  { match: '%Plural|Verb% %Plural|Verb%', tag: '#PresentTense #Plural', reason: 'removes-wrinkles' },\n]\n", "export default [\n  { match: '#Money and #Money #Currency?', tag: 'Money', reason: 'money-and-money' },\n  // 6 dollars and 5 cents\n  { match: '#Value #Currency [and] #Value (cents|ore|centavos|sens)', group: 0, tag: 'money', reason: 'and-5-cents' },\n  // maybe currencies\n  { match: '#Value (mark|rand|won|rub|ore)', tag: '#Money #Currency', reason: '4-mark' },\n  // 3 pounds\n  { match: 'a pound', tag: '#Money #Unit', reason: 'a-pound' },\n  { match: '#Value (pound|pounds)', tag: '#Money #Unit', reason: '4-pounds' },\n]\n", "export default [\n  // half a penny\n  { match: '[(half|quarter)] of? (a|an)', group: 0, tag: 'Fraction', reason: 'millionth' },\n  // nearly half\n  { match: '#Adverb [half]', group: 0, tag: 'Fraction', reason: 'nearly-half' },\n  // half the\n  { match: '[half] the', group: 0, tag: 'Fraction', reason: 'half-the' },\n  // and a half\n  { match: '#Cardinal and a half', tag: 'Fraction', reason: 'and-a-half' },\n  // two-halves\n  { match: '#Value (halves|halfs|quarters)', tag: 'Fraction', reason: 'two-halves' },\n\n  // ---ordinals as fractions---\n  // a fifth\n  { match: 'a #Ordinal', tag: 'Fraction', reason: 'a-quarter' },\n  // seven fifths\n  { match: '[#Cardinal+] (#Fraction && /s$/)', tag: 'Fraction', reason: 'seven-fifths' },\n  // doc.match('(#Fraction && /s$/)').lookBefore('#Cardinal+$').tag('Fraction')\n  // one third of ..\n  { match: '[#Cardinal+ #Ordinal] of .', group: 0, tag: 'Fraction', reason: 'ordinal-of' },\n  // 100th of\n  { match: '[(#NumericValue && #Ordinal)] of .', group: 0, tag: 'Fraction', reason: 'num-ordinal-of' },\n  // a twenty fifth\n  { match: '(a|one) #Cardinal?+ #Ordinal', tag: 'Fraction', reason: 'a-ordinal' },\n\n  // //  '3 out of 5'\n  { match: '#Cardinal+ out? of every? #Cardinal', tag: 'Fraction', reason: 'out-of' },\n]\n\n// {match:'', tag:'',reason:''},\n", "export default [\n  // ==== Ambiguous numbers ====\n  // 'second'\n  { match: `#Cardinal [second]`, tag: 'Unit', reason: 'one-second' },\n  //'a/an' can mean 1 - \"a hour\"\n  {\n    match: '!once? [(a|an)] (#Duration|hundred|thousand|million|billion|trillion)',\n    group: 0,\n    tag: 'Value',\n    reason: 'a-is-one',\n  },\n  // ==== PhoneNumber ====\n  //1 800 ...\n  { match: '1 #Value #PhoneNumber', tag: 'PhoneNumber', reason: '1-800-Value' },\n  //(454) 232-9873\n  { match: '#NumericValue #PhoneNumber', tag: 'PhoneNumber', reason: '(800) PhoneNumber' },\n\n  // ==== Currency ====\n  // chinese yuan\n  { match: '#Demonym #Currency', tag: 'Currency', reason: 'demonym-currency' },\n  // ten bucks\n  { match: '#Value [(buck|bucks|grand)]', group: 0, tag: 'Currency', reason: 'value-bucks' },\n  // ==== Money ====\n  { match: '[#Value+] #Currency', group: 0, tag: 'Money', reason: '15 usd' },\n\n  // ==== Ordinal ====\n  { match: '[second] #Noun', group: 0, tag: 'Ordinal', reason: 'second-noun' },\n\n  // ==== Units ====\n  //5 yan\n  { match: '#Value+ [#Currency]', group: 0, tag: 'Unit', reason: '5-yan' },\n  { match: '#Value [(foot|feet)]', group: 0, tag: 'Unit', reason: 'foot-unit' },\n  //5 kg.\n  { match: '#Value [#Abbreviation]', group: 0, tag: 'Unit', reason: 'value-abbr' },\n  { match: '#Value [k]', group: 0, tag: 'Unit', reason: 'value-k' },\n  { match: '#Unit an hour', tag: 'Unit', reason: 'unit-an-hour' },\n\n  // ==== Magnitudes ====\n  //minus 7\n  { match: '(minus|negative) #Value', tag: 'Value', reason: 'minus-value' },\n  //seven point five\n  { match: '#Value (point|decimal) #Value', tag: 'Value', reason: 'value-point-value' },\n  //quarter million\n  { match: '#Determiner [(half|quarter)] #Ordinal', group: 0, tag: 'Value', reason: 'half-ordinal' },\n  // thousand and two\n  { match: `#Multiple+ and #Value`, tag: 'Value', reason: 'magnitude-and-value' },\n  // ambiguous units like 'gb'\n  // { match: '#Value square? [(kb|mb|gb|tb|ml|pt|qt|tbl|tbsp|km|cm|mm|mi|ft|yd|kg|hg|mg|oz|lb|mph|pa|miles|yard|yards|pound|pounds)]', group: 0, tag: 'Unit', reason: '12-gb' },\n  // 5 miles per hour\n  { match: '#Value #Unit [(per|an) (hr|hour|sec|second|min|minute)]', group: 0, tag: 'Unit', reason: '12-miles-per-second' },\n  // 5 square miles\n  { match: '#Value [(square|cubic)] #Unit', group: 0, tag: 'Unit', reason: 'square-miles' },\n  // 5) The expenses\n  // { match: '^[#Value] (#Determiner|#Gerund)', group: 0, tag: 'Expression', unTag: 'Value', reason: 'numbered-list' },\n]\n", "export default [\n  // ==== FirstNames ====\n  //is foo Smith\n  { match: '#Copula [(#Noun|#PresentTense)] #LastName', group: 0, tag: 'FirstName', reason: 'copula-noun-lastname' },\n  //pope francis\n  {\n    match: '(sister|pope|brother|father|aunt|uncle|grandpa|grandfather|grandma) #ProperNoun',\n    tag: 'Person',\n    reason: 'lady-titlecase',\n    safe: true,\n  },\n\n  // ==== Nickname ====\n  // Dwayne 'the rock' Johnson\n  { match: '#FirstName [#Determiner #Noun] #LastName', group: 0, tag: 'Person', reason: 'first-noun-last' },\n  {\n    match: '#ProperNoun (b|c|d|e|f|g|h|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z) #ProperNoun',\n    tag: 'Person',\n    reason: 'titlecase-acronym-titlecase',\n    safe: true,\n  },\n  { match: '#Acronym #LastName', tag: 'Person', reason: 'acronym-lastname', safe: true },\n  { match: '#Person (jr|sr|md)', tag: 'Person', reason: 'person-honorific' },\n  //remove single 'mr'\n  { match: '#Honorific #Acronym', tag: 'Person', reason: 'Honorific-TitleCase' },\n  { match: '#Person #Person the? #RomanNumeral', tag: 'Person', reason: 'roman-numeral' },\n  { match: '#FirstName [/^[^aiurck]$/]', group: 0, tag: ['Acronym', 'Person'], reason: 'john-e' },\n  //j.k Rowling\n  { match: '#Noun van der? #Noun', tag: 'Person', reason: 'van der noun', safe: true },\n  //king of spain\n  { match: '(king|queen|prince|saint|lady) of #Noun', tag: 'Person', reason: 'king-of-noun', safe: true },\n  //lady Florence\n  { match: '(prince|lady) #Place', tag: 'Person', reason: 'lady-place' },\n  //saint Foo\n  { match: '(king|queen|prince|saint) #ProperNoun', tag: 'Person', notIf: '#Place', reason: 'saint-foo' },\n\n  // al sharpton\n  { match: 'al (#Person|#ProperNoun)', tag: 'Person', reason: 'al-borlen', safe: true },\n  //ferdinand de almar\n  { match: '#FirstName de #Noun', tag: 'Person', reason: 'bill-de-noun' },\n  //Osama bin Laden\n  { match: '#FirstName (bin|al) #Noun', tag: 'Person', reason: 'bill-al-noun' },\n  //John L. Foo\n  { match: '#FirstName #Acronym #ProperNoun', tag: 'Person', reason: 'bill-acronym-title' },\n  //Andrew Lloyd Webber\n  { match: '#FirstName #FirstName #ProperNoun', tag: 'Person', reason: 'bill-firstname-title' },\n  //Mr Foo\n  { match: '#Honorific #FirstName? #ProperNoun', tag: 'Person', reason: 'dr-john-Title' },\n  //peter the great\n  { match: '#FirstName the #Adjective', tag: 'Person', reason: 'name-the-great' },\n\n  // dick van dyke\n  { match: '#ProperNoun (van|al|bin) #ProperNoun', tag: 'Person', reason: 'title-van-title', safe: true },\n  //jose de Sucre\n  { match: '#ProperNoun (de|du) la? #ProperNoun', tag: 'Person', notIf: '#Place', reason: 'title-de-title' },\n  //Jani K. Smith\n  { match: '#Singular #Acronym #LastName', tag: '#FirstName #Person .', reason: 'title-acro-noun', safe: true },\n  //Foo Ford\n  { match: '[#ProperNoun] #Person', group: 0, tag: 'Person', reason: 'proper-person', safe: true },\n  // john keith jones\n  {\n    match: '#Person [#ProperNoun #ProperNoun]',\n    group: 0,\n    tag: 'Person',\n    notIf: '#Possessive',\n    reason: 'three-name-person',\n    safe: true,\n  },\n  //John Foo\n  {\n    match: '#FirstName #Acronym? [#ProperNoun]',\n    group: 0,\n    tag: 'LastName',\n    notIf: '#Possessive',\n    reason: 'firstname-titlecase',\n  },\n  // john stewart\n  { match: '#FirstName [#FirstName]', group: 0, tag: 'LastName', reason: 'firstname-firstname' },\n  //Joe K. Sombrero\n  { match: '#FirstName #Acronym #Noun', tag: 'Person', reason: 'n-acro-noun', safe: true },\n  //Anthony de Marco\n  { match: '#FirstName [(de|di|du|van|von)] #Person', group: 0, tag: 'LastName', reason: 'de-firstname' },\n\n  // baker jenna smith\n  // { match: '[#Actor+] #Person', group: 0, tag: 'Person', reason: 'baker-sam-smith' },\n  // sergeant major Harold\n  {\n    match:\n      '[(lieutenant|corporal|sergeant|captain|qeen|king|admiral|major|colonel|marshal|president|queen|king)+] #ProperNoun',\n    group: 0,\n    tag: 'Honorific',\n    reason: 'seargeant-john',\n  },\n  // ==== Honorics ====\n  {\n    match: '[(private|general|major|rear|prime|field|count|miss)] #Honorific? #Person',\n    group: 0,\n    tag: ['Honorific', 'Person'],\n    reason: 'ambg-honorifics',\n  },\n  // dr john foobar\n  {\n    match: '#Honorific #FirstName [#Singular]',\n    group: 0,\n    tag: 'LastName',\n    notIf: '#Possessive',\n    reason: 'dr-john-foo',\n    safe: true,\n  },\n  //his-excellency\n  {\n    match: '[(his|her) (majesty|honour|worship|excellency|honorable)] #Person',\n    group: 0,\n    tag: 'Honorific',\n    reason: 'his-excellency',\n  },\n  // Lieutenant colonel\n  { match: '#Honorific #Actor', tag: 'Honorific', reason: 'Lieutenant colonel' },\n  // first lady, second admiral\n  { match: '(first|second|third|1st|2nd|3rd) #Actor', tag: 'Honorific', reason: 'first lady' },\n  // Louis IV\n  { match: '#Person #RomanNumeral', tag: 'Person', reason: 'louis-IV' },\n]\n", "// const personAdj = '(misty|rusty|dusty|rich|randy|sandy|young|earnest|frank|brown)'\n\nexport default [\n  // ebenezer scrooge\n  {\n    match: '#FirstName #Noun$',\n    tag: '. #LastName',\n    notIf: '(#Possessive|#Organization|#Place|#Pronoun|@hasTitleCase)',\n    reason: 'firstname-noun',\n  },\n\n  // ===person-date===\n  { match: '%Person|Date% #Acronym? #ProperNoun', tag: 'Person', reason: 'jan-thierson' },\n  // ===person-noun===\n  //Cliff Clavin\n  { match: '%Person|Noun% #Acronym? #ProperNoun', tag: 'Person', reason: 'switch-person', safe: true },\n  // olive garden\n  { match: '%Person|Noun% #Organization', tag: 'Organization', reason: 'olive-garden' },\n  // ===person-verb===\n  // ollie faroo\n  { match: '%Person|Verb% #Acronym? #ProperNoun', tag: 'Person', reason: 'verb-propernoun', ifNo: '#Actor' },\n  // chuck will ...\n  {\n    match: `[%Person|Verb%] (will|had|has|said|says|told|did|learned|wants|wanted)`,\n    group: 0,\n    tag: 'Person',\n    reason: 'person-said',\n  },\n\n  // ===person-place===\n  //sydney harbour\n  {\n    match: `[%Person|Place%] (harbor|harbour|pier|town|city|place|dump|landfill)`,\n    group: 0,\n    tag: 'Place',\n    reason: 'sydney-harbour',\n  },\n  // east sydney\n  { match: `(west|east|north|south) [%Person|Place%]`, group: 0, tag: 'Place', reason: 'east-sydney' },\n\n  // ===person-adjective===\n  // rusty smith\n  // { match: `${personAdj} #Person`, tag: 'Person', reason: 'randy-smith' },\n  // rusty a. smith\n  // { match: `${personAdj} #Acronym? #ProperNoun`, tag: 'Person', reason: 'rusty-smith' },\n  // very rusty\n  // { match: `#Adverb [${personAdj}]`, group: 0, tag: 'Adjective', reason: 'really-rich' },\n\n  // ===person-verb===\n  // would wade\n  { match: `#Modal [%Person|Verb%]`, group: 0, tag: 'Verb', reason: 'would-mark' },\n  // really wade\n  { match: `#Adverb [%Person|Verb%]`, group: 0, tag: 'Verb', reason: 'really-mark' },\n  // drew closer\n  { match: `[%Person|Verb%] (#Adverb|#Comparative)`, group: 0, tag: 'Verb', reason: 'drew-closer' },\n  // wade smith\n  { match: `%Person|Verb% #Person`, tag: 'Person', reason: 'rob-smith' },\n  // wade m. Cooper\n  { match: `%Person|Verb% #Acronym #ProperNoun`, tag: 'Person', reason: 'rob-a-smith' },\n  // will go\n  { match: '[will] #Verb', group: 0, tag: 'Modal', reason: 'will-verb' },\n  // will Pharell\n  { match: '(will && @isTitleCase) #ProperNoun', tag: 'Person', reason: 'will-name' },\n  // jack layton won\n  {\n    match: '(#FirstName && !#Possessive) [#Singular] #Verb',\n    group: 0,\n    safe: true,\n    tag: 'LastName',\n    reason: 'jack-layton',\n  },\n  // sherwood anderson told\n  { match: '^[#Singular] #Person #Verb', group: 0, safe: true, tag: 'Person', reason: 'sherwood-anderson' },\n  // bought a warhol\n  { match: '(a|an) [#Person]$', group: 0, unTag: 'Person', reason: 'a-warhol' },\n]\n", "export default [\n  //sometimes adverbs - 'pretty good','well above'\n  {\n    match: '#Copula (pretty|dead|full|well|sure) (#Adjective|#Noun)',\n    tag: '#Copula #Adverb #Adjective',\n    reason: 'sometimes-adverb',\n  },\n  //i better ..\n  { match: '(#Pronoun|#Person) (had|#Adverb)? [better] #PresentTense', group: 0, tag: 'Modal', reason: 'i-better' },\n  // adj -> gerund\n  // like\n  { match: '(#Modal|i|they|we|do) not? [like]', group: 0, tag: 'PresentTense', reason: 'modal-like' },\n  // ==== Tense ====\n  //he left\n  { match: '#Noun #Adverb? [left]', group: 0, tag: 'PastTense', reason: 'left-verb' },\n\n  // ==== Copula ====\n  //will be running (not copula)\n  { match: 'will #Adverb? not? #Adverb? [be] #Gerund', group: 0, tag: 'Copula', reason: 'will-be-copula' },\n  //for more complex forms, just tag 'be'\n  { match: 'will #Adverb? not? #Adverb? [be] #Adjective', group: 0, tag: 'Copula', reason: 'be-copula' },\n  // ==== Infinitive ====\n  //march to\n  { match: '[march] (up|down|back|toward)', notIf: '#Date', group: 0, tag: 'Infinitive', reason: 'march-to' },\n  //must march\n  { match: '#Modal [march]', group: 0, tag: 'Infinitive', reason: 'must-march' },\n  // may be\n  { match: `[may] be`, group: 0, tag: 'Verb', reason: 'may-be' },\n  // subject to\n  { match: `[(subject|subjects|subjected)] to`, group: 0, tag: 'Verb', reason: 'subject to' },\n  // subject to\n  { match: `[home] to`, group: 0, tag: 'PresentTense', reason: 'home to' },\n\n  // === misc==\n  // side with\n  // { match: '[(side|fool|monkey)] with', group: 0, tag: 'Infinitive', reason: 'fool-with' },\n  // open the door\n  { match: '[open] #Determiner', group: 0, tag: 'Infinitive', reason: 'open-the' },\n  //were being run\n  { match: `(were|was) being [#PresentTense]`, group: 0, tag: 'PastTense', reason: 'was-being' },\n  //had been broken\n  { match: `(had|has|have) [been /en$/]`, group: 0, tag: 'Auxiliary Participle', reason: 'had-been-broken' },\n  //had been smoked\n  { match: `(had|has|have) [been /ed$/]`, group: 0, tag: 'Auxiliary PastTense', reason: 'had-been-smoked' },\n  //were being run\n  { match: `(had|has) #Adverb? [been] #Adverb? #PastTense`, group: 0, tag: 'Auxiliary', reason: 'had-been-adj' },\n  //had to walk\n  { match: `(had|has) to [#Noun] (#Determiner|#Possessive)`, group: 0, tag: 'Infinitive', reason: 'had-to-noun' },\n  // have read\n  { match: `have [#PresentTense]`, group: 0, tag: 'PastTense', notIf: '(come|gotten)', reason: 'have-read' },\n  // does that work\n  { match: `(does|will|#Modal) that [work]`, group: 0, tag: 'PastTense', reason: 'does-that-work' },\n  // sounds fun\n  { match: `[(sound|sounds)] #Adjective`, group: 0, tag: 'PresentTense', reason: 'sounds-fun' },\n  // look good\n  { match: `[(look|looks)] #Adjective`, group: 0, tag: 'PresentTense', reason: 'looks-good' },\n  // stops thinking\n  { match: `[(start|starts|stop|stops|begin|begins)] #Gerund`, group: 0, tag: 'Verb', reason: 'starts-thinking' },\n  // have read\n  { match: `(have|had) read`, tag: 'Modal #PastTense', reason: 'read-read' },\n  //were under cooked\n  {\n    match: `(is|was|were) [(under|over) #PastTense]`,\n    group: 0,\n    tag: 'Adverb Adjective',\n    reason: 'was-under-cooked',\n  },\n\n  // damn them\n  { match: '[shit] (#Determiner|#Possessive|them)', group: 0, tag: 'Verb', reason: 'swear1-verb' },\n  { match: '[damn] (#Determiner|#Possessive|them)', group: 0, tag: 'Verb', reason: 'swear2-verb' },\n  { match: '[fuck] (#Determiner|#Possessive|them)', group: 0, tag: 'Verb', reason: 'swear3-verb' },\n\n  // jobs that fit\n  { match: '#Plural that %Noun|Verb%', tag: '. #Preposition #Infinitive', reason: 'jobs-that-work' },\n  // works for me\n  { match: '[works] for me', group: 0, tag: 'PresentTense', reason: 'works-for-me' },\n  // as we please\n  { match: 'as #Pronoun [please]', group: 0, tag: 'Infinitive', reason: 'as-we-please' },\n  // verb-prefixes - 'co write'\n  { match: '[(co|mis|de|inter|intra|pre|re|un|out|under|over|counter)] #Verb', group: 0, tag: ['Verb', 'Prefix'], notIf: '(#Copula|#PhrasalVerb)', reason: 'co-write' },\n  // dressed and left\n  { match: '#PastTense and [%Adj|Past%]', group: 0, tag: 'PastTense', reason: 'dressed-and-left' },\n  // melted and fallen\n  { match: '[%Adj|Past%] and #PastTense', group: 0, tag: 'PastTense', reason: 'dressed-and-left' },\n  // is he stoked\n  { match: '#Copula #Pronoun [%Adj|Past%]', group: 0, tag: 'Adjective', reason: 'is-he-stoked' },\n  // to dream of\n  { match: 'to [%Noun|Verb%] #Preposition', group: 0, tag: 'Infinitive', reason: 'to-dream-of' },\n]\n", "// these are some of our heaviest-used matches\nexport default [\n  // ==== Auxiliary ====\n  // have been\n  { match: `will (#Adverb|not)+? [have] (#Adverb|not)+? #Verb`, group: 0, tag: 'Auxiliary', reason: 'will-have-vb' },\n  //was walking\n  { match: `[#Copula] (#Adverb|not)+? (#Gerund|#PastTense)`, group: 0, tag: 'Auxiliary', reason: 'copula-walking' },\n  //would walk\n  { match: `[(#Modal|did)+] (#Adverb|not)+? #Verb`, group: 0, tag: 'Auxiliary', reason: 'modal-verb' },\n  //would have had\n  { match: `#Modal (#Adverb|not)+? [have] (#Adverb|not)+? [had] (#Adverb|not)+? #Verb`, group: 0, tag: 'Auxiliary', reason: 'would-have' },\n  //support a splattering of auxillaries before a verb\n  { match: `[(has|had)] (#Adverb|not)+? #PastTense`, group: 0, tag: 'Auxiliary', reason: 'had-walked' },\n  // will walk\n  { match: '[(do|does|did|will|have|had|has|got)] (not|#Adverb)+? #Verb', group: 0, tag: 'Auxiliary', reason: 'have-had' },\n  // about to go\n  { match: '[about to] #Adverb? #Verb', group: 0, tag: ['Auxiliary', 'Verb'], reason: 'about-to' },\n  //would be walking\n  { match: `#Modal (#Adverb|not)+? [be] (#Adverb|not)+? #Verb`, group: 0, tag: 'Auxiliary', reason: 'would-be' },\n  //had been walking\n  { match: `[(#Modal|had|has)] (#Adverb|not)+? [been] (#Adverb|not)+? #Verb`, group: 0, tag: 'Auxiliary', reason: 'had-been' },\n  // was being driven\n  { match: '[(be|being|been)] #Participle', group: 0, tag: 'Auxiliary', reason: 'being-driven' },\n  // may want\n  { match: '[may] #Adverb? #Infinitive', group: 0, tag: 'Auxiliary', reason: 'may-want' },\n  // was being walked\n  { match: '#Copula (#Adverb|not)+? [(be|being|been)] #Adverb+? #PastTense', group: 0, tag: 'Auxiliary', reason: 'being-walked' },\n  // will be walked\n  { match: 'will [be] #PastTense', group: 0, tag: 'Auxiliary', reason: 'will-be-x' },\n  // been walking\n  { match: '[(be|been)] (#Adverb|not)+? #Gerund', group: 0, tag: 'Auxiliary', reason: 'been-walking' },\n  // used to walk\n  { match: '[used to] #PresentTense', group: 0, tag: 'Auxiliary', reason: 'used-to-walk' },\n  // was going to walk\n  { match: '#Copula (#Adverb|not)+? [going to] #Adverb+? #PresentTense', group: 0, tag: 'Auxiliary', reason: 'going-to-walk' },\n  // tell me\n  { match: '#Imperative [(me|him|her)]', group: 0, tag: 'Reflexive', reason: 'tell-him' },\n  // there is no x\n  { match: '(is|was) #Adverb? [no]', group: 0, tag: 'Negative', reason: 'is-no' },\n  // been told\n  { match: '[(been|had|became|came)] #PastTense', group: 0, notIf: '#PhrasalVerb', tag: 'Auxiliary', reason: 'been-told' },\n  // being born\n  { match: '[(being|having|getting)] #Verb', group: 0, tag: 'Auxiliary', reason: 'being-born' },\n  // be walking\n  { match: '[be] #Gerund', group: 0, tag: 'Auxiliary', reason: 'be-walking' },\n  // better go\n  { match: '[better] #PresentTense', group: 0, tag: 'Modal', notIf: '(#Copula|#Gerund)', reason: 'better-go' },\n  // even better\n  { match: 'even better', tag: 'Adverb #Comparative', reason: 'even-better' },\n]\n", "export default [\n  // ==== Phrasal ====\n  //'foo-up'\n  { match: '(#Verb && @hasHyphen) up', tag: 'PhrasalVerb', reason: 'foo-up' },\n  { match: '(#Verb && @hasHyphen) off', tag: 'PhrasalVerb', reason: 'foo-off' },\n  { match: '(#Verb && @hasHyphen) over', tag: 'PhrasalVerb', reason: 'foo-over' },\n  { match: '(#Verb && @hasHyphen) out', tag: 'PhrasalVerb', reason: 'foo-out' },\n  // walk in on\n  {\n    match: '[#Verb (in|out|up|down|off|back)] (on|in)',\n    notIf: '#Copula',\n    tag: 'PhrasalVerb Particle',\n    reason: 'walk-in-on',\n  },\n  // went on for\n  { match: '(lived|went|crept|go) [on] for', group: 0, tag: 'PhrasalVerb', reason: 'went-on' },\n  // the curtains come down\n  { match: '#Verb (up|down|in|on|for)$', tag: 'PhrasalVerb #Particle', notIf: '#PhrasalVerb', reason: 'come-down$' },\n  // got me thinking\n  // { match: '(got|had) me [#Noun]', group: 0, tag: 'Verb', reason: 'got-me-gerund' },\n  // help stop\n  { match: 'help [(stop|end|make|start)]', group: 0, tag: 'Infinitive', reason: 'help-stop' },\n  // work in the office\n  { match: '#PhrasalVerb (in && #Particle) #Determiner', tag: '#Verb #Preposition #Determiner', unTag: 'PhrasalVerb', reason: 'work-in-the' },\n  // start listening\n  { match: '[(stop|start|finish|help)] #Gerund', group: 0, tag: 'Infinitive', reason: 'start-listening' },\n  // mis-fired\n  // { match: '[(mis)] #Verb', group: 0, tag: 'Verb', reason: 'mis-firedsa' },\n  //back it up\n  {\n    match: '#Verb (him|her|it|us|himself|herself|itself|everything|something) [(up|down)]',\n    group: 0,\n    tag: 'Adverb',\n    reason: 'phrasal-pronoun-advb',\n  },\n]\n", "// this is really hard to do\nconst notIf = '(i|we|they)' //we do not go\nexport default [\n  // do not go\n  { match: '^do not? [#Infinitive #Particle?]', notIf, group: 0, tag: 'Imperative', reason: 'do-eat' },\n  // please go\n  { match: '^please do? not? [#Infinitive #Particle?]', group: 0, tag: 'Imperative', reason: 'please-go' },\n  // just go\n  { match: '^just do? not? [#Infinitive #Particle?]', group: 0, tag: 'Imperative', reason: 'just-go' },\n  // do it better\n  { match: '^[#Infinitive] it #Comparative', notIf, group: 0, tag: 'Imperative', reason: 'do-it-better' },\n  // do it again\n  { match: '^[#Infinitive] it (please|now|again|plz)', notIf, group: 0, tag: 'Imperative', reason: 'do-it-please' },\n  // go quickly.\n  { match: '^[#Infinitive] (#Adjective|#Adverb)$', group: 0, tag: 'Imperative', notIf: '(so|such|rather|enough)', reason: 'go-quickly' },\n  // turn down the noise\n  { match: '^[#Infinitive] (up|down|over) #Determiner', group: 0, tag: 'Imperative', reason: 'turn-down' },\n  // eat my shorts\n  { match: '^[#Infinitive] (your|my|the|a|an|any|each|every|some|more|with|on)', group: 0, notIf: 'like', tag: 'Imperative', reason: 'eat-my-shorts' },\n  // tell him the story\n  { match: '^[#Infinitive] (him|her|it|us|me|there)', group: 0, tag: 'Imperative', reason: 'tell-him' },\n  // avoid loud noises\n  { match: '^[#Infinitive] #Adjective #Noun$', group: 0, tag: 'Imperative', reason: 'avoid-loud-noises' },\n  // call and reserve\n  { match: '^[#Infinitive] (#Adjective|#Adverb)? and #Infinitive', group: 0, tag: 'Imperative', reason: 'call-and-reserve' },\n  // one-word imperatives\n  { match: '^(go|stop|wait|hurry) please?$', tag: 'Imperative', reason: 'go' },\n  // somebody call\n  { match: '^(somebody|everybody) [#Infinitive]', group: 0, tag: 'Imperative', reason: 'somebody-call' },\n  // let's leave\n  { match: '^let (us|me) [#Infinitive]', group: 0, tag: 'Imperative', reason: 'lets-leave' },\n  // shut the door\n  { match: '^[(shut|close|open|start|stop|end|keep)] #Determiner #Noun', group: 0, tag: 'Imperative', reason: 'shut-the-door' },\n  // turn off the light\n  { match: '^[#PhrasalVerb #Particle] #Determiner #Noun', group: 0, tag: 'Imperative', reason: 'turn-off-the-light' },\n  // go to toronto\n  { match: '^[go] to .', group: 0, tag: 'Imperative', reason: 'go-to-toronto' },\n  // would you recommend\n  { match: '^#Modal you [#Infinitive]', group: 0, tag: 'Imperative', reason: 'would-you-' },\n  // never say\n  { match: '^never [#Infinitive]', group: 0, tag: 'Imperative', reason: 'never-stop' },\n  // come have a drink\n  { match: '^come #Infinitive', tag: 'Imperative', notIf: 'on', reason: 'come-have' },\n  // come and have a drink\n  { match: '^come and? #Infinitive', tag: 'Imperative . Imperative', notIf: '#PhrasalVerb', reason: 'come-and-have' },\n  // stay away\n  { match: '^stay (out|away|back)', tag: 'Imperative', reason: 'stay-away' },\n  // stay cool\n  { match: '^[(stay|be|keep)] #Adjective', group: 0, tag: 'Imperative', reason: 'stay-cool' },\n  // keep it silent\n  { match: '^[keep it] #Adjective', group: 0, tag: 'Imperative', reason: 'keep-it-cool' },\n  // don't be late\n  { match: '^do not [#Infinitive]', group: 0, tag: 'Imperative', reason: 'do-not-be' },\n  // allow yourself\n  { match: '[#Infinitive] (yourself|yourselves)', group: 0, tag: 'Imperative', reason: 'allow-yourself' },\n  // look what\n  { match: '[#Infinitive] what .', group: 0, tag: 'Imperative', reason: 'look-what' },\n  // continue playing\n  { match: '^[#Infinitive] #Gerund', group: 0, tag: 'Imperative', reason: 'keep-playing' },\n  // go to it\n  { match: '^[#Infinitive] (to|for|into|toward|here|there)', group: 0, tag: 'Imperative', reason: 'go-to' },\n  // relax and unwind\n  { match: '^[#Infinitive] (and|or) #Infinitive', group: 0, tag: 'Imperative', reason: 'inf-and-inf' },\n\n  // commit to\n  { match: '^[%Noun|Verb%] to', group: 0, tag: 'Imperative', reason: 'commit-to' },\n  // maintain eye contact\n  { match: '^[#Infinitive] #Adjective? #Singular #Singular', group: 0, tag: 'Imperative', reason: 'maintain-eye-contact' },\n  // don't forget to clean\n  { match: 'do not (forget|omit|neglect) to [#Infinitive]', group: 0, tag: 'Imperative', reason: 'do-not-forget' },\n  // pay attention\n  { match: '^[(ask|wear|pay|look|help|show|watch|act|fix|kill|stop|start|turn|try|win)] #Noun', group: 0, tag: 'Imperative', reason: 'pay-attention' },\n\n]", "export default [\n  // that were growing\n  { match: '(that|which) were [%Adj|Gerund%]', group: 0, tag: 'Gerund', reason: 'that-were-growing' },\n  // was dissapointing\n  // { match: '#Copula [%Adj|Gerund%]$', group: 0, tag: 'Adjective', reason: 'was-disappointing$' },\n\n  // repairing crubling roads\n  { match: '#Gerund [#Gerund] #Plural', group: 0, tag: 'Adjective', reason: 'hard-working-fam' },\n\n  // { match: '(that|which) were [%Adj|Gerund%]', group: 0, tag: 'Gerund', reason: 'that-were-growing' },\n]\n", "// ==== Passive voice ===\nexport default [\n  // got walked, was walked, were walked\n  { match: '(got|were|was|is|are|am) (#PastTense|#Participle)', tag: 'Passive', reason: 'got-walked' },\n  // was being walked\n  { match: '(was|were|is|are|am) being (#PastTense|#Participle)', tag: 'Passive', reason: 'was-being' },\n  // had been walked, have been eaten\n  { match: '(had|have|has) been (#PastTense|#Participle)', tag: 'Passive', reason: 'had-been' },\n  // will be cleaned\n  { match: 'will be being? (#PastTense|#Participle)', tag: 'Passive', reason: 'will-be-cleaned' },\n  // suffered by the country\n  { match: '#Noun [(#PastTense|#Participle)] by (the|a) #Noun', group: 0, tag: 'Passive', reason: 'suffered-by' },\n\n]", "// order matters\nlet matches = [\n  // u r cool\n  { match: 'u r', tag: '#Pronoun #Copula', reason: 'u r' },\n  { match: '#Noun [(who|whom)]', group: 0, tag: 'Determiner', reason: 'captain-who' },\n\n  // ==== Conditions ====\n  // had he survived,\n  { match: '[had] #Noun+ #PastTense', group: 0, tag: 'Condition', reason: 'had-he' },\n  // were he to survive\n  { match: '[were] #Noun+ to #Infinitive', group: 0, tag: 'Condition', reason: 'were-he' },\n\n  // some sort of\n  { match: 'some sort of', tag: 'Adjective Noun Conjunction', reason: 'some-sort-of' },\n  // some of\n  // { match: 'some of', tag: 'Noun Conjunction', reason: 'some-of' },\n  // of some sort\n  { match: 'of some sort', tag: 'Conjunction Adjective Noun', reason: 'of-some-sort' },\n  // such skill\n  { match: '[such] (a|an|is)? #Noun', group: 0, tag: 'Determiner', reason: 'such-skill' },\n  // another one\n  // { match: '[another] (#Noun|#Value)', group: 0, tag: 'Adjective', reason: 'another-one' },\n  // right after\n  { match: '[right] (before|after|in|into|to|toward)', group: 0, tag: '#Adverb', reason: 'right-into' },\n  // at about\n  { match: '#Preposition [about]', group: 0, tag: 'Adjective', reason: 'at-about' },\n  // are ya\n  { match: '(are|#Modal|see|do|for) [ya]', group: 0, tag: 'Pronoun', reason: 'are-ya' },\n  // long live\n  { match: '[long live] .', group: 0, tag: '#Adjective #Infinitive', reason: 'long-live' },\n  // plenty of\n  { match: '[plenty] of', group: 0, tag: '#Uncountable', reason: 'plenty-of' },\n  // 'there' as adjective\n  { match: '(always|nearly|barely|practically) [there]', group: 0, tag: 'Adjective', reason: 'always-there' },\n  // existential 'there'\n  // there she is\n  { match: '[there] (#Adverb|#Pronoun)? #Copula', group: 0, tag: 'There', reason: 'there-is' },\n  // is there food\n  { match: '#Copula [there] .', group: 0, tag: 'There', reason: 'is-there' },\n  // should there\n  { match: '#Modal #Adverb? [there]', group: 0, tag: 'There', reason: 'should-there' },\n  // do you\n  { match: '^[do] (you|we|they)', group: 0, tag: 'QuestionWord', reason: 'do-you' },\n  // does he\n  { match: '^[does] (he|she|it|#ProperNoun)', group: 0, tag: 'QuestionWord', reason: 'does-he' },\n  // the person who\n  { match: '#Determiner #Noun+ [who] #Verb', group: 0, tag: 'Preposition', reason: 'the-x-who' },\n  // the person which\n  { match: '#Determiner #Noun+ [which] #Verb', group: 0, tag: 'Preposition', reason: 'the-x-which' },\n  // a while\n  { match: 'a [while]', group: 0, tag: 'Noun', reason: 'a-while' },\n  // guess who\n  { match: 'guess who', tag: '#Infinitive #QuestionWord', reason: 'guess-who' },\n  // swear words\n  { match: '[fucking] !#Verb', group: 0, tag: '#Gerund', reason: 'f-as-gerund' },\n]\nexport default matches\n", "// import orgWords from './_orgWords.js'\n// let orgMap = `(${orgWords.join('|')})`\n\n/*\nconst multi = [\n  'building society',\n  'central bank',\n  'department store',\n  'institute of technology',\n  'liberation army',\n  'people party',\n  'social club',\n  'state police',\n  'state university',\n]\n*/\n\nexport default [\n  // Foo University\n  // { match: `#Noun ${orgMap}`, tag: 'Organization', safe: true, reason: 'foo-university' },\n  // // University of Toronto\n  // { match: `${orgMap} of #Place`, tag: 'Organization', safe: true, reason: 'university-of-foo' },\n\n  // // foo regional health authority\n  // { match: `${orgMap} (health|local|regional)+ authority`, tag: 'Organization', reason: 'regional-health' },\n  // // foo stock exchange\n  // { match: `${orgMap} (stock|mergantile)+ exchange`, tag: 'Organization', reason: 'stock-exchange' },\n  // // foo news service\n  // { match: `${orgMap} (daily|evening|local)+ news service?`, tag: 'Organization', reason: 'foo-news' },\n  //University of Foo\n  { match: 'university of #Place', tag: 'Organization', reason: 'university-of-Foo' },\n  //John & Joe's\n  { match: '#Noun (&|n) #Noun', tag: 'Organization', reason: 'Noun-&-Noun' },\n  // teachers union of Ontario\n  { match: '#Organization of the? #ProperNoun', tag: 'Organization', reason: 'org-of-place', safe: true },\n  //walmart USA\n  { match: '#Organization #Country', tag: 'Organization', reason: 'org-country' },\n  //organization\n  { match: '#ProperNoun #Organization', tag: 'Organization', notIf: '#FirstName', reason: 'titlecase-org' },\n  //FitBit Inc\n  { match: '#ProperNoun (ltd|co|inc|dept|assn|bros)', tag: 'Organization', reason: 'org-abbrv' },\n  // the OCED\n  { match: 'the [#Acronym]', group: 0, tag: 'Organization', reason: 'the-acronym', safe: true },\n  // government of india\n  { match: 'government of the? [#Place+]', tag: 'Organization', reason: 'government-of-x' },\n  // school board\n  { match: '(health|school|commerce) board', tag: 'Organization', reason: 'school-board' },\n  // special comittee\n  {\n    match: '(nominating|special|conference|executive|steering|central|congressional) committee',\n    tag: 'Organization',\n    reason: 'special-comittee',\n  },\n  // global trade union\n  {\n    match: '(world|global|international|national|#Demonym) #Organization',\n    tag: 'Organization',\n    reason: 'global-org',\n  },\n  // schools\n  { match: '#Noun+ (public|private) school', tag: 'School', reason: 'noun-public-school' },\n  // new york yankees\n  { match: '#Place+ #SportsTeam', tag: 'SportsTeam', reason: 'place-sportsteam' },\n  // 'manchester united'\n  {\n    match: '(dc|atlanta|minnesota|manchester|newcastle|sheffield) united',\n    tag: 'SportsTeam',\n    reason: 'united-sportsteam',\n  },\n  // 'toronto fc'\n  { match: '#Place+ fc', tag: 'SportsTeam', reason: 'fc-sportsteam' },\n\n  // baltimore quilting club\n  {\n    match: '#Place+ #Noun{0,2} (club|society|group|team|committee|commission|association|guild|crew)',\n    tag: 'Organization',\n    reason: 'place-noun-society',\n  },\n]\n", "export default [\n  // ==== Region ====\n  // West Norforlk\n  { match: '(west|north|south|east|western|northern|southern|eastern)+ #Place', tag: 'Region', reason: 'west-norfolk' },\n  //some us-state acronyms (exlude: al, in, la, mo, hi, me, md, ok..)\n  {\n    match: '#City [(al|ak|az|ar|ca|ct|dc|fl|ga|id|il|nv|nh|nj|ny|oh|pa|sc|tn|tx|ut|vt|pr)]',\n    group: 0,\n    tag: 'Region',\n    reason: 'us-state',\n  },\n  // portland oregon\n  { match: 'portland [or]', group: 0, tag: 'Region', reason: 'portland-or' },\n  //words removed from preTagger/placeWords\n  {\n    match: '#ProperNoun+ (cliff|place|range|pit|place|point|room|grounds|ruins)',\n    tag: 'Place',\n    reason: 'foo-point',\n  },\n  // in Foo California\n  { match: 'in [#ProperNoun] #Place', group: 0, tag: 'Place', reason: 'propernoun-place' },\n  // Address\n  {\n    match: '#Value #Noun (st|street|rd|road|crescent|cr|way|tr|terrace|avenue|ave)',\n    tag: 'Address',\n    reason: 'address-st',\n  },\n  // port dover\n  { match: '(port|mount|mt) #ProperName', tag: 'Place', reason: 'port-name' },\n  // generic 'oak ridge' names\n  // { match: '(oak|maple|spruce|pine|cedar|willow|green|sunset|sunrise) #Place', tag: 'Place', reason: 'tree-name' },\n  // generic 'sunset view' names\n  // { match: '() #Place', tag: 'Place', reason: 'tree-name' },\n\n  // Sports Arenas and Complexs\n  // {\n  //   match:\n  //     '(#Place+|#Place|#ProperNoun) (memorial|athletic|community|financial)? (sportsplex|stadium|sports centre|sports field|soccer complex|soccer centre|sports complex|civic centre|centre|arena|gardens|complex|coliseum|auditorium|place|building)',\n  //   tag: 'Place',\n  //   reason: 'sport-complex',\n  // },\n]\n", "export default [\n  // ==== Conjunctions ====\n  { match: '[so] #Noun', group: 0, tag: 'Conjunction', reason: 'so-conj' },\n  //how he is driving\n  {\n    match: '[(who|what|where|why|how|when)] #Noun #Copula #Adverb? (#Verb|#Adjective)',\n    group: 0,\n    tag: 'Conjunction',\n    reason: 'how-he-is-x',\n  },\n  // when he\n  { match: '#Copula [(who|what|where|why|how|when)] #Noun', group: 0, tag: 'Conjunction', reason: 'when-he' },\n  // says that he..\n  { match: '#Verb [that] #Pronoun', group: 0, tag: 'Conjunction', reason: 'said-that-he' },\n  // things that are required\n  { match: '#Noun [that] #Copula', group: 0, tag: 'Conjunction', reason: 'that-are' },\n  // things that seem cool\n  { match: '#Noun [that] #Verb #Adjective', group: 0, tag: 'Conjunction', reason: 'that-seem' },\n  // wasn't that wide..\n  { match: '#Noun #Copula not? [that] #Adjective', group: 0, tag: 'Adverb', reason: 'that-adj' },\n\n  // ==== Prepositions ====\n  //all students\n  { match: '#Verb #Adverb? #Noun [(that|which)]', group: 0, tag: 'Preposition', reason: 'that-prep' },\n  //work, which has been done.\n  { match: '@hasComma [which] (#Pronoun|#Verb)', group: 0, tag: 'Preposition', reason: 'which-copula' },\n  //folks like her\n  { match: '#Noun [like] #Noun', group: 0, tag: 'Preposition', reason: 'noun-like' },\n  //like the time\n  { match: '^[like] #Determiner', group: 0, tag: 'Preposition', reason: 'like-the' },\n  //a day like this\n  { match: 'a #Noun [like] (#Noun|#Determiner)', group: 0, tag: 'Preposition', reason: 'a-noun-like' },\n  // really like\n  { match: '#Adverb [like]', group: 0, tag: 'Verb', reason: 'really-like' },\n  // nothing like\n  { match: '(not|nothing|never) [like]', group: 0, tag: 'Preposition', reason: 'nothing-like' },\n  // treat them like\n  { match: '#Infinitive #Pronoun [like]', group: 0, tag: 'Preposition', reason: 'treat-them-like' },\n\n\n\n\n  // ==== Questions ====\n  // where\n  // why\n  // when\n  // who\n  // whom\n  // whose\n  // what\n  // which\n  //the word 'how many'\n  // { match: '^(how|which)', tag: 'QuestionWord', reason: 'how-question' },\n  // how-he, when the\n  { match: '[#QuestionWord] (#Pronoun|#Determiner)', group: 0, tag: 'Preposition', reason: 'how-he' },\n  // when stolen\n  { match: '[#QuestionWord] #Participle', group: 0, tag: 'Preposition', reason: 'when-stolen' },\n  // how is\n  { match: '[how] (#Determiner|#Copula|#Modal|#PastTense)', group: 0, tag: 'QuestionWord', reason: 'how-is' },\n  // children who dance\n  { match: '#Plural [(who|which|when)] .', group: 0, tag: 'Preposition', reason: 'people-who' },\n]\n", "export default [\n\n  //swear-words as non-expression POS\n  { match: 'holy (shit|fuck|hell)', tag: 'Expression', reason: 'swears-expression' },\n  // well..\n  { match: '^[(well|so|okay|now)] !#Adjective?', group: 0, tag: 'Expression', reason: 'well-' },\n  // well..\n  { match: '^come on', tag: 'Expression', reason: 'come-on' },\n  // sorry\n  { match: '(say|says|said) [sorry]', group: 0, tag: 'Expression', reason: 'say-sorry' },\n  // ok,\n  { match: '^(ok|alright|shoot|hell|anyways)', tag: 'Expression', reason: 'ok-' },\n  // c'mon marge..\n  // { match: '^[come on] #Noun', group: 0, tag: 'Expression', reason: 'come-on' },\n  // say,\n  { match: '^(say && @hasComma)', tag: 'Expression', reason: 'say-' },\n  { match: '^(like && @hasComma)', tag: 'Expression', reason: 'like-' },\n  // dude we should\n  { match: '^[(dude|man|girl)] #Pronoun', group: 0, tag: 'Expression', reason: 'dude-i' },\n]", "import adj from './adjective/adjective.js'\nimport advAdj from './adjective/adj-adverb.js'\nimport gerundAdj from './adjective/adj-gerund.js'\nimport nounAdj from './adjective/adj-noun.js'\nimport adjVerb from './adjective/adj-verb.js'\n\nimport adv from './adverb.js'\n\nimport dates from './dates/date-phrase.js'\nimport ambigDates from './dates/date.js'\n\nimport noun from './nouns/nouns.js'\nimport gerundNouns from './verbs/noun-gerund.js'\nimport presNouns from './verbs/verb-noun.js'\n\nimport money from './numbers/money.js'\nimport fractions from './numbers/fractions.js'\nimport numbers from './numbers/numbers.js'\n\nimport person from './person/person-phrase.js'\nimport personName from './person/ambig-name.js'\n\nimport verbs from './verbs/verbs.js'\nimport auxiliary from './verbs/auxiliary.js'\nimport phrasal from './verbs/phrasal.js'\nimport imperative from './verbs/imperative.js'\nimport adjGerund from './verbs/adj-gerund.js'\nimport passive from './verbs/passive.js'\n\nimport misc from './_misc.js'\n\nimport orgs from './nouns/organizations.js'\nimport places from './nouns/places.js'\nimport conjunctions from './conjunctions.js'\nimport expressions from './expressions.js'\n\nlet matches = [].concat(\n  // order matters top-matches can get overwritten\n  passive,\n  adj,\n  advAdj,\n  gerundAdj,\n  nounAdj,\n  adv,\n  ambigDates,\n  dates,\n  noun,\n  gerundNouns,\n  presNouns,\n  money,\n  fractions,\n  numbers,\n  person,\n  personName,\n  verbs,\n  adjVerb,\n  auxiliary,\n  phrasal,\n  imperative,\n  adjGerund,\n  misc,\n  orgs,\n  places,\n  conjunctions,\n  expressions\n)\nexport default {\n  two: {\n    matches,\n  },\n}\n", "let net = null\n\n// runs all match/tag patterns in model.two.matches\nconst postTagger = function (view) {\n  const { world } = view\n  const { model, methods } = world\n  net = net || methods.one.buildNet(model.two.matches, world)\n  // perform these matches on a comma-seperated document\n  let document = methods.two.quickSplit(view.document)\n  let ptrs = document.map(terms => {\n    let t = terms[0]\n    return [t.index[0], t.index[1], t.index[1] + terms.length]\n  })\n  let m = view.update(ptrs)\n  m.cache()\n  m.sweep(net)\n  view.uncache()\n  view.unfreeze()\n  return view\n}\n\n// helper function for compute('tagger')\nconst tagger = view => view.compute(['freeze', 'lexicon', 'preTagger', 'postTagger', 'unfreeze'])\n\nexport default { postTagger, tagger }\n", "const round = n => Math.round(n * 100) / 100\n\nexport default function (View) {\n  // average tagger score\n  View.prototype.confidence = function () {\n    let sum = 0\n    let count = 0\n    this.docs.forEach(terms => {\n      terms.forEach(term => {\n        count += 1\n        sum += term.confidence || 1\n      })\n    })\n    if (count === 0) {\n      return 1\n    }\n    return round(sum / count)\n  }\n\n  // (re-) run the POS-tagger\n  View.prototype.tagger = function () {\n    return this.compute(['tagger'])\n  }\n}", "import model from './model/index.js'\nimport compute from './compute/index.js'\nimport api from './api.js'\n\n\nconst plugin = {\n  api,\n  compute,\n  model,\n  hooks: ['postTagger'],\n}\nexport default plugin\n", "const getWords = function (net) {\n  return Object.keys(net.hooks).filter(w => !w.startsWith('#') && !w.startsWith('%'))\n}\n\nconst maybeMatch = function (doc, net) {\n  // must have *atleast* one of these words\n  let words = getWords(net)\n  if (words.length === 0) {\n    return doc\n  }\n  if (!doc._cache) {\n    doc.cache()\n  }\n  let cache = doc._cache\n  // return sentences that have one of our needed words\n  return doc.filter((_m, i) => {\n    return words.some(str => cache[i].has(str))\n  })\n}\nexport default maybeMatch", "import maybeMatch from './maybeMatch.js'\n\n// tokenize first, then only tag sentences required\nconst lazyParse = function (input, reg) {\n  let net = reg\n  if (typeof reg === 'string') {\n    net = this.buildNet([{ match: reg }])\n  }\n  let doc = this.tokenize(input)\n  let m = maybeMatch(doc, net)\n  if (m.found) {\n    m.compute(['index', 'tagger'])\n    return m.match(reg)\n  }\n  return doc.none()\n}\nexport default lazyParse", "import lazy from './lazyParse.js'\n\nexport default {\n  lib: {\n    lazy\n  }\n}", "const matchVerb = function (m, lemma) {\n  const conjugate = m.methods.two.transform.verb.conjugate\n  let all = conjugate(lemma, m.model)\n  if (m.has('#Gerund')) {\n    return all.Gerund\n  }\n  if (m.has('#PastTense')) {\n    return all.PastTense\n  }\n  if (m.has('#PresentTense')) {\n    return all.PresentTense\n  }\n  if (m.has('#Gerund')) {\n    return all.Gerund\n  }\n  return lemma\n}\n\nconst swapVerb = function (vb, lemma) {\n  let str = lemma\n  vb.forEach(m => {\n    if (!m.has('#Infinitive')) {\n      str = matchVerb(m, lemma)\n    }\n    m.replaceWith(str)\n  })\n  return vb\n}\nexport default swapVerb", "import swapVerb from './swap-verb.js'\n\nconst swapNoun = function (m, lemma) {\n  let str = lemma\n  if (m.has('#Plural')) {\n    const toPlural = m.methods.two.transform.noun.toPlural\n    str = toPlural(lemma, m.model)\n  }\n  m.replaceWith(str, { possessives: true })\n}\n\nconst swapAdverb = function (m, lemma) {\n  const { toAdverb } = m.methods.two.transform.adjective\n  let str = lemma\n  let adv = toAdverb(str)\n  if (adv) {\n    m.replaceWith(adv)\n  }\n}\nconst swapAdjective = function (m, lemma) {\n  const { toComparative, toSuperlative } = m.methods.two.transform.adjective\n  let str = lemma\n  if (m.has('#Comparative')) {\n    str = toComparative(str, m.model)\n  } else if (m.has('#Superlative')) {\n    str = toSuperlative(str, m.model)\n  }\n  if (str) {\n    m.replaceWith(str)\n  }\n}\n\nconst swap = function (from, to, tag) {\n  let reg = from.split(/ /g).map(str => str.toLowerCase().trim())\n  reg = reg.filter(str => str)\n  reg = reg.map(str => `{${str}}`).join(' ')\n  let m = this.match(reg)\n  // guard against some homonyms\n  if (tag) {\n    m = m.if(tag)\n  }\n  if (m.has('#Verb')) {\n    return swapVerb(m, to)\n  }\n  if (m.has('#Noun')) {\n    return swapNoun(m, to)\n  }\n  if (m.has('#Adverb')) {\n    return swapAdverb(m, to)\n  }\n  if (m.has('#Adjective')) {\n    return swapAdjective(m, to)\n  }\n  return this\n}\nexport default swap", "import swap from './api/swap.js'\n\nconst api = function (View) {\n  View.prototype.swap = swap\n}\n\nexport default {\n  api\n}", "import nlp from './one.js'\nimport preTag from './2-two/preTagger/plugin.js'\nimport contractionTwo from './2-two/contraction-two/plugin.js'\nimport postTag from './2-two/postTagger/plugin.js'\nimport lazy from './2-two/lazy/plugin.js'\nimport swap from './2-two/swap/plugin.js'\n\nnlp.plugin(preTag) //~103kb\nnlp.plugin(contractionTwo) //\nnlp.plugin(postTag) //~33kb\nnlp.plugin(lazy) //\nnlp.plugin(swap) //\n\nexport default nlp\n", "\n// guard against superlative+comparative forms\nconst toRoot = function (adj) {\n  const { fromComparative, fromSuperlative } = adj.methods.two.transform.adjective\n  let str = adj.text('normal')\n  if (adj.has('#Comparative')) {\n    return fromComparative(str, adj.model)\n  }\n  if (adj.has('#Superlative')) {\n    return fromSuperlative(str, adj.model)\n  }\n  return str\n}\n\nconst api = function (View) {\n\n  class Adjectives extends View {\n    constructor(document, pointer, groups) {\n      super(document, pointer, groups)\n      this.viewType = 'Adjectives'\n    }\n    json(opts = {}) {\n      const { toAdverb, toNoun, toSuperlative, toComparative } = this.methods.two.transform.adjective\n      opts.normal = true\n      return this.map(m => {\n        let json = m.toView().json(opts)[0] || {}\n        let str = toRoot(m)\n        json.adjective = {\n          adverb: toAdverb(str, this.model),\n          noun: toNoun(str, this.model),\n          superlative: toSuperlative(str, this.model),\n          comparative: toComparative(str, this.model),\n        }\n        return json\n      }, [])\n    }\n    adverbs() {\n      return this.before('#Adverb+$').concat(this.after('^#Adverb+'))\n    }\n    conjugate(n) {\n      const { toComparative, toSuperlative, toNoun, toAdverb } = this.methods.two.transform.adjective\n      return this.getNth(n).map(adj => {\n        let root = toRoot(adj)\n        return {\n          Adjective: root,\n          Comparative: toComparative(root, this.model),\n          Superlative: toSuperlative(root, this.model),\n          Noun: toNoun(root, this.model),\n          Adverb: toAdverb(root, this.model),\n        }\n      }, [])\n    }\n    toComparative(n) {\n      const { toComparative } = this.methods.two.transform.adjective\n      return this.getNth(n).map(adj => {\n        let root = toRoot(adj)\n        let str = toComparative(root, this.model)\n        return adj.replaceWith(str)\n      })\n    }\n    toSuperlative(n) {\n      const { toSuperlative } = this.methods.two.transform.adjective\n      return this.getNth(n).map(adj => {\n        let root = toRoot(adj)\n        let str = toSuperlative(root, this.model)\n        return adj.replaceWith(str)\n      })\n    }\n    toAdverb(n) {\n      const { toAdverb } = this.methods.two.transform.adjective\n      return this.getNth(n).map(adj => {\n        let root = toRoot(adj)\n        let str = toAdverb(root, this.model)\n        return adj.replaceWith(str)\n      })\n    }\n    toNoun(n) {\n      const { toNoun } = this.methods.two.transform.adjective\n      return this.getNth(n).map(adj => {\n        let root = toRoot(adj)\n        let str = toNoun(root, this.model)\n        return adj.replaceWith(str)\n      })\n    }\n  }\n\n  View.prototype.adjectives = function (n) {\n    let m = this.match('#Adjective')\n    m = m.getNth(n)\n    return new Adjectives(m.document, m.pointer)\n  }\n  View.prototype.superlatives = function (n) {\n    let m = this.match('#Superlative')\n    m = m.getNth(n)\n    return new Adjectives(m.document, m.pointer)\n  }\n  View.prototype.comparatives = function (n) {\n    let m = this.match('#Comparative')\n    m = m.getNth(n)\n    return new Adjectives(m.document, m.pointer)\n  }\n}\nexport default { api }\n", "// guard against superlative+comparative forms\nconst toRoot = function (adj) {\n  let str = adj.compute('root').text('root')\n  return str\n}\n\n// return the nth elem of a doc\nconst api = function (View) {\n\n  class Adverbs extends View {\n    constructor(document, pointer, groups) {\n      super(document, pointer, groups)\n      this.viewType = 'Adverbs'\n    }\n    conjugate(n) {\n      return this.getNth(n).map(adv => {\n        let adj = toRoot(adv)\n        return {\n          Adverb: adv.text('normal'),\n          Adjective: adj,\n        }\n      }, [])\n    }\n    json(opts = {}) {\n      const fromAdverb = this.methods.two.transform.adjective.fromAdverb\n      opts.normal = true\n      return this.map(m => {\n        let json = m.toView().json(opts)[0] || {}\n        json.adverb = {\n          adjective: fromAdverb(json.normal)\n        }\n        return json\n      }, [])\n    }\n  }\n\n  View.prototype.adverbs = function (n) {\n    let m = this.match('#Adverb')\n    m = m.getNth(n)\n    return new Adverbs(m.document, m.pointer)\n  }\n}\nexport default { api }\n", "const byComma = function (doc) {\n  let commas = doc.match('@hasComma')\n  // remove any non-clause uses\n  commas = commas.filter(m => {\n    // don't split the first word\n    if (m.growLeft('.').wordCount() === 1) {\n      return false\n    }\n    // don't split the last word\n    if (m.growRight('. .').wordCount() === 1) {\n      return false\n    }\n    let more = m.grow('.') // grow by 1 word in either direction\n    more = more.ifNo('@hasComma @hasComma') //fun, cool...\n    more = more.ifNo('@hasComma (and|or) .') //cool, and fun\n    more = more.ifNo('(#City && @hasComma) #Country') //'toronto, canada'\n    more = more.ifNo('(#WeekDay && @hasComma) #Date') //'tuesday, march 2nd'\n    more = more.ifNo('(#Date+ && @hasComma) #Value') //'july 6, 1992'\n    more = more.ifNo('(#Adjective && @hasComma) #Adjective') //nice, pretty\n    // more = more.ifNo('@hasComma (too|also)$') //at end of sentence\n    return more.found\n  })\n  return doc.splitAfter(commas)\n}\n\n// should we split-out a clause (in brackets)?\nconst splitParentheses = function (doc) {\n  let matches = doc.parentheses()\n  matches = matches.filter(m => {\n    return m.wordCount() >= 3 && m.has('#Verb') && m.has('#Noun')\n  })\n  return doc.splitOn(matches)\n}\n\n// split-out a long quotion, but not 'inline quotes'.\nconst splitQuotes = function (doc) {\n  let matches = doc.quotations()\n  matches = matches.filter(m => {\n    return m.wordCount() >= 3 && m.has('#Verb') && m.has('#Noun')\n  })\n  return doc.splitOn(matches)\n}\n\nconst clauses = function (n) {\n  let found = this\n\n  found = splitParentheses(found)\n  found = splitQuotes(found)\n\n  found = byComma(found)\n\n  found = found.splitAfter('(@hasEllipses|@hasSemicolon|@hasDash|@hasColon)')\n\n  // i said\n  found = found.splitAfter('^#Pronoun (said|says)')\n  // ... said John.\n  found = found.splitBefore('(said|says) #ProperNoun$')\n\n  // ... if it was\n  found = found.splitBefore('. . if .{4}')\n\n  // various conjunctions\n  found = found.splitBefore('and while')\n  found = found.splitBefore('now that')\n  found = found.splitBefore('ever since')\n  found = found.splitBefore('(supposing|although)')\n  found = found.splitBefore('even (while|if|though)')\n  found = found.splitBefore('(whereas|whose)')\n  // found = found.splitBefore('as (far|long|much|soon) as')\n  found = found.splitBefore('as (though|if)')\n  found = found.splitBefore('(til|until)')\n\n  // it is cool but it is ..\n  let m = found.match('#Verb .* [but] .* #Verb', 0)\n  if (m.found) {\n    found = found.splitBefore(m)\n  }\n  // it is cool and it is ..\n  // let conjunctions = found.if('#Copula #Adjective #Conjunction (#Pronoun|#Determiner) #Verb').match('#Conjunction')\n  // found = found.splitBefore(conjunctions)\n\n  // if it is this then that\n  let condition = found.if('if .{2,9} then .').match('then')\n  found = found.splitBefore(condition)\n\n  // // misc clause partitions\n  // found = found.splitBefore('as well as .')\n  // found = found.splitBefore('such as .')\n  // found = found.splitBefore('in addition to .')\n\n  // // semicolons, dashes\n  // found = found.splitAfter('@hasSemicolon')\n  // found = found.splitAfter('@hasDash')\n\n  // //\n  // found = found.splitBefore('which (were|are|will)')\n\n  // // he said [...]\n  // found = found.splitAfter('#Noun (said|say|says)')\n\n  // passive voice verb - '.. which was robbed is empty'\n  // let passive = found.match('#Noun (which|that) (was|is) #Adverb? #PastTense #Adverb?')\n  // if (passive.found) {\n  //   found = found.splitAfter(passive)\n  // }\n  // //which the boy robbed\n  // passive = found.match('#Noun (which|that) the? #Noun+ #Adverb? #PastTense #Adverb?')\n  // if (passive.found) {\n  //   found = found.splitAfter(passive)\n  // }\n  // does there appear to have relative/subordinate clause still?\n  // let tooLong = found.filter(d => d.wordCount() > 5 && d.match('#Verb+').length >= 2)\n  // if (tooLong.found) {\n  //   // and after the ..\n  //   found = found.splitBefore('#Conjunction #Preposition')\n\n  //   // let m = tooLong.splitAfter('#Noun .* #Verb .* #Noun+')\n  //   // found = found.splitOn(m.eq(0))\n  // }\n  if (typeof n === 'number') {\n    found = found.get(n)\n  }\n  return found\n}\n\nexport default clauses\n", "// split terms into Nounphrase, verbphrase, etc groups\nconst chunks = function (doc) {\n  let all = []\n  let lastOne = null\n  // first, split by comma, etc\n  let m = doc.clauses()\n  // loop through each clause\n  m.docs.forEach(terms => {\n    terms.forEach(term => {\n      // new chunk\n      if (!term.chunk || term.chunk !== lastOne) {\n        lastOne = term.chunk\n        all.push([term.index[0], term.index[1], term.index[1] + 1])\n      } else {\n        // keep the chunk going\n        all[all.length - 1][2] = term.index[1] + 1\n      }\n    })\n    lastOne = null\n  })\n  let parts = doc.update(all)\n  return parts\n}\nexport default chunks\n", "import clauses from './clauses.js'\nimport getChunks from './chunks.js'\n\nconst api = function (View) {\n\n  class Chunks extends View {\n    constructor(document, pointer, groups) {\n      super(document, pointer, groups)\n      this.viewType = 'Chunks'\n    }\n    isVerb() {\n      return this.filter(c => c.has('<Verb>'))\n    }\n    isNoun() {\n      return this.filter(c => c.has('<Noun>'))\n    }\n    isAdjective() {\n      return this.filter(c => c.has('<Adjective>'))\n    }\n    isPivot() {\n      return this.filter(c => c.has('<Pivot>'))\n    }\n    // chunk-friendly debug\n    debug() {\n      this.toView().debug('chunks')\n      return this\n    }\n    // overloaded - keep Sentences class\n    update(pointer) {\n      let m = new Chunks(this.document, pointer)\n      m._cache = this._cache // share this full thing\n      return m\n    }\n  }\n\n  View.prototype.chunks = function (n) {\n    let m = getChunks(this)\n    m = m.getNth(n)\n    return new Chunks(this.document, m.pointer)\n  }\n  View.prototype.clauses = clauses\n}\nexport default api\n", "const byWord = {\n  this: 'Noun',\n  then: 'Pivot'\n}\n\n// simply chunk Nouns as <Noun>\nconst easyMode = function (document) {\n  for (let n = 0; n < document.length; n += 1) {\n    for (let t = 0; t < document[n].length; t += 1) {\n      let term = document[n][t]\n\n      if (byWord.hasOwnProperty(term.normal) === true) {\n        term.chunk = byWord[term.normal]\n        continue\n      }\n      if (term.tags.has('Verb')) {\n        term.chunk = 'Verb'\n        continue\n      }\n      if (term.tags.has('Noun') || term.tags.has('Determiner')) {\n        term.chunk = 'Noun'\n        continue\n      }\n      // 100 cats\n      if (term.tags.has('Value')) {\n        term.chunk = 'Noun'\n        continue\n      }\n      //\n      if (term.tags.has('QuestionWord')) {\n        term.chunk = 'Pivot'\n        continue\n      }\n\n    }\n  }\n}\nexport default easyMode\n", "// simply chunk Nouns as <Noun>\nconst byNeighbour = function (document) {\n  for (let n = 0; n < document.length; n += 1) {\n    for (let t = 0; t < document[n].length; t += 1) {\n      let term = document[n][t]\n      if (term.chunk) {\n        continue\n      }\n      // based on next-term\n      let onRight = document[n][t + 1]\n      // based on last-term\n      let onLeft = document[n][t - 1]\n\n      //'is cool' vs 'the cool dog'\n      if (term.tags.has('Adjective')) {\n        // 'is cool'\n        if (onLeft && onLeft.tags.has('Copula')) {\n          term.chunk = 'Adjective'\n          continue\n        }\n        // 'the cool'\n        if (onLeft && onLeft.tags.has('Determiner')) {\n          term.chunk = 'Noun'\n          continue\n        }\n        // 'cool dog'\n        if (onRight && onRight.tags.has('Noun')) {\n          term.chunk = 'Noun'\n          continue\n        }\n        continue\n      }\n      // 'really swimming' vs 'really cool'\n      if (term.tags.has('Adverb') || term.tags.has('Negative')) {\n        if (onLeft && onLeft.tags.has('Adjective')) {\n          term.chunk = 'Adjective'\n          continue\n        }\n        if (onLeft && onLeft.tags.has('Verb')) {\n          term.chunk = 'Verb'\n          continue\n        }\n\n        if (onRight && onRight.tags.has('Adjective')) {\n          term.chunk = 'Adjective'\n          continue\n        }\n        if (onRight && onRight.tags.has('Verb')) {\n          term.chunk = 'Verb'\n          continue\n        }\n      }\n    }\n  }\n}\nexport default byNeighbour\n", "const rules = [\n  // === Conjunction ===\n  // that the houses\n  { match: '[that] #Determiner #Noun', group: 0, chunk: 'Pivot' },\n  // estimated that\n  { match: '#PastTense [that]', group: 0, chunk: 'Pivot' },\n  // so the\n  { match: '[so] #Determiner', group: 0, chunk: 'Pivot' },\n\n  // === Adjective ===\n  // was really nice\n  { match: '#Copula #Adverb+? [#Adjective]', group: 0, chunk: 'Adjective' },\n  // was nice\n  // { match: '#Copula [#Adjective]', group: 0, chunk: 'Adjective' },\n  // nice and cool\n  { match: '#Adjective and #Adjective', chunk: 'Adjective' },\n  // really nice\n  // { match: '#Adverb+ #Adjective', chunk: 'Adjective' },\n\n  // === Verb ===\n  // quickly and suddenly run\n  { match: '#Adverb+ and #Adverb #Verb', chunk: 'Verb' },\n  // sitting near\n  { match: '#Gerund #Adjective$', chunk: 'Verb' },\n  // going to walk\n  { match: '#Gerund to #Verb', chunk: 'Verb' },\n  // come and have a drink\n  { match: '#PresentTense and #PresentTense', chunk: 'Verb' },\n  // really not\n  { match: '#Adverb #Negative', chunk: 'Verb' },\n  // want to see\n  { match: '(want|wants|wanted) to #Infinitive', chunk: 'Verb' },\n  // walk ourselves\n  { match: '#Verb #Reflexive', chunk: 'Verb' },\n  // tell him the story\n  // { match: '#PresentTense [#Pronoun] #Determiner', group: 0, chunk: 'Verb' },\n  // tries to walk\n  { match: '#Verb [to] #Adverb? #Infinitive', group: 0, chunk: 'Verb' },\n  // upon seeing\n  { match: '[#Preposition] #Gerund', group: 0, chunk: 'Verb' },\n  // ensure that\n  { match: '#Infinitive [that] <Noun>', group: 0, chunk: 'Verb' },\n\n  // === Noun ===\n  // the brown fox\n  // { match: '#Determiner #Adjective+ #Noun', chunk: 'Noun' },\n  // the fox\n  // { match: '(the|this) <Noun>', chunk: 'Noun' },\n  // brown fox\n  // { match: '#Adjective+ <Noun>', chunk: 'Noun' },\n  // --- of ---\n  // son of a gun\n  { match: '#Noun of #Determiner? #Noun', chunk: 'Noun' },\n  // 3 beautiful women\n  { match: '#Value+ #Adverb? #Adjective', chunk: 'Noun' },\n  // the last russian tsar\n  { match: 'the [#Adjective] #Noun', chunk: 'Noun' },\n  // breakfast in bed\n  { match: '#Singular in #Determiner? #Singular', chunk: 'Noun' },\n  // Some citizens in this Canadian capital\n  { match: '#Plural [in] #Determiner? #Noun', group: 0, chunk: 'Pivot' },\n  // indoor and outdoor seating\n  { match: '#Noun and #Determiner? #Noun', notIf: '(#Possessive|#Pronoun)', chunk: 'Noun' },\n  //  boys and girls\n  // { match: '#Plural and #Determiner? #Plural', chunk: 'Noun' },\n  // tomatoes and cheese\n  // { match: '#Noun and #Determiner? #Noun', notIf: '#Pronoun', chunk: 'Noun' },\n  // that is why\n  // { match: '[that] (is|was)', group: 0, chunk: 'Noun' },\n]\n\nlet net = null\nconst matcher = function (view, _, world) {\n  const { methods } = world\n  net = net || methods.one.buildNet(rules, world)\n  view.sweep(net)\n}\nexport default matcher\n", "const setChunk = function (term, chunk) {\n  const env = typeof process === 'undefined' || !process.env ? self.env || {} : process.env\n  if (env.DEBUG_CHUNKS) {\n    let str = (term.normal + \"'\").padEnd(8)\n    console.log(`  | '${str}  →  \\x1b[34m${chunk.padEnd(12)}\\x1b[0m \\x1b[2m -fallback- \\x1b[0m`) // eslint-disable-line\n  }\n  term.chunk = chunk\n}\n\n// ensure everything has a chunk\nconst fallback = function (document) {\n  for (let n = 0; n < document.length; n += 1) {\n    for (let t = 0; t < document[n].length; t += 1) {\n      let term = document[n][t]\n      if (term.chunk === undefined) {\n        // conjunctions stand alone\n        if (term.tags.has('Conjunction')) {\n          setChunk(term, 'Pivot')\n        } else if (term.tags.has('Preposition')) {\n          setChunk(term, 'Pivot')\n        } else if (term.tags.has('Adverb')) {\n          setChunk(term, 'Verb')\n        }\n        // just take the chunk on the right?\n        // else if (document[n][t + 1] && document[n][t + 1].chunk) {\n        //   setChunk(term, document[n][t + 1].chunk)\n        // }\n        // // or take the chunk on the left\n        // else if (document[n][t - 1] && document[n][t - 1].chunk) {\n        //   setChunk(term, document[n][t - 1].chunk)\n        else {\n          //  ¯\\_(ツ)_/¯\n          term.chunk = 'Noun'\n        }\n      }\n    }\n  }\n}\nexport default fallback\n", "const fixUp = function (docs) {\n  let byChunk = []\n  let current = null\n  docs.forEach(terms => {\n    // ensure an adjective chunk is preceded by a copula\n    for (let i = 0; i < terms.length; i += 1) {\n      let term = terms[i]\n      if (current && term.chunk === current) {\n        byChunk[byChunk.length - 1].terms.push(term)\n      } else {\n        byChunk.push({ chunk: term.chunk, terms: [term] })\n        current = term.chunk\n      }\n    }\n  })\n  // ensure every verb-phrase actually has a verb\n  byChunk.forEach(c => {\n    if (c.chunk === 'Verb') {\n      const hasVerb = c.terms.find(t => t.tags.has('Verb'))\n      if (!hasVerb) {\n        c.terms.forEach(t => t.chunk = null)\n      }\n    }\n  })\n}\nexport default fixUp\n", "import easyMode from './01-easy.js'\nimport byNeighbour from './02-neighbours.js'\nimport matcher from './03-matcher.js'\nimport fallback from './04-fallback.js'\nimport fixUp from './05-fixUp.js'\n/* Chunks:\n    Noun\n    Verb\n    Adjective\n    Pivot\n*/\n\nconst findChunks = function (view) {\n  const { document, world } = view\n  easyMode(document)\n  byNeighbour(document)\n  matcher(view, document, world)\n  // matcher(view, document, world) //run it 2nd time\n  fallback(document, world)\n  fixUp(document, world)\n}\nexport default { chunks: findChunks }\n", "import api from './api/api.js'\nimport compute from './compute/index.js'\n\nexport default {\n  compute: compute,\n  api: api,\n  hooks: ['chunks'],\n}\n", "// return the nth elem of a doc\nconst hasPeriod = /\\./g\n\nconst api = function (View) {\n\n  class Acronyms extends View {\n    constructor(document, pointer, groups) {\n      super(document, pointer, groups)\n      this.viewType = 'Acronyms'\n    }\n    strip() {\n      this.docs.forEach(terms => {\n        terms.forEach(term => {\n          term.text = term.text.replace(hasPeriod, '')\n          term.normal = term.normal.replace(hasPeriod, '')\n        })\n      })\n      return this\n    }\n    addPeriods() {\n      this.docs.forEach(terms => {\n        terms.forEach(term => {\n          term.text = term.text.replace(hasPeriod, '')\n          term.normal = term.normal.replace(hasPeriod, '')\n          term.text = term.text.split('').join('.') + '.'\n          term.normal = term.normal.split('').join('.') + '.'\n        })\n      })\n      return this\n    }\n  }\n\n  View.prototype.acronyms = function (n) {\n    let m = this.match('#Acronym')\n    m = m.getNth(n)\n    return new Acronyms(m.document, m.pointer)\n  }\n}\nexport default api\n", "const hasOpen = /\\(/\nconst hasClosed = /\\)/\n\nconst findEnd = function (terms, i) {\n  for (; i < terms.length; i += 1) {\n    if (terms[i].post && hasClosed.test(terms[i].post)) {\n      let [, index] = terms[i].index\n      index = index || 0\n      return index\n    }\n  }\n  return null\n}\n\nconst find = function (doc) {\n  let ptrs = []\n  doc.docs.forEach(terms => {\n    let isOpen = false\n    for (let i = 0; i < terms.length; i += 1) {\n      let term = terms[i]\n      if (!isOpen && term.pre && hasOpen.test(term.pre)) {\n        let end = findEnd(terms, i)\n        if (end !== null) {\n          let [n, start] = terms[i].index\n          ptrs.push([n, start, end + 1, terms[i].id])\n          i = end\n        }\n      }\n    }\n  })\n  return doc.update(ptrs)\n}\n\nconst strip = function (m) {\n  m.docs.forEach(terms => {\n    terms[0].pre = terms[0].pre.replace(hasOpen, '')\n    let last = terms[terms.length - 1]\n    last.post = last.post.replace(hasClosed, '')\n  })\n  return m\n}\nexport { find, strip }\n", "import { find, strip } from './fns.js'\n\nconst api = function (View) {\n  class Parentheses extends View {\n    constructor(document, pointer, groups) {\n      super(document, pointer, groups)\n      this.viewType = 'Possessives'\n    }\n    strip() {\n      return strip(this)\n    }\n  }\n\n  View.prototype.parentheses = function (n) {\n    let m = find(this)\n    m = m.getNth(n)\n    return new Parentheses(m.document, m.pointer)\n  }\n}\nexport default api\n", "// return the nth elem of a doc\nconst apostropheS = /'s$/\n\nconst find = function (doc) {\n  let m = doc.match('#Possessive+')\n  // expand it to include 'john smith's'\n  if (m.has('#Person')) {\n    m = m.growLeft('#Person+')\n  }\n  if (m.has('#Place')) {\n    m = m.growLeft('#Place+')\n  }\n  if (m.has('#Organization')) {\n    m = m.growLeft('#Organization+')\n  }\n  return m\n}\n\n\nconst api = function (View) {\n\n  class Possessives extends View {\n    constructor(document, pointer, groups) {\n      super(document, pointer, groups)\n      this.viewType = 'Possessives'\n    }\n    strip() {\n      this.docs.forEach(terms => {\n        terms.forEach(term => {\n          term.text = term.text.replace(apostropheS, '')\n          term.normal = term.normal.replace(apostropheS, '')\n        })\n      })\n      return this\n    }\n  }\n\n  View.prototype.possessives = function (n) {\n    let m = find(this)\n    m = m.getNth(n)\n    return new Possessives(m.document, m.pointer)\n  }\n}\nexport default api\n", "/* eslint-disable regexp/no-dupe-characters-character-class */\n\nconst pairs = {\n  '\\u0022': '\\u0022', // 'StraightDoubleQuotes'\n  '\\uFF02': '\\uFF02', // 'StraightDoubleQuotesWide'\n  '\\u0027': '\\u0027', // 'StraightSingleQuotes'\n  '\\u201C': '\\u201D', // 'CommaDoubleQuotes'\n  '\\u2018': '\\u2019', // 'CommaSingleQuotes'\n  '\\u201F': '\\u201D', // 'CurlyDoubleQuotesReversed'\n  '\\u201B': '\\u2019', // 'CurlySingleQuotesReversed'\n  '\\u201E': '\\u201D', // 'LowCurlyDoubleQuotes'\n  '\\u2E42': '\\u201D', // 'LowCurlyDoubleQuotesReversed'\n  '\\u201A': '\\u2019', // 'LowCurlySingleQuotes'\n  '\\u00AB': '\\u00BB', // 'AngleDoubleQuotes' «, »\n  '\\u2039': '\\u203A', // 'AngleSingleQuotes'\n  // Prime 'non quotation'\n  '\\u2035': '\\u2032', // 'PrimeSingleQuotes'\n  '\\u2036': '\\u2033', // 'PrimeDoubleQuotes'\n  '\\u2037': '\\u2034', // 'PrimeTripleQuotes'\n  // Prime 'quotation' variation\n  '\\u301D': '\\u301E', // 'PrimeDoubleQuotes'\n  '\\u0060': '\\u00B4', // 'PrimeSingleQuotes'\n  '\\u301F': '\\u301E', // 'LowPrimeDoubleQuotesReversed'\n}\n\nconst hasOpen = RegExp('[' + Object.keys(pairs).join('') + ']')\nconst hasClosed = RegExp('[' + Object.values(pairs).join('') + ']')\n\nconst findEnd = function (terms, i) {\n  const have = terms[i].pre.match(hasOpen)[0] || ''\n  if (!have || !pairs[have]) {\n    return null\n  }\n  const want = pairs[have]\n  for (; i < terms.length; i += 1) {\n    if (terms[i].post && terms[i].post.match(want)) {\n      return i\n    }\n  }\n  return null\n}\n\nconst find = function (doc) {\n  let ptrs = []\n  doc.docs.forEach(terms => {\n    let isOpen = false\n    for (let i = 0; i < terms.length; i += 1) {\n      let term = terms[i]\n      if (!isOpen && term.pre && hasOpen.test(term.pre)) {\n        let end = findEnd(terms, i)\n        if (end !== null) {\n          let [n, start] = terms[i].index\n          ptrs.push([n, start, end + 1, terms[i].id])\n          i = end\n        }\n      }\n    }\n  })\n  return doc.update(ptrs)\n}\n\nconst strip = function (m) {\n  m.docs.forEach(terms => {\n    terms[0].pre = terms[0].pre.replace(hasOpen, '')\n    let lastTerm = terms[terms.length - 1]\n    lastTerm.post = lastTerm.post.replace(hasClosed, '')\n  })\n}\nexport { find, strip }\n", "import { find, strip } from './fns.js'\n\nconst api = function (View) {\n\n  class Quotations extends View {\n    constructor(document, pointer, groups) {\n      super(document, pointer, groups)\n      this.viewType = 'Possessives'\n    }\n    strip() {\n      return strip(this)\n    }\n  }\n\n  View.prototype.quotations = function (n) {\n    let m = find(this)\n    m = m.getNth(n)\n    return new Quotations(m.document, m.pointer)\n  }\n}\nexport default api\n", "/** return anything tagged as a phone number */\nconst phoneNumbers = function (n) {\n  let m = this.splitAfter('@hasComma')\n  m = m.match('#PhoneNumber+')\n  m = m.getNth(n)\n  return m\n}\n\n// setup easy helper methods\nconst selections = [\n  ['hyphenated', '@hasHyphen .'],\n  ['hashTags', '#HashTag'],\n  ['emails', '#Email'],\n  ['emoji', '#Emoji'],\n  ['emoticons', '#Emoticon'],\n  ['atMentions', '#AtMention'],\n  ['urls', '#Url'],\n  // ['pronouns', '#Pronoun'],\n  ['conjunctions', '#Conjunction'],\n  ['prepositions', '#Preposition'],\n  ['abbreviations', '#Abbreviation'],\n  ['honorifics', '#Honorific'],\n]\n\n// aliases\nlet aliases = [\n  ['emojis', 'emoji'],\n  ['atmentions', 'atMentions'],\n]\n\nconst addMethods = function (View) {\n  // add a list of new helper methods\n  selections.forEach(a => {\n    View.prototype[a[0]] = function (n) {\n      let m = this.match(a[1])\n      return typeof n === 'number' ? m.get(n) : m\n    }\n  })\n  View.prototype.phoneNumbers = phoneNumbers\n  // add aliases\n  aliases.forEach(a => {\n    View.prototype[a[0]] = View.prototype[a[1]]\n  })\n}\n\nexport default addMethods\n", "const hasSlash = /\\//\n\nconst api = function (View) {\n\n  class Slashes extends View {\n    constructor(document, pointer, groups) {\n      super(document, pointer, groups)\n      this.viewType = 'Slashes'\n    }\n    split() {\n      return this.map((m) => {\n        let str = m.text()\n        let arr = str.split(hasSlash)\n        m = m.replaceWith(arr.join(' '))\n        return m.growRight('(' + arr.join('|') + ')+')\n      })\n    }\n  }\n\n  View.prototype.slashes = function (n) {\n    let m = this.match('#SlashedTerm')\n    m = m.getNth(n)\n    return new Slashes(m.document, m.pointer)\n  }\n}\nexport default api\n", "import addAcronyms from './acronyms/index.js'\nimport addParentheses from './parentheses/index.js'\nimport addPossessives from './possessives/index.js'\nimport addQuotations from './quotations/index.js'\nimport addSelections from './selections/index.js'\nimport addSlashes from './slashes/index.js'\n\nexport default {\n  api: function (View) {\n    addAcronyms(View)\n    addParentheses(View)\n    addPossessives(View)\n    addQuotations(View)\n    addSelections(View)\n    addSlashes(View)\n  }\n}\n", "const termLoop = function (view, cb) {\n  view.docs.forEach(terms => {\n    terms.forEach(cb)\n  })\n}\n\nexport default {\n  // remove titlecasing, uppercase\n  'case': (doc) => {\n    termLoop(doc, (term) => {\n      term.text = term.text.toLowerCase()\n    })\n  },\n  // visually romanize/anglicize 'Björk' into 'Bjork'.\n  'unicode': (doc) => {\n    const world = doc.world\n    const killUnicode = world.methods.one.killUnicode\n    termLoop(doc, (term) => term.text = killUnicode(term.text, world))\n  },\n  // remove hyphens, newlines, and force one space between words\n  'whitespace': (doc) => {\n    termLoop(doc, (term) => {\n      // one space between words\n      term.post = term.post.replace(/\\s+/g, ' ')\n      term.post = term.post.replace(/\\s([.,?!:;])/g, '$1')//no whitespace before a period, etc\n      // no whitepace before a word\n      term.pre = term.pre.replace(/\\s+/g, '')\n    })\n  },\n  // remove commas, semicolons - but keep sentence-ending punctuation\n  'punctuation': (doc) => {\n    termLoop(doc, (term) => {\n      // turn dashes to spaces\n      term.post = term.post.replace(/[–—-]/g, ' ')\n      // remove comma, etc \n      term.post = term.post.replace(/[,:;]/g, '')\n      // remove elipses\n      term.post = term.post.replace(/\\.{2,}/g, '')\n      // remove repeats\n      term.post = term.post.replace(/\\?{2,}/g, '?')\n      term.post = term.post.replace(/!{2,}/g, '!')\n      // replace ?!\n      term.post = term.post.replace(/\\?!+/g, '?')\n    })\n    // trim end\n    let docs = doc.docs\n    let terms = docs[docs.length - 1]\n    if (terms && terms.length > 0) {\n      let lastTerm = terms[terms.length - 1]\n      lastTerm.post = lastTerm.post.replace(/ /g, '')\n    }\n  },\n\n  // ====== subsets ===\n\n  // turn \"isn't\" to \"is not\"\n  'contractions': (doc) => {\n    doc.contractions().expand()\n  },\n  //remove periods from acronyms, like 'F.B.I.'\n  'acronyms': (doc) => {\n    doc.acronyms().strip()\n  },\n  //remove words inside brackets (like these)\n  'parentheses': (doc) => {\n    doc.parentheses().strip()\n  },\n  // turn \"Google's tax return\" to \"Google tax return\"\n  'possessives': (doc) => {\n    doc.possessives().strip()\n  },\n  // turn \"tax return\" to tax return\n  'quotations': (doc) => {\n    doc.quotations().strip()\n  },\n\n  // remove them\n  'emoji': (doc) => {\n    doc.emojis().remove()\n  },\n  //turn 'Vice Admiral John Smith' to 'John Smith'\n  'honorifics': (doc) => {\n    doc.match('#Honorific+ #Person').honorifics().remove()\n  },\n  // remove needless adverbs\n  'adverbs': (doc) => {\n    doc.adverbs().remove()\n  },\n\n  // turn \"batmobiles\" into \"batmobile\"\n  'nouns': (doc) => {\n    doc.nouns().toSingular()\n  },\n  // turn all verbs into Infinitive form - \"I walked\" → \"I walk\"\n  'verbs': (doc) => {\n    doc.verbs().toInfinitive()\n  },\n  // turn \"fifty\" into \"50\"\n  'numbers': (doc) => {\n    doc.numbers().toNumber()\n  },\n\n  /** remove bullets from beginning of phrase */\n  'debullet': (doc) => {\n    const hasBullet = /^\\s*([-–—*•])\\s*$/\n    doc.docs.forEach(terms => {\n      //remove bullet symbols\n      if (hasBullet.test(terms[0].pre)) {\n        terms[0].pre = terms[0].pre.replace(hasBullet, '')\n      }\n    })\n    return doc\n  }\n}\n", "import methods from './methods.js'\n\n// turn presets into key-vals\nconst split = (str) => {\n  return str.split('|').reduce((h, k) => {\n    h[k] = true\n    return h\n  }, {})\n}\n\nconst light = 'unicode|punctuation|whitespace|acronyms'\nconst medium = '|case|contractions|parentheses|quotations|emoji|honorifics|debullet'\nconst heavy = '|possessives|adverbs|nouns|verbs'\nconst presets = {\n  light: split(light),\n  medium: split(light + medium),\n  heavy: split(light + medium + heavy)\n}\n\nexport default function (View) {\n  View.prototype.normalize = function (opts = 'light') {\n    if (typeof opts === 'string') {\n      opts = presets[opts]\n    }\n    // run each method\n    Object.keys(opts).forEach(fn => {\n      if (methods.hasOwnProperty(fn)) {\n        methods[fn](this, opts[fn])\n      }\n    })\n    return this\n  }\n}", "import api from './api.js'\n\nexport default {\n  api\n}", "const findNouns = function (doc) {\n  let m = doc.clauses().match('<Noun>')\n  let commas = m.match('@hasComma')\n  // allow toronto, ontario\n  commas = commas.not('#Place')\n  if (commas.found) {\n    m = m.splitAfter(commas)\n  }\n  // yo there\n  m = m.splitOn('#Expression')\n  // these are individual nouns\n  m = m.splitOn('(he|she|we|you|they|i)')\n  // a client i saw\n  m = m.splitOn('(#Noun|#Adjective) [(he|him|she|it)]', 0)\n  // give him the best\n  m = m.splitOn('[(he|him|she|it)] (#Determiner|#Value)', 0)\n  // the noise the slide makes\n  m = m.splitBefore('#Noun [(the|a|an)] #Adjective? #Noun', 0)\n  // here spencer slept\n  m = m.splitOn('[(here|there)] #Noun', 0)\n  // put it there\n  m = m.splitOn('[#Noun] (here|there)', 0)\n  // its great purposes\n  // give [parents] [our money]\n  m = m.splitBefore('(our|my|their|your)')\n  // tell my friend that he\n  m = m.splitOn('#Noun [#Determiner]', 0)\n  // his excuses\n  // m = m.splitAfter('(his|hers|yours|ours|theirs)')\n  // m = m.not('^#Determiner')\n  //ensure there's actually a noun\n  m = m.if('#Noun')\n  return m\n}\nexport default findNouns\n", "// https://www.trentu.ca/history/subordinate-clause-and-complex-sentence\nconst list = [\n  'after',\n  'although',\n  'as if',\n  'as long as',\n  'as',\n  'because',\n  'before',\n  'even if',\n  'even though',\n  'ever since',\n  'if',\n  'in order that',\n  'provided that',\n  'since',\n  'so that',\n  'than',\n  'that',\n  'though',\n  'unless',\n  'until',\n  'what',\n  'whatever',\n  'when',\n  'whenever',\n  'where',\n  'whereas',\n  'wherever',\n  'whether',\n  'which',\n  'whichever',\n  'who',\n  'whoever',\n  'whom',\n  'whomever',\n  'whose',\n]\n\nconst isSubordinate = function (m) {\n  // athletes from toronto, days since december\n  if (m.before('#Preposition$').found) {\n    return true\n  }\n  let leadIn = m.before()\n  if (!leadIn.found) {\n    return false\n  }\n  for (let i = 0; i < list.length; i += 1) {\n    if (m.has(list[i])) {\n      return true\n    }\n  }\n  return false\n}\nexport default isSubordinate\n", "const notPlural = '(#Pronoun|#Place|#Value|#Person|#Uncountable|#Month|#WeekDay|#Holiday|#Possessive)'\n\nconst isPlural = function (m, root) {\n  // const { looksPlural } = m.world.methods.two\n  if (m.has('#Plural')) {\n    return true\n  }\n  // two singular nouns are plural noun phrase\n  if (m.has('#Noun and #Noun')) {\n    return true\n  }\n  if (m.has('(we|they)')) {\n    return true\n  }\n  // these can't be plural\n  if (root.has(notPlural) === true) {\n    return false\n  }\n  if (m.has('#Singular')) {\n    return false\n  }\n  // word-reg fallback\n  let str = root.text('normal')\n  // ends with a brutal s fallback\n  return str.length > 3 && str.endsWith('s') && !str.endsWith('ss')\n}\nexport default isPlural\n", "import isSubordinate from './isSubordinate.js'\nimport isPlural from './isPlural.js'\n\nconst getRoot = function (m) {\n  let tmp = m.clone()\n  tmp = tmp.match('#Noun+')\n  tmp = tmp.remove('(#Adjective|#Preposition|#Determiner|#Value)')\n  tmp = tmp.not('#Possessive')\n  tmp = tmp.first()\n  if (!tmp.found) {\n    return m\n  }\n  return tmp\n}\n\nconst parseNoun = function (m) {\n  let root = getRoot(m)\n  return {\n    determiner: m.match('#Determiner').eq(0),\n    adjectives: m.match('#Adjective'),\n    number: m.values(),\n    isPlural: isPlural(m, root),\n    isSubordinate: isSubordinate(m),\n    root: root,\n  }\n}\nexport default parseNoun\n", "import parseNoun from './parse.js'\n\nconst toText = m => m.text()\nconst toArray = m => m.json({ terms: false, normal: true }).map(s => s.normal)\n\nconst getNum = function (m) {\n  let num = null\n  if (!m.found) {\n    return num\n  }\n  let val = m.values(0)\n  if (val.found) {\n    let obj = val.parse()[0] || {}\n    return obj.num\n  }\n  return num\n}\n\nconst toJSON = function (m) {\n  let res = parseNoun(m)\n  return {\n    root: toText(res.root),\n    number: getNum(res.number),\n    determiner: toText(res.determiner),\n    adjectives: toArray(res.adjectives),\n    isPlural: res.isPlural,\n    isSubordinate: res.isSubordinate,\n  }\n}\nexport default toJSON\n", "\nconst hasPlural = function (root) {\n  if (root.has('^(#Uncountable|#ProperNoun|#Place|#Pronoun|#Acronym)+$')) {\n    return false\n  }\n  return true\n}\nexport default hasPlural", "import hasPlural from './hasPlural.js'\n\nconst keep = { tags: true }\n\nconst nounToPlural = function (m, parsed) {\n  // already plural?\n  if (parsed.isPlural === true) {\n    return m\n  }\n  // handle \"steve's\"\n  if (parsed.root.has('#Possessive')) {\n    parsed.root = parsed.root.possessives().strip()\n  }\n  // is a plural appropriate?\n  if (!hasPlural(parsed.root)) {\n    return m\n  }\n  const { methods, model } = m.world\n  const { toPlural } = methods.two.transform.noun\n  // inflect the root noun\n  let str = parsed.root.text({ keepPunct: false })\n  let plural = toPlural(str, model)\n  m.match(parsed.root).replaceWith(plural, keep).tag('Plural', 'toPlural')\n  // should we change the determiner/article?\n  if (parsed.determiner.has('(a|an)')) {\n    // 'a captain' -> 'the captains'\n    // m.replace(parsed.determiner, 'the', keep)\n    m.remove(parsed.determiner)\n  }\n  // should we change the following copula?\n  let copula = parsed.root.after('not? #Adverb+? [#Copula]', 0)\n  if (copula.found) {\n    if (copula.has('is')) {\n      m.replace(copula, 'are')\n    } else if (copula.has('was')) {\n      m.replace(copula, 'were')\n    }\n  }\n  return m\n}\nexport default nounToPlural\n", "const keep = { tags: true }\n\nconst nounToSingular = function (m, parsed) {\n  // already singular?\n  if (parsed.isPlural === false) {\n    return m\n  }\n  const { methods, model } = m.world\n  const { toSingular } = methods.two.transform.noun\n  // inflect the root noun\n  let str = parsed.root.text('normal')\n  let single = toSingular(str, model)\n  m.replace(parsed.root, single, keep).tag('Singular', 'toPlural')\n  // should we change the determiner/article?\n  // m.debug()\n  return m\n}\nexport default nounToSingular\n", "import find from '../find.js'\nimport parseNoun from './parse.js'\nimport toJSON from './toJSON.js'\nimport toPlural from './toPlural.js'\nimport hasPlural from './hasPlural.js'\nimport toSingular from './toSingular.js'\n\nconst api = function (View) {\n  class Nouns extends View {\n    constructor(document, pointer, groups) {\n      super(document, pointer, groups)\n      this.viewType = 'Nouns'\n    }\n\n    parse(n) {\n      return this.getNth(n).map(parseNoun)\n    }\n\n    json(n) {\n      let opts = typeof n === 'object' ? n : {}\n      return this.getNth(n).map(m => {\n        let json = m.toView().json(opts)[0] || {}\n        if (opts && opts.noun !== false) {\n          json.noun = toJSON(m)\n        }\n        return json\n      }, [])\n    }\n    conjugate(n) {\n      const methods = this.world.methods.two.transform.noun\n      return this.getNth(n).map(m => {\n        let parsed = parseNoun(m)\n        let root = parsed.root.compute('root').text('root')\n        let res = {\n          Singular: root,\n        }\n        if (hasPlural(parsed.root)) {\n          res.Plural = methods.toPlural(root, this.model)\n        }\n        // only show plural if one exists\n        if (res.Singular === res.Plural) {\n          delete res.Plural\n        }\n        return res\n      }, [])\n    }\n    isPlural(n) {\n      let res = this.filter(m => parseNoun(m).isPlural)\n      return res.getNth(n)\n    }\n\n    isSingular(n) {\n      let res = this.filter(m => !parseNoun(m).isPlural)\n      return res.getNth(n)\n    }\n\n    adjectives(n) {\n      let res = this.update([])\n      this.forEach(m => {\n        let adj = parseNoun(m).adjectives\n        if (adj.found) {\n          res = res.concat(adj)\n        }\n      })\n      return res.getNth(n)\n    }\n\n    toPlural(n) {\n      return this.getNth(n).map(m => {\n        return toPlural(m, parseNoun(m))\n      })\n      // return new Nouns(all.document, all.pointer)\n    }\n\n    toSingular(n) {\n      return this.getNth(n).map(m => {\n        let res = parseNoun(m)\n        return toSingular(m, res)\n      })\n    }\n    // create a new View, from this one\n    update(pointer) {\n      let m = new Nouns(this.document, pointer)\n      m._cache = this._cache // share this full thing\n      return m\n    }\n  }\n  View.prototype.nouns = function (n) {\n    let m = find(this)\n    m = m.getNth(n)\n    return new Nouns(this.document, m.pointer)\n  }\n}\nexport default api\n", "import api from './api/api.js'\n\nexport default {\n  api,\n}\n", "const findFractions = function (doc, n) {\n  // five eighths\n  let m = doc.match('#Fraction+')\n  // remove 'two and five eights'\n  m = m.filter(r => {\n    return !r.lookBehind('#Value and$').found\n  })\n  // thirty seconds\n  m = m.notIf('#Value seconds')\n\n  if (typeof n === 'number') {\n    m = m.eq(n)\n  }\n  return m\n}\nexport default findFractions\n", "//support global multipliers, like 'half-million' by doing 'million' then multiplying by 0.5\nconst findModifiers = str => {\n  const mults = [\n    {\n      reg: /^(minus|negative)[\\s-]/i,\n      mult: -1,\n    },\n    {\n      reg: /^(a\\s)?half[\\s-](of\\s)?/i,\n      mult: 0.5,\n    },\n    //  {\n    //   reg: /^(a\\s)?quarter[\\s\\-]/i,\n    //   mult: 0.25\n    // }\n  ]\n  for (let i = 0; i < mults.length; i++) {\n    if (mults[i].reg.test(str) === true) {\n      return {\n        amount: mults[i].mult,\n        str: str.replace(mults[i].reg, ''),\n      }\n    }\n  }\n  return {\n    amount: 1,\n    str: str,\n  }\n}\n\nexport default findModifiers\n", "export default {\n  ones: {\n    zeroth: 0,\n    first: 1,\n    second: 2,\n    third: 3,\n    fourth: 4,\n    fifth: 5,\n    sixth: 6,\n    seventh: 7,\n    eighth: 8,\n    ninth: 9,\n    zero: 0,\n    one: 1,\n    two: 2,\n    three: 3,\n    four: 4,\n    five: 5,\n    six: 6,\n    seven: 7,\n    eight: 8,\n    nine: 9,\n  },\n  teens: {\n    tenth: 10,\n    eleventh: 11,\n    twelfth: 12,\n    thirteenth: 13,\n    fourteenth: 14,\n    fifteenth: 15,\n    sixteenth: 16,\n    seventeenth: 17,\n    eighteenth: 18,\n    nineteenth: 19,\n    ten: 10,\n    eleven: 11,\n    twelve: 12,\n    thirteen: 13,\n    fourteen: 14,\n    fifteen: 15,\n    sixteen: 16,\n    seventeen: 17,\n    eighteen: 18,\n    nineteen: 19,\n  },\n  tens: {\n    twentieth: 20,\n    thirtieth: 30,\n    fortieth: 40,\n    fourtieth: 40,\n    fiftieth: 50,\n    sixtieth: 60,\n    seventieth: 70,\n    eightieth: 80,\n    ninetieth: 90,\n    twenty: 20,\n    thirty: 30,\n    forty: 40,\n    fourty: 40,\n    fifty: 50,\n    sixty: 60,\n    seventy: 70,\n    eighty: 80,\n    ninety: 90,\n  },\n  multiples: {\n    hundredth: 100,\n    thousandth: 1000,\n    millionth: 1e6,\n    billionth: 1e9,\n    trillionth: 1e12,\n    quadrillionth: 1e15,\n    quintillionth: 1e18,\n    sextillionth: 1e21,\n    septillionth: 1e24,\n    hundred: 100,\n    thousand: 1000,\n    million: 1e6,\n    billion: 1e9,\n    trillion: 1e12,\n    quadrillion: 1e15,\n    quintillion: 1e18,\n    sextillion: 1e21,\n    septillion: 1e24,\n    grand: 1000,\n  },\n}\n", "import words from './data.js'\n\n//prevent things like 'fifteen ten', and 'five sixty'\nconst isValid = (w, has) => {\n  if (words.ones.hasOwnProperty(w)) {\n    if (has.ones || has.teens) {\n      return false\n    }\n  } else if (words.teens.hasOwnProperty(w)) {\n    if (has.ones || has.teens || has.tens) {\n      return false\n    }\n  } else if (words.tens.hasOwnProperty(w)) {\n    if (has.ones || has.teens || has.tens) {\n      return false\n    }\n  }\n  return true\n}\nexport default isValid\n", "import words from './data.js'\n\n//concatenate into a string with leading '0.'\nconst parseDecimals = function (arr) {\n  let str = '0.'\n  for (let i = 0; i < arr.length; i++) {\n    let w = arr[i]\n    if (words.ones.hasOwnProperty(w) === true) {\n      str += words.ones[w]\n    } else if (words.teens.hasOwnProperty(w) === true) {\n      str += words.teens[w]\n    } else if (words.tens.hasOwnProperty(w) === true) {\n      str += words.tens[w]\n    } else if (/^[0-9]$/.test(w) === true) {\n      str += w\n    } else {\n      return 0\n    }\n  }\n  return parseFloat(str)\n}\n\nexport default parseDecimals\n", "//parse a string like \"4,200.1\" into Number 4200.1\nconst parseNumeric = str => {\n  //remove ordinal - 'th/rd'\n  str = str.replace(/1st$/, '1')\n  str = str.replace(/2nd$/, '2')\n  str = str.replace(/3rd$/, '3')\n  str = str.replace(/([4567890])r?th$/, '$1')\n  //remove prefixes\n  str = str.replace(/^[$€¥£¢]/, '')\n  //remove suffixes\n  str = str.replace(/[%$€¥£¢]$/, '')\n  //remove commas\n  str = str.replace(/,/g, '')\n  //split '5kg' from '5'\n  str = str.replace(/([0-9])([a-z\\u00C0-\\u00FF]{1,2})$/, '$1')\n  return str\n}\n\nexport default parseNumeric\n", "import findModifiers from './findModifiers.js'\nimport words from './data.js'\nimport isValid from './validate.js'\nimport parseDecimals from './parseDecimals.js'\nimport parseNumeric from './parseNumeric.js'\nconst improperFraction = /^([0-9,. ]+)\\/([0-9,. ]+)$/\n\n//some numbers we know\nconst casualForms = {\n  'a few': 3,\n  'a couple': 2,\n  'a dozen': 12,\n  'two dozen': 24,\n  zero: 0,\n}\n\n// a 'section' is something like 'fifty-nine thousand'\n// turn a section into something we can add to - like 59000\nconst section_sum = obj => {\n  return Object.keys(obj).reduce((sum, k) => {\n    sum += obj[k]\n    return sum\n  }, 0)\n}\n\n//turn a string into a number\nconst parse = function (str) {\n  //convert some known-numbers\n  if (casualForms.hasOwnProperty(str) === true) {\n    return casualForms[str]\n  }\n  //'a/an' is 1\n  if (str === 'a' || str === 'an') {\n    return 1\n  }\n  const modifier = findModifiers(str)\n  str = modifier.str\n  let last_mult = null\n  let has = {}\n  let sum = 0\n  let isNegative = false\n  const terms = str.split(/[ -]/)\n  // const isFraction = findFraction(terms)\n  for (let i = 0; i < terms.length; i++) {\n    let w = terms[i]\n    w = parseNumeric(w)\n\n    if (!w || w === 'and') {\n      continue\n    }\n    if (w === '-' || w === 'negative') {\n      isNegative = true\n      continue\n    }\n    if (w.charAt(0) === '-') {\n      isNegative = true\n      w = w.substring(1)\n    }\n\n    //decimal mode\n    if (w === 'point') {\n      sum += section_sum(has)\n      sum += parseDecimals(terms.slice(i + 1, terms.length))\n      sum *= modifier.amount\n      return sum\n    }\n\n    //improper fraction\n    const fm = w.match(improperFraction)\n    if (fm) {\n      const num = parseFloat(fm[1].replace(/[, ]/g, ''))\n      const denom = parseFloat(fm[2].replace(/[, ]/g, ''))\n      if (denom) {\n        sum += num / denom || 0\n      }\n      continue\n    }\n    // try to support 'two fifty'\n    if (words.tens.hasOwnProperty(w)) {\n      if (has.ones && Object.keys(has).length === 1) {\n        sum = has.ones * 100\n        has = {}\n      }\n    }\n\n    //prevent mismatched units, like 'seven eleven' if not a fraction\n    if (isValid(w, has) === false) {\n      return null\n    }\n\n    //buildOut section, collect 'has' values\n    if (/^[0-9.]+$/.test(w)) {\n      has.ones = parseFloat(w) //not technically right\n    } else if (words.ones.hasOwnProperty(w) === true) {\n      has.ones = words.ones[w]\n    } else if (words.teens.hasOwnProperty(w) === true) {\n      has.teens = words.teens[w]\n    } else if (words.tens.hasOwnProperty(w) === true) {\n      has.tens = words.tens[w]\n    } else if (words.multiples.hasOwnProperty(w) === true) {\n      let mult = words.multiples[w]\n\n      //something has gone wrong : 'two hundred five hundred'\n      //possibly because it's a fraction\n      if (mult === last_mult) {\n        return null\n      }\n      //support 'hundred thousand'\n      //this one is tricky..\n      if (mult === 100 && terms[i + 1] !== undefined) {\n        const w2 = terms[i + 1]\n        if (words.multiples[w2]) {\n          mult *= words.multiples[w2] //hundredThousand/hundredMillion\n          i += 1\n        }\n      }\n      //natural order of things\n      //five thousand, one hundred..\n      if (last_mult === null || mult < last_mult) {\n        sum += (section_sum(has) || 1) * mult\n        last_mult = mult\n        has = {}\n      } else {\n        //maybe hundred .. thousand\n        sum += section_sum(has)\n        last_mult = mult\n        sum = (sum || 1) * mult\n        has = {}\n      }\n    }\n  }\n  //dump the remaining has values\n  sum += section_sum(has)\n  //post-process add modifier\n  sum *= modifier.amount\n  sum *= isNegative ? -1 : 1\n  //dont return 0, if it went straight-through\n  if (sum === 0 && Object.keys(has).length === 0) {\n    return null\n  }\n  return sum\n}\n\nexport default parse\n", "const endS = /s$/\nimport parseText from '../numbers/parse/toNumber/index.js'\n\n// just using .toNumber() again may risk an infinite-loop\nconst parseNumber = function (m) {\n  let str = m.text('reduced')\n  return parseText(str)\n}\n\nlet mapping = {\n  half: 2,\n  halve: 2,\n  quarter: 4,\n}\n\nconst slashForm = function (m) {\n  let str = m.text('reduced')\n  let found = str.match(/^([-+]?[0-9]+)\\/([-+]?[0-9]+)(st|nd|rd|th)?s?$/)\n  if (found && found[1] && found[0]) {\n    return {\n      numerator: Number(found[1]),\n      denominator: Number(found[2]),\n    }\n  }\n  return null\n}\n\n// parse '4 out of 4'\nconst nOutOfN = function (m) {\n  let found = m.match('[<num>#Value+] out of every? [<den>#Value+]')\n  if (found.found !== true) {\n    return null\n  }\n  let { num, den } = found.groups()\n  if (!num || !den) {\n    return null\n  }\n  num = parseNumber(num)\n  den = parseNumber(den)\n  if (!num || !den) {\n    return null\n  }\n  if (typeof num === 'number' && typeof den === 'number') {\n    return {\n      numerator: num,\n      denominator: den,\n    }\n  }\n  return null\n}\n\n// parse 'five thirds'\nconst nOrinalth = function (m) {\n  let found = m.match('[<num>(#Cardinal|a)+] [<den>#Fraction+]')\n  if (found.found !== true) {\n    return null\n  }\n  let { num, den } = found.groups()\n  // -- parse numerator---\n  // quick-support for 'a third'\n  if (num.has('a')) {\n    num = 1\n  } else {\n    // abuse the number-parser for 'thirty three'\n    // let tmp = num.clone().unTag('Fraction')\n    // num = tmp.numbers().get()[0]\n    num = parseNumber(num)\n  }\n  // -- parse denominator --\n  // turn 'thirds' into third\n  let str = den.text('reduced')\n  if (endS.test(str)) {\n    str = str.replace(endS, '')\n    den = den.replaceWith(str)\n  }\n  // support 'one half' as '1/2'\n  if (mapping.hasOwnProperty(str)) {\n    den = mapping[str]\n  } else {\n    // dem = dem.numbers().get()[0]\n    den = parseNumber(den)\n  }\n  if (typeof num === 'number' && typeof den === 'number') {\n    return {\n      numerator: num,\n      denominator: den,\n    }\n  }\n  return null\n}\n\n// implied 1 in '100th of a', 'fifth of a'\nconst oneNth = function (m) {\n  let found = m.match('^#Ordinal$')\n  if (found.found !== true) {\n    return null\n  }\n  // ensure it's '100th of a '\n  if (m.lookAhead('^of .')) {\n    // let num = found.numbers().get()[0]\n    let num = parseNumber(found)\n    return {\n      numerator: 1,\n      denominator: num,\n    }\n  }\n  return null\n}\n\n// 'half'\nconst named = function (m) {\n  let str = m.text('reduced')\n  if (mapping.hasOwnProperty(str)) {\n    return { numerator: 1, denominator: mapping[str] }\n  }\n  return null\n}\n\nconst round = n => {\n  let rounded = Math.round(n * 1000) / 1000\n  // don't round 1 millionth down into 0\n  if (rounded === 0 && n !== 0) {\n    return n\n  }\n  return rounded\n}\n\nconst parseFraction = function (m) {\n  m = m.clone()\n  let res = named(m) || slashForm(m) || nOutOfN(m) || nOrinalth(m) || oneNth(m) || null\n  if (res !== null) {\n    // do the math\n    if (res.numerator && res.denominator) {\n      res.decimal = res.numerator / res.denominator\n      res.decimal = round(res.decimal)\n    }\n  }\n  return res\n}\nexport default parseFraction\n", "/**\n * turn big numbers, like 2.3e+22, into a string with a ton of trailing 0's\n * */\nconst numToString = function (n) {\n  if (n < 1000000) {\n    return String(n)\n  }\n  let str\n  if (typeof n === 'number') {\n    str = n.toFixed(0)\n  } else {\n    str = n\n  }\n  if (str.indexOf('e+') === -1) {\n    return str\n  }\n  return str\n    .replace('.', '')\n    .split('e+')\n    .reduce(function (p, b) {\n      return p + Array(b - p.length + 2).join(0)\n    })\n}\nexport default numToString\n// console.log(numToString(2.5e+22));\n", "const tens_mapping = [\n  ['ninety', 90],\n  ['eighty', 80],\n  ['seventy', 70],\n  ['sixty', 60],\n  ['fifty', 50],\n  ['forty', 40],\n  ['thirty', 30],\n  ['twenty', 20],\n]\nconst ones_mapping = [\n  '',\n  'one',\n  'two',\n  'three',\n  'four',\n  'five',\n  'six',\n  'seven',\n  'eight',\n  'nine',\n  'ten',\n  'eleven',\n  'twelve',\n  'thirteen',\n  'fourteen',\n  'fifteen',\n  'sixteen',\n  'seventeen',\n  'eighteen',\n  'nineteen',\n]\n\nconst sequence = [\n  [1e24, 'septillion'],\n  [1e20, 'hundred sextillion'],\n  [1e21, 'sextillion'],\n  [1e20, 'hundred quintillion'],\n  [1e18, 'quintillion'],\n  [1e17, 'hundred quadrillion'],\n  [1e15, 'quadrillion'],\n  [1e14, 'hundred trillion'],\n  [1e12, 'trillion'],\n  [1e11, 'hundred billion'],\n  [1e9, 'billion'],\n  [1e8, 'hundred million'],\n  [1e6, 'million'],\n  [100000, 'hundred thousand'],\n  [1000, 'thousand'],\n  [100, 'hundred'],\n  [1, 'one'],\n]\nexport { sequence, tens_mapping, ones_mapping }\n", "import toString from '../../_toString.js'\nimport { sequence, ones_mapping, tens_mapping } from './data.js'\n/**\n * turns an integer/float into.ber, like 'fifty-five'\n */\n\n//turn number into an array of magnitudes, like [[5, million], [2, hundred]]\nconst breakdown_magnitudes = function (num) {\n  let working = num\n  let have = []\n  sequence.forEach(a => {\n    if (num >= a[0]) {\n      let howmany = Math.floor(working / a[0])\n      working -= howmany * a[0]\n      if (howmany) {\n        have.push({\n          unit: a[1],\n          count: howmany,\n        })\n      }\n    }\n  })\n  return have\n}\n\n//turn numbers from 100-0 into their text\nconst breakdown_hundred = function (num) {\n  let arr = []\n  if (num > 100) {\n    return arr //something bad happened..\n  }\n  for (let i = 0; i < tens_mapping.length; i++) {\n    if (num >= tens_mapping[i][1]) {\n      num -= tens_mapping[i][1]\n      arr.push(tens_mapping[i][0])\n    }\n  }\n  //(hopefully) we should only have 20-0 now\n  if (ones_mapping[num]) {\n    arr.push(ones_mapping[num])\n  }\n  return arr\n}\n\n/** print-out 'point eight nine'*/\nconst handle_decimal = num => {\n  const names = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine']\n  let arr = []\n  //parse it out like a string, because js math is such shit\n  let str = toString(num)\n  let decimal = str.match(/\\.([0-9]+)/)\n  if (!decimal || !decimal[0]) {\n    return arr\n  }\n  arr.push('point')\n  let decimals = decimal[0].split('')\n  for (let i = 0; i < decimals.length; i++) {\n    arr.push(names[decimals[i]])\n  }\n  return arr\n}\n\n/** turns an integer into a textual number */\nconst toText = function (obj) {\n  let num = obj.num\n  // handle zero, quickly\n  if (num === 0 || num === '0') {\n    return 'zero' // no?\n  }\n  //big numbers, north of sextillion, aren't gonna work well..\n  //keep them small..\n  if (num > 1e21) {\n    num = toString(num)\n  }\n  let arr = []\n  //handle negative numbers\n  if (num < 0) {\n    arr.push('minus')\n    num = Math.abs(num)\n  }\n  //break-down into units, counts\n  let units = breakdown_magnitudes(num)\n  //build-up the string from its components\n  for (let i = 0; i < units.length; i++) {\n    let unit_name = units[i].unit\n    if (unit_name === 'one') {\n      unit_name = ''\n      //put an 'and' in here\n      if (arr.length > 1) {\n        arr.push('and')\n      }\n    }\n    arr = arr.concat(breakdown_hundred(units[i].count))\n    arr.push(unit_name)\n  }\n  //also support decimals - 'point eight'\n  arr = arr.concat(handle_decimal(num))\n  //remove empties\n  arr = arr.filter(s => s)\n  if (arr.length === 0) {\n    arr[0] = ''\n  }\n  return arr.join(' ')\n}\n\nexport default toText\n\n// console.log(to_text(-1000.8));\n", "import toText from '../../numbers/format/toText/index.js'\n\nconst toCardinal = function (obj) {\n  if (!obj.numerator || !obj.denominator) {\n    return ''\n  }\n  let a = toText({ num: obj.numerator })\n  let b = toText({ num: obj.denominator })\n  return `${a} out of ${b}`\n}\nexport default toCardinal\n", "import textValue from '../toText/index.js'\n\nconst irregulars = {\n  one: 'first',\n  two: 'second',\n  three: 'third',\n  five: 'fifth',\n  eight: 'eighth',\n  nine: 'ninth',\n  twelve: 'twelfth',\n  twenty: 'twentieth',\n  thirty: 'thirtieth',\n  forty: 'fortieth',\n  fourty: 'fourtieth',\n  fifty: 'fiftieth',\n  sixty: 'sixtieth',\n  seventy: 'seventieth',\n  eighty: 'eightieth',\n  ninety: 'ninetieth',\n}\n\n/**\n * convert a javascript number to 'twentieth' format\n * */\nconst textOrdinal = obj => {\n  let words = textValue(obj).split(' ')\n  //convert the last number to an ordinal\n  let last = words[words.length - 1]\n  if (irregulars.hasOwnProperty(last)) {\n    words[words.length - 1] = irregulars[last]\n  } else {\n    words[words.length - 1] = last.replace(/y$/, 'i') + 'th'\n  }\n  return words.join(' ')\n}\n\nexport default textOrdinal\n", "import toText from '../../numbers/format/toText/index.js'\nimport textOrdinal from '../../numbers/format/toOrdinal/textOrdinal.js'\n\nconst toOrdinal = function (obj) {\n  // don't divide by zero!\n  if (!obj.numerator || !obj.denominator) {\n    return ''\n  }\n  // create [two] [fifths]\n  let start = toText({ num: obj.numerator })\n  let end = textOrdinal({ num: obj.denominator })\n  // 'one secondth' -> 'one half'\n  if (obj.denominator === 2) {\n    end = 'half'\n  }\n  if (start && end) {\n    if (obj.numerator !== 1) {\n      end += 's'\n    }\n    return `${start} ${end}`\n  }\n  return ''\n}\nexport default toOrdinal\n", "import find from './find.js'\nimport parse from './parse.js'\nimport toCardinal from './convert/toCardinal.js'\nimport toOrdinal from './convert/toOrdinal.js'\n\nconst plugin = function (View) {\n  /**\n   */\n  class Fractions extends View {\n    constructor(document, pointer, groups) {\n      super(document, pointer, groups)\n      this.viewType = 'Fractions'\n    }\n    parse(n) {\n      return this.getNth(n).map(parse)\n    }\n    get(n) {\n      return this.getNth(n).map(parse)\n    }\n    json(n) {\n      return this.getNth(n).map(p => {\n        let json = p.toView().json(n)[0]\n        let parsed = parse(p)\n        json.fraction = parsed\n        return json\n      }, [])\n    }\n    // become 0.5\n    toDecimal(n) {\n      this.getNth(n).forEach(m => {\n        let { decimal } = parse(m)\n        m = m.replaceWith(String(decimal), true)\n        m.tag('NumericValue')\n        m.unTag('Fraction')\n      })\n      return this\n    }\n    toFraction(n) {\n      this.getNth(n).forEach(m => {\n        let obj = parse(m)\n        if (obj && typeof obj.numerator === 'number' && typeof obj.denominator === 'number') {\n          let str = `${obj.numerator}/${obj.denominator}`\n          this.replace(m, str)\n        }\n      })\n      return this\n    }\n    toOrdinal(n) {\n      this.getNth(n).forEach(m => {\n        let obj = parse(m)\n        let str = toOrdinal(obj)\n        if (m.after('^#Noun').found) {\n          str += ' of' // three fifths of dentists\n        }\n        m.replaceWith(str)\n      })\n      return this\n    }\n    toCardinal(n) {\n      this.getNth(n).forEach(m => {\n        let obj = parse(m)\n        let str = toCardinal(obj)\n        m.replaceWith(str)\n      })\n      return this\n    }\n    toPercentage(n) {\n      this.getNth(n).forEach(m => {\n        let { decimal } = parse(m)\n        let percent = decimal * 100\n        percent = Math.round(percent * 100) / 100 // round it\n        m.replaceWith(`${percent}%`)\n      })\n      return this\n    }\n  }\n\n  View.prototype.fractions = function (n) {\n    let m = find(this)\n    m = m.getNth(n)\n    return new Fractions(this.document, m.pointer)\n  }\n}\n\nexport default plugin\n", "const ones = 'one|two|three|four|five|six|seven|eight|nine'\nconst tens = 'twenty|thirty|forty|fifty|sixty|seventy|eighty|ninety|fourty'\nconst teens = 'eleven|twelve|thirteen|fourteen|fifteen|sixteen|seventeen|eighteen|nineteen'\n\n// this is a bit of a mess\n// segment consecutive number-words into sensible chunks\nconst findNumbers = function (doc) {\n  let m = doc.match('#Value+')\n\n  //\"50 83\"\n  if (m.has('#NumericValue #NumericValue')) {\n    //a comma may mean two numbers\n    if (m.has('#Value @hasComma #Value')) {\n      m.splitAfter('@hasComma')\n    } else if (m.has('#NumericValue #Fraction')) {\n      m.splitAfter('#NumericValue #Fraction')\n    } else {\n      m = m.splitAfter('#NumericValue')\n    }\n  }\n\n  //three-length\n  if (m.has('#Value #Value #Value') && !m.has('#Multiple')) {\n    //twenty-five-twenty\n    if (m.has('(' + tens + ') #Cardinal #Cardinal')) {\n      m = m.splitAfter('(' + tens + ') #Cardinal')\n    }\n  }\n\n  //two-length ones\n  if (m.has('#Value #Value')) {\n    //june 21st 1992 is two seperate values\n    if (m.has('#NumericValue #NumericValue')) {\n      m = m.splitOn('#Year')\n    }\n    //sixty fifteen\n    if (m.has('(' + tens + ') (' + teens + ')')) {\n      m = m.splitAfter('(' + tens + ')')\n    }\n\n    //\"72 82\"\n    let double = m.match('#Cardinal #Cardinal')\n    if (double.found && !m.has('(point|decimal|#Fraction)')) {\n      //not 'two hundred'\n      if (!double.has('#Cardinal (#Multiple|point|decimal)')) {\n        // two fifty five\n        let noMultiple = m.has(`(${ones}) (${tens})`)\n        // twenty one\n        let tensVal = double.has('(' + tens + ') #Cardinal')\n        // hundredOne\n        let multVal = double.has('#Multiple #Value')\n        //one proper way, 'twenty one', or 'hundred one'\n        if (!noMultiple && !tensVal && !multVal) {\n          // double = double.firstTerm()\n          double.terms().forEach(d => {\n            m = m.splitOn(d)\n          })\n        }\n      }\n    }\n\n    //seventh fifth\n    if (m.match('#Ordinal #Ordinal').match('#TextValue').found && !m.has('#Multiple')) {\n      //the one proper way, 'twenty first'\n      if (!m.has('(' + tens + ') #Ordinal')) {\n        m = m.splitAfter('#Ordinal')\n      }\n    }\n    //fifth five\n    m = m.splitBefore('#Ordinal [#Cardinal]', 0)\n    //five 2017 (support '5 hundred', and 'twenty 5'\n    if (m.has('#TextValue #NumericValue') && !m.has('(' + tens + '|#Multiple)')) {\n      m = m.splitBefore('#TextValue #NumericValue')\n    }\n  }\n\n  //5-8\n  m = m.splitAfter('#NumberRange')\n  // june 5th 1999\n  m = m.splitBefore('#Year')\n  return m\n}\n\nexport default findNumbers\n", "import parseText from './toNumber/index.js'\nimport parseFraction from '../../fractions/parse.js'\n\nconst parseNumeric = function (str, m) {\n  str = str.replace(/,/g, '')\n  //parse a numeric-number\n  let arr = str.split(/([0-9.,]*)/)\n  let [prefix, num] = arr\n  let suffix = arr.slice(2).join('')\n  if (num !== '' && m.length < 2) {\n    num = Number(num || str)\n    //ensure that num is an actual number\n    if (typeof num !== 'number') {\n      num = null\n    }\n    // strip an ordinal off the suffix\n    suffix = suffix || ''\n    if (suffix === 'st' || suffix === 'nd' || suffix === 'rd' || suffix === 'th') {\n      suffix = ''\n    }\n    // support M for million, k for thousand\n    // if (suffix === 'm' || suffix === 'M') {\n    //   num *= 1000000\n    //   suffix = ''\n    // }\n    // if (suffix === 'k' || suffix === 'k') {\n    //   num *= 1000\n    //   suffix = ''\n    // }\n    return {\n      prefix: prefix || '',\n      num: num,\n      suffix: suffix,\n    }\n  }\n  return null\n}\n\n// get a numeric value from this phrase\nconst parseNumber = function (m) {\n  if (typeof m === 'string') {\n    return { num: parseText(m) }\n  }\n  let str = m.text('reduced')\n  // reach for '12 litres'\n  let unit = m.growRight('#Unit').match('#Unit$').text('machine')\n  // is it in '3,123' format?\n  let hasComma = /[0-9],[0-9]/.test(m.text('text'))\n  // parse a numeric-number like '$4.00'\n  if (m.terms().length === 1 && !m.has('#Multiple')) {\n    let res = parseNumeric(str, m)\n    if (res !== null) {\n      res.hasComma = hasComma\n      res.unit = unit\n      return res\n    }\n  }\n  // -- parse text-formats --\n  // Fractions: remove 'and a half' etc. from the end\n  let frPart = m.match('#Fraction{2,}$')\n  frPart = frPart.found === false ? m.match('^#Fraction$') : frPart\n  let fraction = null\n  if (frPart.found) {\n    if (frPart.has('#Value and #Value #Fraction')) {\n      frPart = frPart.match('and #Value #Fraction')\n    }\n    fraction = parseFraction(frPart)\n    // remove it from our string\n    m = m.not(frPart)\n    m = m.not('and$')\n    str = m.text('reduced')\n  }\n  let num = 0\n  if (str) {\n    num = parseText(str) || 0\n  }\n  // apply numeric fraction\n  if (fraction && fraction.decimal) {\n    num += fraction.decimal\n  }\n\n\n  return {\n    hasComma,\n    prefix: '',\n    num,\n    suffix: '',\n    isOrdinal: m.has('#Ordinal'),\n    isText: m.has('#TextValue'),\n    isFraction: m.has('#Fraction'),\n    isMoney: m.has('#Money'),\n    unit\n  }\n}\nexport default parseNumber\n", "import toString from '../../_toString.js'\n\n/**\n * turn a number like 5 into an ordinal like 5th\n */\nconst numOrdinal = function (obj) {\n  let num = obj.num\n  if (!num && num !== 0) {\n    return null\n  }\n  //the teens are all 'th'\n  let tens = num % 100\n  if (tens > 10 && tens < 20) {\n    return String(num) + 'th'\n  }\n  //the rest of 'em\n  const mapping = {\n    0: 'th',\n    1: 'st',\n    2: 'nd',\n    3: 'rd',\n  }\n  let str = toString(num)\n  let last = str.slice(str.length - 1, str.length)\n  if (mapping[last]) {\n    str += mapping[last]\n  } else {\n    str += 'th'\n  }\n  return str\n}\n\nexport default numOrdinal\n", "const prefixes = {\n  '¢': 'cents',\n  $: 'dollars',\n  '£': 'pounds',\n  '¥': 'yen',\n  '€': 'euros',\n  '₡': 'colón',\n  '฿': 'baht',\n  '₭': 'kip',\n  '₩': 'won',\n  '₹': 'rupees',\n  '₽': 'ruble',\n  '₺': 'liras',\n}\nconst suffixes = {\n  '%': 'percent',\n  // s: 'seconds',\n  // cm: 'centimetres',\n  // km: 'kilometres',\n  // ft: 'feet',\n  '°': 'degrees'\n}\n\nconst addSuffix = function (obj) {\n  let res = {\n    suffix: '',\n    prefix: obj.prefix,\n  }\n  // $5 to 'five dollars'\n  if (prefixes.hasOwnProperty(obj.prefix)) {\n    res.suffix += ' ' + prefixes[obj.prefix]\n    res.prefix = ''\n  }\n  // 5% to 'five percent'\n  if (suffixes.hasOwnProperty(obj.suffix)) {\n    res.suffix += ' ' + suffixes[obj.suffix]\n  }\n  if (res.suffix && obj.num === 1) {\n    res.suffix = res.suffix.replace(/s$/, '')\n  }\n  // misc other suffixes\n  if (!res.suffix && obj.suffix) {\n    res.suffix += ' ' + obj.suffix\n  }\n  return res\n}\n\nexport default addSuffix", "import numOrdinal from './toOrdinal/numOrdinal.js'\nimport textOrdinal from './toOrdinal/textOrdinal.js'\nimport textCardinal from './toText/index.js'\nimport makeSuffix from './suffix.js'\n\nconst format = function (obj, fmt) {\n  if (fmt === 'TextOrdinal') {\n    let { prefix, suffix } = makeSuffix(obj)\n    return prefix + textOrdinal(obj) + suffix\n  }\n  if (fmt === 'Ordinal') {\n    return obj.prefix + numOrdinal(obj) + obj.suffix\n  }\n  if (fmt === 'TextCardinal') {\n    let { prefix, suffix } = makeSuffix(obj)\n    return prefix + textCardinal(obj) + suffix\n  }\n  // assume Cardinal\n  let num = obj.num\n  if (obj.hasComma) {\n    num = num.toLocaleString()\n  }\n  return obj.prefix + String(num) + obj.suffix\n}\nexport default format", "import parse from './parse/index.js'\n\nconst isArray = arr => Object.prototype.toString.call(arr) === '[object Array]'\n\n// turn anything into {foo:true} format\nconst coerceToObject = function (input) {\n  if (typeof input === 'string' || typeof input === 'number') {\n    let tmp = {}\n    tmp[input] = true\n    return tmp\n  }\n  if (isArray(input)) {\n    return input.reduce((h, s) => {\n      h[s] = true\n      return h\n    }, {})\n  }\n  return input || {}\n}\n\n// only return values with the given unit\nconst isUnit = function (doc, input = {}) {\n  input = coerceToObject(input)\n  return doc.filter(p => {\n    let { unit } = parse(p)\n    if (unit && input[unit] === true) {\n      return true\n    }\n    return false\n  })\n}\nexport default isUnit\n", "import find from './find.js'\nimport parse from './parse/index.js'\nimport format from './format/index.js'\nimport isUnit from './isUnit.js'\n\nconst addMethod = function (View) {\n  /**   */\n  class Numbers extends View {\n    constructor(document, pointer, groups) {\n      super(document, pointer, groups)\n      this.viewType = 'Numbers'\n    }\n    parse(n) {\n      return this.getNth(n).map(parse)\n    }\n    get(n) {\n      return this.getNth(n)\n        .map(parse)\n        .map(o => o.num)\n    }\n    json(n) {\n      let opts = typeof n === 'object' ? n : {}\n      return this.getNth(n).map(p => {\n        let json = p.toView().json(opts)[0]\n        let parsed = parse(p)\n        json.number = {\n          prefix: parsed.prefix,\n          num: parsed.num,\n          suffix: parsed.suffix,\n          hasComma: parsed.hasComma,\n          unit: parsed.unit,\n        }\n        return json\n      }, [])\n    }\n    /** any known measurement unit, for the number */\n    units() {\n      return this.growRight('#Unit').match('#Unit$')\n    }\n    /** return values that match a given unit */\n    isUnit(allowed) {\n      return isUnit(this, allowed)\n    }\n    /** return only ordinal numbers */\n    isOrdinal() {\n      return this.if('#Ordinal')\n    }\n    /** return only cardinal numbers*/\n    isCardinal() {\n      return this.if('#Cardinal')\n    }\n\n    /** convert to numeric form like '8' or '8th' */\n    toNumber() {\n      let res = this.map(val => {\n        if (!this.has('#TextValue')) {\n          return val\n        }\n        let obj = parse(val)\n        if (obj.num === null) {\n          return val\n        }\n        let fmt = val.has('#Ordinal') ? 'Ordinal' : 'Cardinal'\n        let str = format(obj, fmt)\n        val.replaceWith(str, { tags: true })\n        return val.tag('NumericValue')\n      })\n      return new Numbers(res.document, res.pointer)\n    }\n    /** add commas, or nicer formatting for numbers */\n    toLocaleString() {\n      let m = this\n      m.forEach(val => {\n        let obj = parse(val)\n        if (obj.num === null) {\n          return\n        }\n        let num = obj.num.toLocaleString()\n        // support ordinal ending, too\n        if (val.has('#Ordinal')) {\n          let str = format(obj, 'Ordinal')\n          let end = str.match(/[a-z]+$/)\n          if (end) {\n            num += end[0] || ''\n          }\n        }\n        val.replaceWith(num, { tags: true })\n      })\n      return this\n    }\n    /** convert to numeric form like 'eight' or 'eighth' */\n    toText() {\n      let m = this\n      let res = m.map(val => {\n        if (val.has('#TextValue')) {\n          return val\n        }\n        let obj = parse(val)\n        if (obj.num === null) {\n          return val\n        }\n        let fmt = val.has('#Ordinal') ? 'TextOrdinal' : 'TextCardinal'\n        let str = format(obj, fmt)\n        val.replaceWith(str, { tags: true })\n        val.tag('TextValue')\n        return val\n      })\n      return new Numbers(res.document, res.pointer)\n    }\n    /** convert ordinal to cardinal form, like 'eight', or '8' */\n    toCardinal() {\n      let m = this\n      let res = m.map(val => {\n        if (!val.has('#Ordinal')) {\n          return val\n        }\n        let obj = parse(val)\n        if (obj.num === null) {\n          return val\n        }\n        let fmt = val.has('#TextValue') ? 'TextCardinal' : 'Cardinal'\n        let str = format(obj, fmt)\n        val.replaceWith(str, { tags: true })\n        val.tag('Cardinal')\n        return val\n      })\n      return new Numbers(res.document, res.pointer)\n    }\n    /** convert cardinal to ordinal form, like 'eighth', or '8th' */\n    toOrdinal() {\n      let m = this\n      let res = m.map(val => {\n        if (val.has('#Ordinal')) {\n          return val\n        }\n        let obj = parse(val)\n        if (obj.num === null) {\n          return val\n        }\n        let fmt = val.has('#TextValue') ? 'TextOrdinal' : 'Ordinal'\n        let str = format(obj, fmt)\n        val.replaceWith(str, { tags: true })\n        val.tag('Ordinal')\n        return val\n      })\n      return new Numbers(res.document, res.pointer)\n    }\n\n    /** return only numbers that are == n */\n    isEqual(n) {\n      return this.filter(val => {\n        let num = parse(val).num\n        return num === n\n      })\n    }\n    /** return only numbers that are > n*/\n    greaterThan(n) {\n      return this.filter(val => {\n        let num = parse(val).num\n        return num > n\n      })\n    }\n    /** return only numbers that are < n*/\n    lessThan(n) {\n      return this.filter(val => {\n        let num = parse(val).num\n        return num < n\n      })\n    }\n    /** return only numbers > min and < max */\n    between(min, max) {\n      return this.filter(val => {\n        let num = parse(val).num\n        return num > min && num < max\n      })\n    }\n    /** set these number to n */\n    set(n) {\n      if (n === undefined) {\n        return this // don't bother\n      }\n      if (typeof n === 'string') {\n        n = parse(n).num\n      }\n      let m = this\n      let res = m.map(val => {\n        let obj = parse(val)\n        obj.num = n\n        if (obj.num === null) {\n          return val\n        }\n        let fmt = val.has('#Ordinal') ? 'Ordinal' : 'Cardinal'\n        if (val.has('#TextValue')) {\n          fmt = val.has('#Ordinal') ? 'TextOrdinal' : 'TextCardinal'\n        }\n        let str = format(obj, fmt)\n        // add commas to number\n        if (obj.hasComma && fmt === 'Cardinal') {\n          str = Number(str).toLocaleString()\n        }\n        val = val.not('#Currency')\n        val.replaceWith(str, { tags: true })\n        // handle plural/singular unit\n        // agreeUnits(agree, val, obj)\n        return val\n      })\n      return new Numbers(res.document, res.pointer)\n    }\n    add(n) {\n      if (!n) {\n        return this // don't bother\n      }\n      if (typeof n === 'string') {\n        n = parse(n).num\n      }\n      let m = this\n      let res = m.map(val => {\n        let obj = parse(val)\n        if (obj.num === null) {\n          return val\n        }\n        obj.num += n\n        let fmt = val.has('#Ordinal') ? 'Ordinal' : 'Cardinal'\n        if (obj.isText) {\n          fmt = val.has('#Ordinal') ? 'TextOrdinal' : 'TextCardinal'\n        }\n        let str = format(obj, fmt)\n        val.replaceWith(str, { tags: true })\n        // handle plural/singular unit\n        // agreeUnits(agree, val, obj)\n        return val\n      })\n      return new Numbers(res.document, res.pointer)\n    }\n    /** decrease each number by n*/\n    subtract(n, agree) {\n      return this.add(n * -1, agree)\n    }\n    /** increase each number by 1 */\n    increment(agree) {\n      return this.add(1, agree)\n    }\n    /** decrease each number by 1 */\n    decrement(agree) {\n      return this.add(-1, agree)\n    }\n    // overloaded - keep Numbers class\n    update(pointer) {\n      let m = new Numbers(this.document, pointer)\n      m._cache = this._cache // share this full thing\n      return m\n    }\n  }\n  // aliases\n  Numbers.prototype.toNice = Numbers.prototype.toLocaleString\n  Numbers.prototype.isBetween = Numbers.prototype.between\n  Numbers.prototype.minus = Numbers.prototype.subtract\n  Numbers.prototype.plus = Numbers.prototype.add\n  Numbers.prototype.equals = Numbers.prototype.isEqual\n\n  View.prototype.numbers = function (n) {\n    let m = find(this)\n    m = m.getNth(n)\n    return new Numbers(this.document, m.pointer)\n  }\n  View.prototype.percentages = function (n) {\n    let m = find(this)\n    m = m.filter(v => v.has('#Percent') || v.after('^percent'))\n    m = m.getNth(n)\n    return new Numbers(this.document, m.pointer)\n  }\n  View.prototype.money = function (n) {\n    let m = find(this)\n    m = m.filter(v => v.has('#Money') || v.after('^#Currency'))\n    m = m.getNth(n)\n    return new Numbers(this.document, m.pointer)\n  }\n  // alias\n  View.prototype.values = View.prototype.numbers\n}\nexport default addMethod\n", "import fractions from './fractions/api.js'\nimport numbers from './numbers/api.js'\n\nconst api = function (View) {\n  fractions(View)\n  numbers(View)\n}\n\nexport default {\n  api,\n\n  // add @greaterThan, @lessThan\n  // mutate: world => {\n  //   let termMethods = world.methods.one.termMethods\n\n  //   termMethods.lessThan = function (term) {\n  //     return false //TODO: implement\n  //     // return /[aeiou]/.test(term.text)\n  //   }\n  // },\n}\n", "const defaults = {\n  people: true,\n  emails: true,\n  phoneNumbers: true,\n  places: true,\n}\n\nconst redact = function (opts = {}) {\n  opts = Object.assign({}, defaults, opts)\n  if (opts.people !== false) {\n    this.people().replaceWith('██████████')\n  }\n  if (opts.emails !== false) {\n    this.emails().replaceWith('██████████')\n  }\n  if (opts.places !== false) {\n    this.places().replaceWith('██████████')\n  }\n  if (opts.phoneNumbers !== false) {\n    this.phoneNumbers().replaceWith('███████')\n  }\n  return this\n}\n\nconst plugin = {\n  api: function (View) {\n    View.prototype.redact = redact\n  }\n}\nexport default plugin\n", "//is this sentence asking a question?\nconst isQuestion = function (doc) {\n  let clauses = doc.clauses()\n\n  // Has ellipsis at the end means it's probably not a question\n  // e.g., Is this just fantasy...\n  if (/\\.\\.$/.test(doc.out('text'))) {\n    return false\n  }\n\n  // Starts with question word, but has a comma, so probably not a question\n  // e.g., Why are we caught in a land slide, no escape from reality\n  if (doc.has('^#QuestionWord') && doc.has('@hasComma')) {\n    return false\n  }\n\n  // do you see it or not\n  if (doc.has('or not$')) {\n    return true\n  }\n\n  // Starts with a #QuestionWord\n  // e.g., What open your eyes look up to the skies and see\n  if (doc.has('^#QuestionWord')) {\n    return true\n  }\n\n  // Second word is a #QuestionWord\n  // e.g., I'm what a poor boy\n  // case ts.has('^\\w+\\s#QuestionWord'):\n  // return true;\n\n  // is it, do you - start of sentence\n  // e.g., Do I need no sympathy\n  if (doc.has('^(do|does|did|is|was|can|could|will|would|may) #Noun')) {\n    return true\n  }\n\n  // these are a little more loose..\n  // e.g., Must I be come easy come easy go\n  if (doc.has('^(have|must) you')) {\n    return true\n  }\n\n  // Clause starts with a question word\n  // e.g., Anyway the wind blows, what doesn't really matter to me\n  // if (clauses.has('^#QuestionWord')) {\n  //   return true\n  // }\n\n  //is wayne gretskzy alive\n  if (clauses.has('(do|does|is|was) #Noun+ #Adverb? (#Adjective|#Infinitive)$')) {\n    return true\n  }\n\n  // Probably not a question\n  return false\n}\n\nconst findQuestions = function (view) {\n  const hasQ = /\\?/\n  const { document } = view\n  return view.filter(m => {\n    let terms = m.docs[0] || []\n    let lastTerm = terms[terms.length - 1]\n    // is it not a full sentence?\n    if (!lastTerm || document[lastTerm.index[0]].length !== terms.length) {\n      return false\n    }\n    // does it end with a question mark?\n    if (hasQ.test(lastTerm.post)) {\n      return true\n    }\n    // try to guess a sentence without a question-mark\n    return isQuestion(m)\n  })\n}\nexport default findQuestions\n", "// if a clause starts with these, it's not a main clause\nconst subordinate = `(after|although|as|because|before|if|since|than|that|though|when|whenever|where|whereas|wherever|whether|while|why|unless|until|once)`\nconst relative = `(that|which|whichever|who|whoever|whom|whose|whomever)`\n\n//try to remove secondary clauses\nconst mainClause = function (s) {\n  let m = s\n  if (m.length === 1) {\n    return m\n  }\n  // if there's no verb, it's dependent\n  m = m.if('#Verb')\n  if (m.length === 1) {\n    return m\n  }\n  // this is a signal for subordinate-clauses\n  m = m.ifNo(subordinate)\n  m = m.ifNo('^even (if|though)')\n  m = m.ifNo('^so that')\n  m = m.ifNo('^rather than')\n  m = m.ifNo('^provided that')\n  if (m.length === 1) {\n    return m\n  }\n  // relative clauses\n  m = m.ifNo(relative)\n  if (m.length === 1) {\n    return m\n  }\n\n  // check for subordinating conjunctions -- must be at the beginning of the clause\n  m = m.ifNo('(^despite|^during|^before|^through|^throughout)')\n  if (m.length === 1) {\n    return m\n  }\n\n  // check for clauses beginning with Gerund (\"Taking ..., ...\")\n  m = m.ifNo('^#Gerund')\n  if (m.length === 1) {\n    return m\n  }\n\n  // did we go too far?\n  if (m.length === 0) {\n    m = s\n  }\n  // choose the first one?\n  return m.eq(0)\n}\nexport default mainClause\n", "import findMain from './mainClause.js'\n\nconst grammar = function (vb) {\n  let tense = null\n  if (vb.has('#PastTense')) {\n    tense = 'PastTense'\n  } else if (vb.has('#FutureTense')) {\n    tense = 'FutureTense'\n  } else if (vb.has('#PresentTense')) {\n    tense = 'PresentTense'\n  }\n  return {\n    tense\n  }\n}\n\nconst parse = function (s) {\n  let clauses = s.clauses()\n  let main = findMain(clauses)\n  let chunks = main.chunks()\n  let subj = s.none()\n  let verb = s.none()\n  let pred = s.none()\n  chunks.forEach((ch, i) => {\n    if (i === 0 && !ch.has('<Verb>')) {\n      subj = ch\n      return\n    }\n    if (!verb.found && ch.has('<Verb>')) {\n      verb = ch\n      return\n    }\n    if (verb.found) {\n      pred = pred.concat(ch)\n    }\n  })\n  // cleanup a missed parse\n  if (verb.found && !subj.found) {\n    subj = verb.before('<Noun>+').first()\n  }\n  return {\n    subj,\n    verb,\n    pred,\n    grammar: grammar(verb)\n  }\n}\nexport default parse", "const toPast = function (s) {\n  let verbs = s.verbs()\n  // translate the first verb, no-stress\n  let first = verbs.eq(0)\n  // already past\n  if (first.has('#PastTense')) {\n    return s\n  }\n  first.toPastTense()\n\n  // force agreement with any 2nd/3rd verbs:\n  if (verbs.length > 1) {\n    verbs = verbs.slice(1)\n    // remove any sorta infinitive - 'to engage'\n    verbs = verbs.filter((v) => !v.lookBehind('to$').found)\n\n    // keep -ing verbs\n    verbs = verbs.if('#PresentTense')\n    verbs = verbs.notIf('#Gerund')\n\n    //run-on infinitive-list - 'to walk, sit and eat'\n    let list = s.match('to #Verb+ #Conjunction #Verb').terms()\n    verbs = verbs.not(list)\n\n    // otherwise, I guess so?\n    if (verbs.found) {\n      verbs.verbs().toPastTense()\n    }\n  }\n\n  // s.compute('chunks')\n  return s\n}\nexport default toPast", "const toPresent = function (s) {\n  let verbs = s.verbs()\n  // translate the first verb, no-stress\n  let first = verbs.eq(0)\n  // already present\n  // if (first.has('#PresentTense')) {\n  //   return s\n  // }\n  first.toPresentTense()\n\n  // force agreement with any 2nd/3rd verbs:\n  if (verbs.length > 1) {\n    verbs = verbs.slice(1)\n    // remove any sorta infinitive - 'to engage'\n    verbs = verbs.filter((v) => !v.lookBehind('to$').found)\n\n    // keep -ing verbs\n    // verbs = verbs.if('#PresentTense')\n    verbs = verbs.notIf('#Gerund')\n\n    //run-on infinitive-list - 'to walk, sit and eat'\n    // let list = s.match('to #Verb+ #Conjunction #Verb').terms()\n    // verbs = verbs.not(list)\n\n    // otherwise, I guess so?\n    if (verbs.found) {\n      verbs.verbs().toPresentTense()\n    }\n  }\n\n  // s.compute('chunks')\n  return s\n}\nexport default toPresent", "const toFuture = function (s) {\n  let verbs = s.verbs()\n  // translate the first verb, no-stress\n  let first = verbs.eq(0)\n  first.toFutureTense()\n  s = s.fullSentence()\n  verbs = s.verbs()//re-do it\n  // verbs.debug()\n  // force agreement with any 2nd/3rd verbs:\n  if (verbs.length > 1) {\n    verbs = verbs.slice(1)\n    // which following-verbs should we also change?\n    let toChange = verbs.filter((vb) => {\n      // remove any sorta infinitive - 'to engage'\n      if (vb.lookBehind('to$').found) {\n        return false\n      }\n      // is watching\n      if (vb.has('#Copula #Gerund')) {\n        return true\n      }\n      // keep -ing verbs\n      if (vb.has('#Gerund')) {\n        return false\n      }\n      // he is green and he is friendly\n      if (vb.has('#Copula')) {\n        return true\n      }\n      // 'he will see when he watches'\n      if (vb.has('#PresentTense') && !vb.has('#Infinitive') && vb.lookBefore('(he|she|it|that|which)$').found) {\n        return false\n      }\n      return true\n    })\n    // otherwise, change em too\n    if (toChange.found) {\n      toChange.forEach(m => {\n        //extra rules for 'is'\n        if (m.has('#Copula')) {\n          // when he was out..\n          m.match('was').replaceWith('is')\n          // when he is out\n          m.match('is').replaceWith('will be')\n          return\n        }\n        // if (m.has('#PastTense')) {\n        //   m.toPresentTense()\n        //   return\n        // }\n        m.toInfinitive()\n      })\n    }\n  }\n  return s\n}\nexport default toFuture", "const toNegative = function (s) {\n  s.verbs().first().toNegative().compute('chunks')\n  return s\n}\nconst toPositive = function (s) {\n  s.verbs().first().toPositive().compute('chunks')\n  return s\n}\nexport { toNegative, toPositive }", "const toInfinitive = function (s) {\n  s.verbs().toInfinitive()\n  // s.compute('chunks')\n  return s\n}\nexport default toInfinitive", "import isQuestion from './questions.js'\nimport parse from './parse/index.js'\nimport toPast from './conjugate/toPast.js'\nimport toPresent from './conjugate/toPresent.js'\nimport toFuture from './conjugate/toFuture.js'\nimport { toNegative, toPositive } from './conjugate/toNegative.js'\nimport toInfinitive from './conjugate/toInfinitive.js'\n\nconst api = function (View) {\n  class Sentences extends View {\n    constructor(document, pointer, groups) {\n      super(document, pointer, groups)\n      this.viewType = 'Sentences'\n    }\n    json(opts = {}) {\n      return this.map(m => {\n        let json = m.toView().json(opts)[0] || {}\n        let { subj, verb, pred, grammar } = parse(m)\n        json.sentence = {\n          subject: subj.text('normal'),\n          verb: verb.text('normal'),\n          predicate: pred.text('normal'),\n          grammar\n        }\n        return json\n      }, [])\n    }\n    toPastTense(n) {\n      return this.getNth(n).map(s => {\n        let parsed = parse(s)\n        return toPast(s, parsed)\n      })\n    }\n    toPresentTense(n) {\n      return this.getNth(n).map(s => {\n        let parsed = parse(s)\n        return toPresent(s, parsed)\n      })\n    }\n    toFutureTense(n) {\n      return this.getNth(n).map(s => {\n        let parsed = parse(s)\n        s = toFuture(s, parsed)\n        return s\n      })\n    }\n    toInfinitive(n) {\n      return this.getNth(n).map(s => {\n        let parsed = parse(s)\n        return toInfinitive(s, parsed)\n      })\n    }\n    toNegative(n) {\n      return this.getNth(n).map(vb => {\n        let parsed = parse(vb)\n        return toNegative(vb, parsed)\n      })\n    }\n    toPositive(n) {\n      return this.getNth(n).map(vb => {\n        let parsed = parse(vb)\n        return toPositive(vb, parsed)\n      })\n    }\n    isQuestion(n) {\n      return this.questions(n)\n    }\n    isExclamation(n) {\n      let res = this.filter(s => s.lastTerm().has('@hasExclamation'))\n      return res.getNth(n)\n    }\n    isStatement(n) {\n      let res = this.filter(s => !s.isExclamation().found && !s.isQuestion().found)\n      return res.getNth(n)\n    }\n    // overloaded - keep Sentences class\n    update(pointer) {\n      let m = new Sentences(this.document, pointer)\n      m._cache = this._cache // share this full thing\n      return m\n    }\n  }\n  // aliases\n  Sentences.prototype.toPresent = Sentences.prototype.toPresentTense\n  Sentences.prototype.toPast = Sentences.prototype.toPastTense\n  Sentences.prototype.toFuture = Sentences.prototype.toFutureTense\n\n  const methods = {\n    sentences: function (n) {\n      let m = this.map(s => s.fullSentence())\n      m = m.getNth(n)\n      return new Sentences(this.document, m.pointer)\n    },\n    questions: function (n) {\n      let m = isQuestion(this)\n      return m.getNth(n)\n    },\n  }\n\n  Object.assign(View.prototype, methods)\n}\nexport default api\n", "import api from './api.js'\n\nexport default { api }\n", "const find = function (doc) {\n  let m = doc.splitAfter('@hasComma')\n  m = m.match('#Honorific+? #Person+')\n  // Spencer's King\n  let poss = m.match('#Possessive').notIf('(his|her)') //her majesty ...\n  m = m.splitAfter(poss)\n  return m\n}\nexport default find\n", "const parse = function (m) {\n  let res = {}\n  res.firstName = m.match('#FirstName+')\n  res.lastName = m.match('#LastName+')\n  res.honorific = m.match('#Honorific+')\n\n  let last = res.lastName\n  let first = res.firstName\n  if (!first.found || !last.found) {\n    // let p = m.clone()\n    // assume 'Mr Springer' is a last-name\n    if (!first.found && !last.found && m.has('^#Honorific .$')) {\n      res.lastName = m.match('.$')\n      return res\n    }\n  }\n  return res\n}\nexport default parse\n", "/*\n  Important notice - \n  this method makes many assumptions about gender-identity, in-order to assign grammatical gender.\n  it should not be used for any other purposes, other than resolving pronouns in english\n*/\nconst m = 'male'\nconst f = 'female'\n\n// known gendered honorifics\nconst honorifics = {\n  mr: m,\n  mrs: f,\n  miss: f,\n  madam: f,\n\n  // british stuff\n  king: m,\n  queen: f,\n  duke: m,\n  duchess: f,\n  baron: m,\n  baroness: f,\n  count: m,\n  countess: f,\n  prince: m,\n  princess: f,\n  sire: m,\n  dame: f,\n  lady: f,\n\n  ayatullah: m, //i think?\n\n  congressman: m,\n  congresswoman: f,\n  'first lady': f,\n\n  // marked as non-binary\n  mx: null,\n}\n\nconst predictGender = function (parsed, person) {\n  let { firstName, honorific } = parsed\n  // use first-name as signal-signal\n  if (firstName.has('#FemaleName')) {\n    return f\n  }\n  if (firstName.has('#MaleName')) {\n    return m\n  }\n  // use honorics as gender-signal\n  if (honorific.found) {\n    let hon = honorific.text('normal')\n    hon = hon.replace(/\\./g, '') //clean it up a bit\n    if (honorifics.hasOwnProperty(hon)) {\n      return honorifics[hon]\n    }\n    // her excelency\n    if (/^her /.test(hon)) {\n      return f\n    }\n    if (/^his /.test(hon)) {\n      return m\n    }\n  }\n  // offer used-pronouns as a signal\n  let after = person.after()\n  if (!after.has('#Person') && after.has('#Pronoun')) {\n    let pro = after.match('#Pronoun')\n    // manual use of gender-neutral\n    if (pro.has('(they|their)')) {\n      return null\n    }\n    let hasMasc = pro.has('(he|his)')\n    let hasFem = pro.has('(she|her|hers)')\n    if (hasMasc && !hasFem) {\n      return m\n    }\n    if (hasFem && !hasMasc) {\n      return f\n    }\n  }\n  return null\n}\nexport default predictGender\n", "import find from './find.js'\nimport parse from './parse.js'\nimport gender from './gender.js'\n\n\nconst addMethod = function (View) {\n  /**\n   *\n   */\n  class People extends View {\n    constructor(document, pointer, groups) {\n      super(document, pointer, groups)\n      this.viewType = 'People'\n    }\n    parse(n) {\n      return this.getNth(n).map(parse)\n    }\n    json(n) {\n      let opts = typeof n === 'object' ? n : {}\n      return this.getNth(n).map(p => {\n        let json = p.toView().json(opts)[0]\n        let parsed = parse(p)\n        json.person = {\n          firstName: parsed.firstName.text('normal'),\n          lastName: parsed.lastName.text('normal'),\n          honorific: parsed.honorific.text('normal'),\n          presumed_gender: gender(parsed, p),\n        }\n        return json\n      }, [])\n    }\n    // used for co-reference resolution only\n    presumedMale() {\n      return this.filter(m => {\n        return m.has('(#MaleName|mr|mister|sr|jr|king|pope|prince|sir)')//todo configure these in .world\n      })\n    }\n    presumedFemale() {\n      return this.filter(m => {\n        return m.has('(#FemaleName|mrs|miss|queen|princess|madam)')\n      })\n    }\n    // overloaded - keep People class\n    update(pointer) {\n      let m = new People(this.document, pointer)\n      m._cache = this._cache // share this full thing\n      return m\n    }\n  }\n\n  View.prototype.people = function (n) {\n    let m = find(this)\n    m = m.getNth(n)\n    return new People(this.document, m.pointer)\n  }\n}\nexport default addMethod\n", "const find = function (doc) {\n  let m = doc.match('(#Place|#Address)+')\n\n  // split all commas except for 'paris, france'\n  let splits = m.match('@hasComma')\n  splits = splits.filter(c => {\n    // split 'europe, china'\n    if (c.has('(asia|africa|europe|america)$')) {\n      return true\n    }\n    // don't split 'paris, france'\n    if (c.has('(#City|#Region|#ProperNoun)$') && c.after('^(#Country|#Region)').found) {\n      return false\n    }\n    return true\n  })\n  m = m.splitAfter(splits)\n  return m\n}\nexport default find\n", "import find from './find.js'\n\nconst addMethod = function (View) {\n  View.prototype.places = function (n) {\n    let m = find(this)\n    m = m.getNth(n)\n    return new View(this.document, m.pointer)\n  }\n}\nexport default addMethod\n", "\nconst api = function (View) {\n  View.prototype.organizations = function (n) {\n    let m = this.match('#Organization+')\n    return m.getNth(n)\n  }\n}\nexport default api\n", "\n//combine them with .topics() method\nconst find = function (n) {\n  let r = this.clauses()\n  // Find people, places, and organizations\n  let m = r.people()\n  m = m.concat(r.places())\n  m = m.concat(r.organizations())\n  m = m.not('(someone|man|woman|mother|brother|sister|father)')\n  //return them to normal ordering\n  m = m.sort('seq')\n  // m = m.unique()\n  m = m.getNth(n)\n  return m\n}\n\nconst api = function (View) {\n  View.prototype.topics = find\n}\nexport default api\n", "import people from './people/api.js'\nimport places from './places/api.js'\nimport orgs from './orgs/api.js'\nimport topics from './topics.js'\n\nconst api = function (View) {\n  people(View)\n  places(View)\n  orgs(View)\n  topics(View)\n}\nexport default { api }\n", "const findVerbs = function (doc) {\n  let m = doc.match('<Verb>')\n  // want to see\n  m = m.not('#Conjunction')\n  // by walking\n  m = m.not('#Preposition')\n\n\n  m = m.splitAfter('@hasComma')\n\n  // the reason he will is ...\n  // all i do is talk\n  m = m.splitAfter('[(do|did|am|was|is|will)] (is|was)', 0)\n  // m = m.splitAfter('[(do|did|am|was|is|will)] #PresentTense', 0)\n\n  // cool\n\n  // like being pampered\n  m = m.splitBefore('(#Verb && !#Copula) [being] #Verb', 0)\n  // like to be pampered\n  m = m.splitBefore('#Verb [to be] #Verb', 0)\n\n  // implicit conjugation - 'help fix'\n\n  m = m.splitAfter('[help] #PresentTense', 0)\n  // what i can sell is..\n  m = m.splitBefore('(#PresentTense|#PastTense) [#Copula]$', 0)\n  // what i can sell will be\n  m = m.splitBefore('(#PresentTense|#PastTense) [will be]$', 0)\n  // directing had\n  m = m.splitBefore('(#PresentTense|#PastTense) [(had|has)]', 0)\n\n  // 'allow yourself'\n  m = m.not('#Reflexive$')\n  // sitting near\n  m = m.not('#Adjective')\n\n  // pastTense-pastTense\n  // Everyone he [met] [told] him\n  m = m.splitAfter('[#PastTense] #PastTense', 0)\n  // Everyone he [met] had [told] him\n  m = m.splitAfter('[#PastTense] #Auxiliary+ #PastTense', 0)\n\n  // fans that were blowing felt amazing\n  m = m.splitAfter('#Copula [#Gerund] #PastTense', 0)\n\n  // managed to see\n  // m = m.splitOn('#PastTense [to] #Infinitive', 0)\n\n\n  //ensure there's actually a verb\n  m = m.if('#Verb')\n  // the reason he will is ...\n  // ensure it's not two verbs\n  // held annually is called\n  if (m.has('(#Verb && !#Auxiliary) #Adverb+? #Copula')) {\n    m = m.splitBefore('#Copula')\n  }\n  return m\n}\nexport default findVerbs\n", "// find the main verb, from a verb phrase\nconst getMain = function (vb) {\n  let root = vb\n  if (vb.wordCount() > 1) {\n    root = vb.not('(#Negative|#Auxiliary|#Modal|#Adverb|#Prefix)')\n  }\n  // fallback to just the last word, sometimes\n  if (root.length > 1 && !root.has('#Phrasal #Particle')) {\n    root = root.last()\n  }\n  // look for more modals\n  root = root.not('(want|wants|wanted) to')\n\n  // fallback\n  if (!root.found) {\n    root = vb.not('#Negative')\n    return root\n  }\n  return root\n}\nexport default getMain\n", "// split adverbs as before/after the root\nconst getAdverbs = function (vb, root) {\n  let res = {\n    pre: vb.none(),\n    post: vb.none(),\n  }\n  if (!vb.has('#Adverb')) {\n    return res\n  }\n  // pivot on the main verb\n  let parts = vb.splitOn(root)\n  if (parts.length === 3) {\n    return {\n      pre: parts.eq(0).adverbs(),\n      post: parts.eq(2).adverbs(),\n    }\n  }\n  // it must be the second one\n  if (parts.eq(0).isDoc(root)) {\n    res.post = parts.eq(1).adverbs()\n    return res\n  }\n  res.pre = parts.eq(0).adverbs()\n  return res\n}\nexport default getAdverbs\n", "import getRoot from './root.js'\nimport getAdverbs from './adverbs.js'\n\nconst getAuxiliary = function (vb, root) {\n  let parts = vb.splitBefore(root)\n  if (parts.length <= 1) {\n    return vb.none()\n  }\n  let aux = parts.eq(0)\n  aux = aux.not('(#Adverb|#Negative|#Prefix)')\n  return aux\n}\n\nconst getNegative = function (vb) {\n  return vb.match('#Negative')\n}\n\n// pull-apart phrasal-verb into verb-particle\nconst getPhrasal = function (root) {\n  if (!root.has('(#Particle|#PhrasalVerb)')) {\n    return {\n      verb: root.none(),\n      particle: root.none()\n    }\n  }\n  let particle = root.match('#Particle$')\n  return {\n    verb: root.not(particle),\n    particle: particle,\n  }\n}\n\nconst parseVerb = function (view) {\n  let vb = view.clone()\n  vb.contractions().expand()\n  const root = getRoot(vb)\n  let res = {\n    root: root,\n    prefix: vb.match('#Prefix'),\n    adverbs: getAdverbs(vb, root),\n    auxiliary: getAuxiliary(vb, root),\n    negative: getNegative(vb),\n    phrasal: getPhrasal(root),\n  }\n  return res\n}\nexport default parseVerb\n", "const present = { tense: 'PresentTense' }\nconst conditional = { conditional: true }\nconst future = { tense: 'FutureTense' }\nconst prog = { progressive: true }\nconst past = { tense: 'PastTense' }\nconst complete = { complete: true, progressive: false }\nconst passive = { passive: true }\nconst plural = { plural: true }\nconst singular = { plural: false }\n\nconst getData = function (tags) {\n  let data = {}\n  tags.forEach(o => {\n    Object.assign(data, o)\n  })\n  return data\n}\n\nconst verbForms = {\n  // === Simple ===\n  'imperative': [\n    // walk!\n    ['#Imperative', []],\n  ],\n\n  'want-infinitive': [\n    ['^(want|wants|wanted) to #Infinitive$', [present]],\n    ['^wanted to #Infinitive$', [past]],\n    ['^will want to #Infinitive$', [future]],\n  ],\n\n  'gerund-phrase': [\n    // started looking\n    ['^#PastTense #Gerund$', [past]],\n    // starts looking\n    ['^#PresentTense #Gerund$', [present]],\n    // start looking\n    ['^#Infinitive #Gerund$', [present]],\n    // will start looking\n    ['^will #Infinitive #Gerund$', [future]],\n    // have started looking\n    ['^have #PastTense #Gerund$', [past]],\n    // will have started looking\n    ['^will have #PastTense #Gerund$', [past]],\n  ],\n\n  'simple-present': [\n    // he walks',\n    ['^#PresentTense$', [present]],\n    // we walk\n    ['^#Infinitive$', [present]],\n  ],\n  'simple-past': [\n    // he walked',\n    ['^#PastTense$', [past]],\n  ],\n  'simple-future': [\n    // he will walk\n    ['^will #Adverb? #Infinitive', [future]],\n  ],\n\n  // === Progressive ===\n  'present-progressive': [\n    // he is walking\n    ['^(is|are|am) #Gerund$', [present, prog]],\n  ],\n  'past-progressive': [\n    // he was walking\n    ['^(was|were) #Gerund$', [past, prog]],\n  ],\n  'future-progressive': [\n    // he will be\n    ['^will be #Gerund$', [future, prog]],\n  ],\n\n  // === Perfect ===\n  'present-perfect': [\n    // he has walked\n    ['^(has|have) #PastTense$', [past, complete]], //past?\n  ],\n  'past-perfect': [\n    // he had walked\n    ['^had #PastTense$', [past, complete]],\n    // had been to see\n    ['^had #PastTense to #Infinitive', [past, complete]],\n  ],\n  'future-perfect': [\n    // he will have\n    ['^will have #PastTense$', [future, complete]],\n  ],\n\n  // === Progressive-perfect ===\n  'present-perfect-progressive': [\n    // he has been walking\n    ['^(has|have) been #Gerund$', [past, prog]], //present?\n  ],\n  'past-perfect-progressive': [\n    // he had been\n    ['^had been #Gerund$', [past, prog]],\n  ],\n  'future-perfect-progressive': [\n    // will have been\n    ['^will have been #Gerund$', [future, prog]],\n  ],\n\n  // ==== Passive ===\n  'passive-past': [\n    // got walked, was walked, were walked\n    ['(got|were|was) #Passive', [past, passive]],\n    // was being walked\n    ['^(was|were) being #Passive', [past, passive]],\n    // had been walked, have been eaten\n    ['^(had|have) been #Passive', [past, passive]],\n  ],\n  'passive-present': [\n    // is walked, are stolen\n    ['^(is|are|am) #Passive', [present, passive]],\n    // is being walked\n    ['^(is|are|am) being #Passive', [present, passive]],\n    // has been cleaned\n    ['^has been #Passive', [present, passive]],\n  ],\n  'passive-future': [\n    // will have been walked\n    ['will have been #Passive', [future, passive, conditional]],\n    // will be cleaned\n    ['will be being? #Passive', [future, passive, conditional]],\n  ],\n\n  // === Conditional ===\n  'present-conditional': [\n    // would be walked\n    ['would be #PastTense', [present, conditional]],\n  ],\n  'past-conditional': [\n    // would have been walked\n    ['would have been #PastTense', [past, conditional]],\n  ],\n\n  // ==== Auxiliary ===\n  'auxiliary-future': [\n    // going to drink\n    ['(is|are|am|was) going to (#Infinitive|#PresentTense)', [future]],\n  ],\n  'auxiliary-past': [\n    // he did walk\n    ['^did #Infinitive$', [past, singular]],\n    // used to walk\n    ['^used to #Infinitive$', [past, complete]],\n  ],\n  'auxiliary-present': [\n    // we do walk\n    ['^(does|do) #Infinitive$', [present, complete, plural]],\n  ],\n\n  // === modals ===\n  'modal-past': [\n    // he could have walked\n    ['^(could|must|should|shall) have #PastTense$', [past]],\n  ],\n  'modal-infinitive': [\n    // he can walk\n    ['^#Modal #Infinitive$', []],\n  ],\n\n  'infinitive': [\n    // walk\n    ['^#Infinitive$', []],\n  ],\n}\n\nlet list = []\nObject.keys(verbForms).map(k => {\n  verbForms[k].forEach(a => {\n    list.push({\n      name: k,\n      match: a[0],\n      data: getData(a[1]),\n    })\n  })\n})\n\nexport default list\n", "import forms from './forms.js'\n\nconst cleanUp = function (vb, res) {\n  vb = vb.clone()\n  // remove adverbs\n  if (res.adverbs.post && res.adverbs.post.found) {\n    vb.remove(res.adverbs.post)\n  }\n  if (res.adverbs.pre && res.adverbs.pre.found) {\n    vb.remove(res.adverbs.pre)\n  }\n  // remove negatives\n  if (vb.has('#Negative')) {\n    vb = vb.remove('#Negative')\n  }\n  // remove prefixes like 'anti'\n  if (vb.has('#Prefix')) {\n    vb = vb.remove('#Prefix')\n  }\n  // cut-off phrasal-verb\n  if (res.root.has('#PhrasalVerb #Particle')) {\n    vb.remove('#Particle$')\n  }\n  // did we miss any of these?\n  // vb = vb.remove('#Adverb')\n  vb = vb.not('#Adverb')\n  return vb\n}\n\n// 'learned [to code]'\nconst isInfinitive = function (vb) {\n  if (vb.has('#Infinitive')) {\n    let m = vb.growLeft('to')\n    if (m.has('^to #Infinitive')) {\n      return true\n    }\n  }\n  return false\n}\n\nconst getGrammar = function (vb, res) {\n  let grammar = {}\n  // make it easy to classify, first\n  vb = cleanUp(vb, res)\n  for (let i = 0; i < forms.length; i += 1) {\n    let todo = forms[i]\n    if (vb.has(todo.match) === true) {\n      grammar.form = todo.name\n      Object.assign(grammar, todo.data)\n      break //only match one\n    }\n  }\n  // did we find nothing?\n  if (!grammar.form) {\n    if (vb.has('^#Verb$')) {\n      grammar.form = 'infinitive'\n    }\n  }\n  // fallback to 'naiive' tense detection\n  if (!grammar.tense) {\n    grammar.tense = res.root.has('#PastTense') ? 'PastTense' : 'PresentTense'\n  }\n  grammar.copula = res.root.has('#Copula')\n  // 'learn to code'\n  grammar.isInfinitive = isInfinitive(vb)\n  return grammar\n}\n\nexport default getGrammar\n", "const shouldSkip = function (last) {\n  // is it our only choice?\n  if (last.length <= 1) {\n    return false\n  }\n  let obj = last.parse()[0] || {}\n  return obj.isSubordinate\n}\n\n// try to chop-out any obvious conditional phrases\n// he wore, [if it was raining], a raincoat.\nconst noSubClause = function (before) {\n  let parts = before.clauses()\n  parts = parts.filter((m, i) => {\n    // if it was raining..\n    if (m.has('^(if|unless|while|but|for|per|at|by|that|which|who|from)')) {\n      return false\n    }\n    // bowed to her,\n    if (i > 0 && m.has('^#Verb . #Noun+$')) {\n      return false\n    }\n    // the fog, suddenly increasing in..\n    if (i > 0 && m.has('^#Adverb')) {\n      return false\n    }\n    return true\n  })\n  // don't drop the whole thing.\n  if (parts.length === 0) {\n    return before\n  }\n  return parts\n}\n\n//\nconst lastNoun = function (vb) {\n  let before = vb.before()\n  // try to drop any mid-sentence clauses\n  before = noSubClause(before)\n  // parse-out our preceding nouns\n  let nouns = before.nouns()\n  // look for any dead-ringers\n  let last = nouns.last()\n  // i/she/he/they are very strong\n  let pronoun = last.match('(i|he|she|we|you|they)')\n  if (pronoun.found) {\n    return pronoun.nouns()\n  }\n  // these are also good hints\n  let det = nouns.if('^(that|this|those)')\n  if (det.found) {\n    return det\n  }\n  if (nouns.found === false) {\n    det = before.match('^(that|this|those)')\n    if (det.found) {\n      return det\n    }\n  }\n\n  // should we skip a subbordinate clause or two?\n  last = nouns.last()\n  if (shouldSkip(last)) {\n    nouns.remove(last)\n    last = nouns.last()\n  }\n  // i suppose we can skip two?\n  if (shouldSkip(last)) {\n    nouns.remove(last)\n    last = nouns.last()\n  }\n  return last\n}\n\nconst isPlural = function (subj, vb) {\n  // 'we are' vs 'he is'\n  if (vb.has('(are|were|does)')) {\n    return true\n  }\n  if (subj.has('(those|they|we)')) {\n    return true\n  }\n  if (subj.found && subj.isPlural) {\n    return subj.isPlural().found\n  }\n  return false\n}\n\nconst getSubject = function (vb) {\n  let subj = lastNoun(vb)\n  return {\n    subject: subj,\n    plural: isPlural(subj, vb),\n  }\n}\nexport default getSubject\n", "import getSubject from './parse/getSubject.js'\n\nconst noop = vb => vb\n\nconst isPlural = (vb, parsed) => {\n  let subj = getSubject(vb, parsed)\n  let m = subj.subject\n  if (m.has('i') || m.has('we')) {\n    return true\n  }\n  return subj.plural\n}\n\nconst wasWere = (vb, parsed) => {\n  let { subject, plural } = getSubject(vb, parsed)\n  if (plural || subject.has('we')) {\n    return 'were'\n  }\n  return 'was'\n}\n\n// present-tense copula\nconst isAreAm = function (vb, parsed) {\n  // 'people were' -> 'people are'\n  if (vb.has('were')) {\n    return 'are'\n  }\n  // 'i was' -> i am\n  let { subject, plural } = getSubject(vb, parsed)\n  if (subject.has('i')) {\n    return 'am'\n  }\n  if (subject.has('we') || plural) {\n    return 'are'\n  }\n  // 'he was' -> he is\n  return 'is'\n}\n\n\nconst doDoes = function (vb, parsed) {\n  let subj = getSubject(vb, parsed)\n  let m = subj.subject\n  if (m.has('i') || m.has('we')) {\n    return 'do'\n  }\n  if (subj.plural) {\n    return 'do'\n  }\n  return 'does'\n}\n\nconst getTense = function (m) {\n  if (m.has('#Infinitive')) {\n    return 'Infinitive'\n  }\n  if (m.has('#Participle')) {\n    return 'Participle'\n  }\n  if (m.has('#PastTense')) {\n    return 'PastTense'\n  }\n  if (m.has('#Gerund')) {\n    return 'Gerund'\n  }\n  if (m.has('#PresentTense')) {\n    return 'PresentTense'\n  }\n  return undefined\n}\n\nconst toInf = function (vb, parsed) {\n  const { toInfinitive } = vb.methods.two.transform.verb\n  let str = parsed.root.text({ keepPunct: false })\n  str = toInfinitive(str, vb.model, getTense(vb))\n  if (str) {\n    vb.replace(parsed.root, str)\n  }\n  return vb\n}\n\n\n\n// i will start looking -> i started looking\n// i will not start looking -> i did not start looking\nconst noWill = (vb) => {\n  if (vb.has('will not')) {\n    return vb.replace('will not', 'have not')\n  }\n  return vb.remove('will')\n}\n\nexport { noop, isPlural, isAreAm, doDoes, toInf, getSubject, getTense, wasWere, noWill }", "import parseVerb from './parse/index.js'\nimport getGrammar from './parse/grammar/index.js'\nimport { getTense } from './lib.js'\n\nconst toArray = function (m) {\n  if (!m || !m.isView) {\n    return []\n  }\n  const opts = { normal: true, terms: false, text: false }\n  return m.json(opts).map(s => s.normal)\n}\n\nconst toText = function (m) {\n  if (!m || !m.isView) {\n    return ''\n  }\n  return m.text('normal')\n}\n\nconst toInf = function (root) {\n  const { toInfinitive } = root.methods.two.transform.verb\n  let str = root.text('normal')\n  return toInfinitive(str, root.model, getTense(root))\n}\n\nconst toJSON = function (vb) {\n  let parsed = parseVerb(vb)\n  vb = vb.clone().toView()\n  const info = getGrammar(vb, parsed)\n  return {\n    root: parsed.root.text(),\n    preAdverbs: toArray(parsed.adverbs.pre),\n    postAdverbs: toArray(parsed.adverbs.post),\n    auxiliary: toText(parsed.auxiliary),\n    negative: parsed.negative.found,\n    prefix: toText(parsed.prefix),\n    infinitive: toInf(parsed.root),\n    grammar: info,\n  }\n}\nexport default toJSON\n", "import { doDoes, getTense } from '../lib.js'\nconst keep = { tags: true }\n\n// all verb forms are the same\nconst toInf = function (vb, parsed) {\n  const { toInfinitive } = vb.methods.two.transform.verb\n  const { root, auxiliary } = parsed\n  let aux = auxiliary.terms().harden()\n  let str = root.text('normal')\n  str = toInfinitive(str, vb.model, getTense(root))\n  if (str) {\n    vb.replace(root, str, keep).tag('Verb').firstTerm().tag('Infinitive')\n  }\n  // remove any auxiliary terms\n  if (aux.found) {\n    vb.remove(aux)\n  }\n  // there is no real way to do this\n  // 'i not walk'?  'i walk not'?\n  if (parsed.negative.found) {\n    if (!vb.has('not')) {\n      vb.prepend('not')\n    }\n    let does = doDoes(vb, parsed)\n    vb.prepend(does)\n  }\n  vb.fullSentence().compute(['freeze', 'lexicon', 'preTagger', 'postTagger', 'unfreeze', 'chunks'])\n  return vb\n}\nexport default toInf\n", "import { noop, getTense, wasWere, noWill } from '../lib.js'\nconst keep = { tags: true }\n\nconst fns = {\n\n  noAux: (vb, parsed) => {\n    if (parsed.auxiliary.found) {\n      vb = vb.remove(parsed.auxiliary)\n    }\n    return vb\n  },\n\n  // walk->walked\n  simple: (vb, parsed) => {\n    const { conjugate, toInfinitive } = vb.methods.two.transform.verb\n    const root = parsed.root\n    // 'i may'\n    if (root.has('#Modal')) {\n      return vb\n    }\n    let str = root.text({ keepPunct: false })\n    str = toInfinitive(str, vb.model, getTense(root))\n    let all = conjugate(str, vb.model)\n    // 'driven' || 'drove'\n    str = all.PastTense\n    // all.Participle || all.PastTense\n    // but skip the 'is' participle..\n    str = str === 'been' ? 'was' : str\n    if (str === 'was') {\n      str = wasWere(vb, parsed)\n    }\n    if (str) {\n      vb.replace(root, str, keep)\n    }\n    return vb\n  },\n\n  both: function (vb, parsed) {\n    // 'he did not walk'\n    if (parsed.negative.found) {\n      vb.replace('will', 'did')\n      return vb\n    }\n    // 'he walked'\n    vb = fns.simple(vb, parsed)\n    vb = fns.noAux(vb, parsed)\n    return vb\n  },\n\n  hasHad: vb => {\n    vb.replace('has', 'had', keep)\n    return vb\n  },\n\n  // some verbs have this weird past-tense form\n  // drive -> driven, (!drove)\n  hasParticiple: (vb, parsed) => {\n    const { conjugate, toInfinitive } = vb.methods.two.transform.verb\n    const root = parsed.root\n    let str = root.text('normal')\n    str = toInfinitive(str, vb.model, getTense(root))\n    return conjugate(str, vb.model).Participle\n  },\n\n\n\n}\n\n\nconst forms = {\n  // walk -> walked\n  'infinitive': fns.simple,\n  // he walks -> he walked\n  'simple-present': fns.simple,\n  // he walked\n  'simple-past': noop,\n  // he will walk -> he walked\n  'simple-future': fns.both,\n\n  // he is walking\n  'present-progressive': vb => {\n    vb.replace('are', 'were', keep)\n    vb.replace('(is|are|am)', 'was', keep)\n    return vb\n  },\n  // he was walking\n  'past-progressive': noop,\n  // he will be walking\n  'future-progressive': (vb, parsed) => {\n    vb.match(parsed.root).insertBefore('was')\n    vb.remove('(will|be)')\n    return vb\n  },\n\n  // has walked -> had walked (?)\n  'present-perfect': fns.hasHad,\n  // had walked\n  'past-perfect': noop,\n  // will have walked -> had walked\n  'future-perfect': (vb, parsed) => {\n    vb.match(parsed.root).insertBefore('had')\n    if (vb.has('will')) {\n      vb = noWill(vb)\n    }\n    vb.remove('have')\n    return vb\n  },\n\n  // has been walking -> had been\n  'present-perfect-progressive': fns.hasHad,\n  // had been walking\n  'past-perfect-progressive': noop,\n  // will have been -> had\n  'future-perfect-progressive': vb => {\n    vb.remove('will')\n    vb.replace('have', 'had', keep)\n    return vb\n  },\n\n  // got walked\n  'passive-past': vb => {\n    // 'have been walked' -> 'had been walked'\n    vb.replace('have', 'had', keep)\n    return vb\n  },\n  // is being walked  -> 'was being walked'\n  'passive-present': vb => {\n    vb.replace('(is|are)', 'was', keep)\n    return vb\n  },\n  // will be walked -> had been walked\n  'passive-future': (vb, parsed) => {\n    if (parsed.auxiliary.has('will be')) {\n      vb.match(parsed.root).insertBefore('had been')\n      vb.remove('(will|be)')\n    }\n    // will have been walked -> had been walked\n    if (parsed.auxiliary.has('will have been')) {\n      vb.replace('have', 'had', keep)\n      vb.remove('will')\n    }\n    return vb\n  },\n\n  // would be walked -> 'would have been walked'\n  'present-conditional': vb => {\n    vb.replace('be', 'have been')\n    return vb\n  },\n  // would have been walked\n  'past-conditional': noop,\n\n  // is going to drink -> was going to drink\n  'auxiliary-future': vb => {\n    vb.replace('(is|are|am)', 'was', keep)\n    return vb\n  },\n  // used to walk\n  'auxiliary-past': noop,\n  // we do walk -> we did walk\n  'auxiliary-present': vb => {\n    vb.replace('(do|does)', 'did', keep)\n    return vb\n  },\n\n  // must walk -> 'must have walked'\n  'modal-infinitive': (vb, parsed) => {\n    // this modal has a clear tense\n    if (vb.has('can')) {\n      // can drive -> could drive\n      vb.replace('can', 'could', keep)\n    } else {\n      // otherwise, \n      //  walk -> have walked\n      //  drive -> have driven\n      fns.simple(vb, parsed)\n      vb.match('#Modal').insertAfter('have').tag('Auxiliary')\n    }\n    return vb\n  },\n  // must have walked\n  'modal-past': noop,\n  // wanted to walk\n  'want-infinitive': vb => {\n    vb.replace('(want|wants)', 'wanted', keep)\n    vb.remove('will')\n    return vb\n  },\n  // started looking\n  'gerund-phrase': (vb, parsed) => {\n    parsed.root = parsed.root.not('#Gerund$')\n    fns.simple(vb, parsed)\n    noWill(vb)\n    return vb\n  },\n}\n\nconst toPast = function (vb, parsed, form) {\n  // console.log(form)\n  if (forms.hasOwnProperty(form)) {\n    vb = forms[form](vb, parsed)\n    vb.fullSentence().compute(['tagger', 'chunks'])\n    return vb\n  }\n  // do nothing i guess?\n  return vb\n}\nexport default toPast\n", "import { noop, getTense, getSubject } from '../lib.js'\n\nconst haveHas = function (vb, parsed) {\n  let subj = getSubject(vb, parsed)\n  let m = subj.subject\n  if (m.has('(i|we|you)')) {\n    return 'have'\n  }\n  // the dog has\n  if (subj.plural === false) {\n    return 'has'\n  }\n  // spencer has\n  if (m.has('he') || m.has('she') || m.has('#Person')) {\n    return 'has'\n  }\n  return 'have'\n}\n\n// walk-> has walked\nconst simple = (vb, parsed) => {\n  const { conjugate, toInfinitive } = vb.methods.two.transform.verb\n  const { root, auxiliary } = parsed\n  // 'i may'\n  if (root.has('#Modal')) {\n    return vb\n  }\n  let str = root.text({ keepPunct: false })\n  str = toInfinitive(str, vb.model, getTense(root))\n  let all = conjugate(str, vb.model)\n  // 'driven' || 'drove'\n  str = all.Participle || all.PastTense\n\n  if (str) {\n    vb = vb.replace(root, str)\n    // 'have/had/has eaten'\n    let have = haveHas(vb, parsed)\n    vb.prepend(have).match(have).tag('Auxiliary')\n    vb.remove(auxiliary)\n  }\n\n  return vb\n}\n\n\n\nconst forms = {\n  // walk -> walked\n  'infinitive': simple,\n  // he walks -> he walked\n  'simple-present': simple,\n  // he walked\n  // 'simple-past': noop,\n  // he will walk -> he walked\n  'simple-future': (vb, parsed) => vb.replace('will', haveHas(vb, parsed)),\n\n  // he is walking\n  // 'present-progressive': noop,\n  // he was walking\n  // 'past-progressive': noop,\n  // he will be walking\n  // 'future-progressive': noop,\n\n  // has walked -> had walked (?)\n  'present-perfect': noop,\n  // had walked\n  'past-perfect': noop,\n  // will have walked -> had walked\n  'future-perfect': (vb, parsed) => vb.replace('will have', haveHas(vb, parsed)),\n\n  // has been walking -> had been\n  'present-perfect-progressive': noop,\n  // had been walking\n  'past-perfect-progressive': noop,\n  // will have been -> had\n  'future-perfect-progressive': noop,\n\n  // got walked\n  // 'passive-past': noop,\n  // is being walked  -> 'was being walked'\n  // 'passive-present': noop,\n  // will be walked -> had been walked\n  // 'passive-future': noop,\n\n  // would be walked -> 'would have been walked'\n  // 'present-conditional': noop,\n  // would have been walked\n  // 'past-conditional': noop,\n\n  // is going to drink -> was going to drink\n  // 'auxiliary-future': noop,\n  // used to walk\n  // 'auxiliary-past': noop,\n  // we do walk -> we did walk\n  // 'auxiliary-present': noop,\n\n  // must walk -> 'must have walked'\n  // 'modal-infinitive': noop,\n  // must have walked\n  // 'modal-past': noop,\n  // wanted to walk\n  // 'want-infinitive': noop,\n  // started looking\n  // 'gerund-phrase': noop,\n}\n\nconst toPast = function (vb, parsed, form) {\n  // console.log(form)\n  if (forms.hasOwnProperty(form)) {\n    vb = forms[form](vb, parsed)\n    vb.fullSentence().compute(['tagger', 'chunks'])\n    return vb\n  }\n  // do the simple form\n  vb = simple(vb, parsed, form)\n  vb.fullSentence().compute(['tagger', 'chunks'])\n  // do nothing, then\n  return vb\n}\nexport default toPast\n", "import { noop, isPlural, isAreAm, doDoes, getSubject, toInf, getTense } from '../lib.js'\nconst keep = { tags: true }\n\n// walk->walked\nconst simple = (vb, parsed) => {\n  const { conjugate, toInfinitive } = vb.methods.two.transform.verb\n  const root = parsed.root\n  let str = root.text('normal')\n  str = toInfinitive(str, vb.model, getTense(root))\n  // 'i walk' vs 'he walks'\n  if (isPlural(vb, parsed) === false) {\n    str = conjugate(str, vb.model).PresentTense\n  }\n  // handle copula\n  if (root.has('#Copula')) {\n    str = isAreAm(vb, parsed)\n  }\n  if (str) {\n    vb = vb.replace(root, str, keep)\n    vb.not('#Particle').tag('PresentTense')\n  }\n  // vb.replace('not ' + str, str + ' not')\n  return vb\n}\n\nconst toGerund = (vb, parsed) => {\n  const { conjugate, toInfinitive } = vb.methods.two.transform.verb\n  const root = parsed.root\n  let str = root.text('normal')\n  str = toInfinitive(str, vb.model, getTense(root))\n  // 'i walk' vs 'he walks'\n  if (isPlural(vb, parsed) === false) {\n    str = conjugate(str, vb.model).Gerund\n  }\n  if (str) {\n    vb = vb.replace(root, str, keep)\n    vb.not('#Particle').tag('Gerund')\n  }\n  return vb\n}\n\nconst vbToInf = (vb, parsed) => {\n  const { toInfinitive } = vb.methods.two.transform.verb\n  const root = parsed.root\n  let str = parsed.root.text('normal')\n  str = toInfinitive(str, vb.model, getTense(root))\n  if (str) {\n    vb = vb.replace(parsed.root, str, keep)\n  }\n  return vb\n}\n\n\n\nconst forms = {\n  // walk\n  'infinitive': simple,\n  // he walks -> he walked\n  'simple-present': (vb, parsed) => {\n    const { conjugate } = vb.methods.two.transform.verb\n    let { root } = parsed\n    // is it *only* a infinitive? - 'we buy' etc\n    if (root.has('#Infinitive')) {\n      let subj = getSubject(vb, parsed)\n      let m = subj.subject\n      if (isPlural(vb, parsed) || m.has('i')) {\n        // keep it infinitive\n        return vb\n      }\n      let str = root.text('normal')\n      let pres = conjugate(str, vb.model).PresentTense\n      if (str !== pres) {\n        vb.replace(root, pres, keep)\n      }\n    } else {\n      return simple(vb, parsed)\n    }\n    return vb\n  },\n  // he walked\n  'simple-past': simple,\n  // he will walk -> he walked\n  'simple-future': (vb, parsed) => {\n    const { root, auxiliary } = parsed\n    // handle 'will be'\n    if (auxiliary.has('will') && root.has('be')) {\n      let str = isAreAm(vb, parsed)\n      vb.replace(root, str)\n      vb = vb.remove('will')\n      vb.replace('not ' + str, str + ' not')\n    } else {\n      simple(vb, parsed)\n      vb = vb.remove('will')\n    }\n    return vb\n  },\n\n  // is walking ->\n  'present-progressive': noop,\n  // was walking -> is walking\n  'past-progressive': (vb, parsed) => {\n    let str = isAreAm(vb, parsed)\n    return vb.replace('(were|was)', str, keep)\n  },\n  // will be walking -> is walking\n  'future-progressive': vb => {\n    vb.match('will').insertBefore('is')\n    vb.remove('be')\n    return vb.remove('will')\n  },\n\n  // has walked ->  (?)\n  'present-perfect': (vb, parsed) => {\n    simple(vb, parsed)\n    vb = vb.remove('(have|had|has)')\n    return vb\n  },\n\n  // had walked -> has walked\n  'past-perfect': (vb, parsed) => {\n    // not 'we has walked'\n    let subj = getSubject(vb, parsed)\n    let m = subj.subject\n    if (isPlural(vb, parsed) || m.has('i')) {\n      vb = toInf(vb, parsed)// we walk\n      vb.remove('had')\n      return vb\n    }\n    vb.replace('had', 'has', keep)\n    return vb\n  },\n  // will have walked -> has walked\n  'future-perfect': vb => {\n    vb.match('will').insertBefore('has')\n    return vb.remove('have').remove('will')\n  },\n\n  // has been walking\n  'present-perfect-progressive': noop,\n  // had been walking\n  'past-perfect-progressive': vb => vb.replace('had', 'has', keep),\n  // will have been -> has been\n  'future-perfect-progressive': vb => {\n    vb.match('will').insertBefore('has')\n    return vb.remove('have').remove('will')\n  },\n\n  // got walked -> is walked\n  // was walked -> is walked\n  // had been walked -> is walked\n  'passive-past': (vb, parsed) => {\n    let str = isAreAm(vb, parsed)\n    if (vb.has('(had|have|has)') && vb.has('been')) {\n      vb.replace('(had|have|has)', str, keep)\n      vb.replace('been', 'being')\n      return vb\n    }\n    return vb.replace('(got|was|were)', str)\n  },\n  // is being walked  ->\n  'passive-present': noop,\n  // will be walked -> is being walked\n  'passive-future': vb => {\n    vb.replace('will', 'is')\n    return vb.replace('be', 'being')\n  },\n\n  // would be walked ->\n  'present-conditional': noop,\n  // would have been walked ->\n  'past-conditional': vb => {\n    vb.replace('been', 'be')\n    return vb.remove('have')\n  },\n\n  // is going to drink -> is drinking\n  'auxiliary-future': (vb, parsed) => {\n    toGerund(vb, parsed)\n    vb.remove('(going|to)')\n    return vb\n  },\n  // used to walk -> is walking\n  // did walk -> is walking\n  'auxiliary-past': (vb, parsed) => {\n    // 'did provide' -> 'does provide'\n    if (parsed.auxiliary.has('did')) {\n      let str = doDoes(vb, parsed)\n      vb.replace(parsed.auxiliary, str)\n      return vb\n    }\n    toGerund(vb, parsed)\n    vb.replace(parsed.auxiliary, 'is')\n    return vb\n  },\n  // we do walk ->\n  'auxiliary-present': noop,\n\n  // must walk -> 'must have walked'\n  'modal-infinitive': noop,\n  // must have walked\n  'modal-past': (vb, parsed) => {\n    vbToInf(vb, parsed)\n    return vb.remove('have')\n  },\n  // started looking\n  'gerund-phrase': (vb, parsed) => {\n    parsed.root = parsed.root.not('#Gerund$')\n    simple(vb, parsed)\n    return vb.remove('(will|have)')\n  },\n  // wanted to walk\n  'want-infinitive': (vb, parsed) => {\n    let str = 'wants'\n    if (isPlural(vb, parsed)) {\n      str = 'want'//we want\n    }\n    vb.replace('(want|wanted|wants)', str, keep)\n    vb.remove('will')\n    return vb\n  },\n}\n\nconst toPresent = function (vb, parsed, form) {\n  // console.log(form)\n  if (forms.hasOwnProperty(form)) {\n    vb = forms[form](vb, parsed)\n    vb.fullSentence().compute(['tagger', 'chunks'])\n    return vb\n  }\n  return vb\n}\nexport default toPresent\n", "import { noop, getTense } from '../lib.js'\nconst keep = { tags: true }\n\nconst simple = (vb, parsed) => {\n  const { toInfinitive } = vb.methods.two.transform.verb\n  const { root, auxiliary } = parsed\n  // 'i may'\n  if (root.has('#Modal')) {\n    return vb\n  }\n  let str = root.text('normal')\n  str = toInfinitive(str, vb.model, getTense(root))\n  if (str) {\n    vb = vb.replace(root, str, keep)\n    vb.not('#Particle').tag('Verb')\n  }\n  vb.prepend('will').match('will').tag('Auxiliary')\n  vb.remove(auxiliary)\n  return vb\n}\n\n// 'will be walking'\nconst progressive = (vb, parsed) => {\n  const { conjugate, toInfinitive } = vb.methods.two.transform.verb\n  const { root, auxiliary } = parsed\n  let str = root.text('normal')\n  str = toInfinitive(str, vb.model, getTense(root))\n  if (str) {\n    str = conjugate(str, vb.model).Gerund\n    vb.replace(root, str, keep)\n    vb.not('#Particle').tag('PresentTense')\n  }\n  vb.remove(auxiliary)\n  vb.prepend('will be').match('will be').tag('Auxiliary')\n  return vb\n}\n\nconst forms = {\n  // walk ->\n  'infinitive': simple,\n  // he walks ->\n  'simple-present': simple,\n  // he walked\n  'simple-past': simple,\n  // he will walk ->\n  'simple-future': noop,\n\n  // is walking ->\n  'present-progressive': progressive,\n  // was walking ->\n  'past-progressive': progressive,\n  // will be walking ->\n  'future-progressive': noop,\n\n  // has walked ->\n  'present-perfect': (vb) => {\n    vb.match('(have|has)').replaceWith('will have')\n    return vb\n  },\n  // had walked ->\n  'past-perfect': vb => vb.replace('(had|has)', 'will have'),\n  // will have walked ->\n  'future-perfect': noop,\n\n  // has been walking\n  'present-perfect-progressive': vb => vb.replace('has', 'will have'),\n  // had been walking\n  'past-perfect-progressive': vb => vb.replace('had', 'will have'),\n  // will have been ->\n  'future-perfect-progressive': noop,\n\n  // got walked ->\n  // was walked ->\n  // was being walked ->\n  // had been walked ->\n  'passive-past': vb => {\n    if (vb.has('got')) {\n      return vb.replace('got', 'will get')\n    }\n    if (vb.has('(was|were)')) {\n      vb.replace('(was|were)', 'will be')\n      return vb.remove('being')\n    }\n    if (vb.has('(have|has|had) been')) {\n      return vb.replace('(have|has|had) been', 'will be')\n    }\n    return vb\n  },\n  // is being walked  ->\n  'passive-present': vb => {\n    vb.replace('being', 'will be')\n    vb.remove('(is|are|am)')\n    return vb\n  },\n  // will be walked ->\n  'passive-future': noop,\n  // would be walked ->\n  'present-conditional': vb => vb.replace('would', 'will'),\n  // would have been walked ->\n  'past-conditional': vb => vb.replace('would', 'will'),\n\n  // is going to drink ->\n  'auxiliary-future': noop,\n  // used to walk -> is walking\n  // did walk -> is walking\n  'auxiliary-past': vb => {\n    if (vb.has('used') && vb.has('to')) {\n      vb.replace('used', 'will')\n      return vb.remove('to')\n    }\n    vb.replace('did', 'will')\n    return vb\n  },\n  // we do walk ->\n  // he does walk ->\n  'auxiliary-present': vb => {\n    return vb.replace('(do|does)', 'will')\n  },\n\n  // must walk ->\n  'modal-infinitive': noop,\n  // must have walked\n  'modal-past': noop,\n  // started looking\n  'gerund-phrase': (vb, parsed) => {\n    parsed.root = parsed.root.not('#Gerund$')\n    simple(vb, parsed)\n    return vb.remove('(had|have)')\n  },\n  // wanted to walk\n  'want-infinitive': vb => {\n    vb.replace('(want|wants|wanted)', 'will want')\n    return vb\n  },\n}\n\nconst toFuture = function (vb, parsed, form) {\n  // console.log(form)\n  // is it already future-tense?\n  if (vb.has('will') || vb.has('going to')) {\n    return vb\n  }\n  if (forms.hasOwnProperty(form)) {\n    vb = forms[form](vb, parsed)\n    vb.fullSentence().compute(['tagger', 'chunks'])\n    return vb\n  }\n  return vb\n}\nexport default toFuture\n", "import { getTense, isAreAm } from '../lib.js'\nconst keep = { tags: true }\n\n// all verb forms are the same\nconst toGerund = function (vb, parsed) {\n  // console.log(form)\n  const { toInfinitive, conjugate } = vb.methods.two.transform.verb\n  const { root, auxiliary } = parsed\n  if (vb.has('#Gerund')) {\n    return vb\n  }\n\n  // conjugate '-ing' verb\n  let str = root.text('normal')\n  str = toInfinitive(str, vb.model, getTense(root))\n  let gerund = conjugate(str, vb.model).Gerund\n  // 'are walking', 'is walking'\n  if (gerund) {\n    let aux = isAreAm(vb, parsed)\n    vb.replace(root, gerund, keep)\n    vb.remove(auxiliary)\n    vb.prepend(aux)//.match(aux)\n  }\n  // remove any existing auxiliary\n  // if (auxiliary.found) {\n  // vb.match(auxiliary).debug()\n  // vb.remove(auxiliary)\n  // }\n\n  vb.replace('not is', 'is not')\n  vb.replace('not are', 'are not')\n  vb.fullSentence().compute(['tagger', 'chunks'])\n  return vb\n}\nexport default toGerund\n", "import { doDoes, toInf } from '../lib.js'\nconst keep = { tags: true }\n\n// do/does not walk \nconst doesNot = function (vb, parsed) {\n  let does = doDoes(vb, parsed)\n  vb.prepend(does + ' not')\n  return vb\n}\n\nconst isWas = function (vb) {\n  // not be\n  let m = vb.match('be')\n  if (m.found) {\n    m.prepend('not')\n    return vb\n  }\n  // will not\n  m = vb.match('(is|was|am|are|will|were)')\n  if (m.found) {\n    m.append('not')\n    return vb\n  }\n  return vb\n}\n\nconst hasCopula = (vb) => vb.has('(is|was|am|are|will|were|be)')\n\n//vaguely, turn 'he is cool' into 'he is not cool'\nconst forms = {\n\n\n  // he walks' -> 'he does not walk'\n  'simple-present': (vb, parsed) => {\n    // is/was\n    if (hasCopula(vb) === true) {\n      return isWas(vb, parsed)\n    }\n    // he walk\n    vb = toInf(vb, parsed)\n    // does not \n    vb = doesNot(vb, parsed)\n    return vb\n  },\n  // 'he walked' -> 'he did not walk'\n  'simple-past': (vb, parsed) => {\n    // is/was\n    if (hasCopula(vb) === true) {\n      return isWas(vb, parsed)\n    }\n    // he walk\n    vb = toInf(vb, parsed)\n    // vb.debug()\n    // did not walk\n    vb.prepend('did not')\n    return vb\n  },\n\n  // walk! -> 'do not walk'\n  'imperative': (vb) => {\n    vb.prepend('do not')\n    return vb\n  },\n  // walk -> does not walk\n  'infinitive': (vb, parsed) => {\n    if (hasCopula(vb) === true) {\n      return isWas(vb, parsed)\n    }\n    return doesNot(vb, parsed)\n  },\n\n  'passive-past': (vb) => {\n    // got walked -> did not get walked\n    if (vb.has('got')) {\n      vb.replace('got', 'get', keep)\n      vb.prepend('did not')\n      return vb\n    }\n    // was walked, were walked\n    // was being walked\n    // had been walked, have been eaten\n    let m = vb.match('(was|were|had|have)')\n    if (m.found) {\n      m.append('not')\n    }\n    return vb\n  },\n  'auxiliary-past': (vb) => {\n    // used to walk\n    if (vb.has('used')) {\n      vb.prepend('did not')\n      return vb\n    }\n    // he did walk\n    let m = vb.match('(did|does|do)')\n    if (m.found) {\n      m.append('not')\n    }\n    return vb\n  },\n\n  // wants to walk\n  'want-infinitive': (vb, parsed) => {\n    // does not \n    vb = doesNot(vb, parsed)\n    // want\n    vb = vb.replace('wants', 'want', keep)\n    return vb\n  },\n\n}\n\nconst toNegative = function (vb, parsed, form) {\n  // console.log(form)\n  if (vb.has('#Negative')) {\n    return vb\n  }\n  if (forms.hasOwnProperty(form)) {\n    vb = forms[form](vb, parsed)\n    return vb\n  }\n\n  // 'not be'\n  let m = vb.matchOne('be')\n  if (m.found) {\n    m.prepend('not')\n    return vb\n  }\n  // is/was not\n  if (hasCopula(vb) === true) {\n    return isWas(vb, parsed)\n  }\n\n  // 'would not'\n  m = vb.matchOne('(will|had|have|has|did|does|do|#Modal)')\n  if (m.found) {\n    m.append('not')\n    return vb\n  }\n  // do nothing i guess?\n  return vb\n}\nexport default toNegative", "import find from '../find.js'\nimport toJSON from './toJSON.js'\nimport parseVerb from './parse/index.js'\nimport toInf from './conjugate/toInfinitive.js'\nimport toPast from './conjugate/toPast.js'\nimport toParticiple from './conjugate/toParticiple.js'\nimport toPresent from './conjugate/toPresent.js'\nimport toFuture from './conjugate/toFuture.js'\nimport toGerund from './conjugate/toGerund.js'\nimport getSubject from './parse/getSubject.js'\nimport getGrammar from './parse/grammar/index.js'\nimport toNegative from './conjugate/toNegative.js'\nimport { getTense } from './lib.js'\n\n\nconst api = function (View) {\n  class Verbs extends View {\n    constructor(document, pointer, groups) {\n      super(document, pointer, groups)\n      this.viewType = 'Verbs'\n    }\n    parse(n) {\n      return this.getNth(n).map(parseVerb)\n    }\n    json(opts, n) {\n      let m = this.getNth(n)\n      let arr = m.map(vb => {\n        let json = vb.toView().json(opts)[0] || {}\n        json.verb = toJSON(vb)\n        return json\n      }, [])\n      return arr\n    }\n    subjects(n) {\n      return this.getNth(n).map(vb => {\n        let parsed = parseVerb(vb)\n        return getSubject(vb, parsed).subject\n      })\n    }\n    adverbs(n) {\n      return this.getNth(n).map(vb => vb.match('#Adverb'))\n    }\n    isSingular(n) {\n      return this.getNth(n).filter(vb => {\n        return getSubject(vb).plural !== true\n      })\n    }\n    isPlural(n) {\n      return this.getNth(n).filter(vb => {\n        return getSubject(vb).plural === true\n      })\n    }\n    isImperative(n) {\n      return this.getNth(n).filter(vb => vb.has('#Imperative'))\n    }\n    toInfinitive(n) {\n      return this.getNth(n).map(vb => {\n        let parsed = parseVerb(vb)\n        let info = getGrammar(vb, parsed)\n        return toInf(vb, parsed, info.form)\n      })\n    }\n    toPresentTense(n) {\n      return this.getNth(n).map(vb => {\n        let parsed = parseVerb(vb)\n        let info = getGrammar(vb, parsed)\n        if (info.isInfinitive) {\n          return vb\n        }\n        return toPresent(vb, parsed, info.form)\n      })\n    }\n    toPastTense(n) {\n      return this.getNth(n).map(vb => {\n        let parsed = parseVerb(vb)\n        let info = getGrammar(vb, parsed)\n        if (info.isInfinitive) {\n          return vb\n        }\n        return toPast(vb, parsed, info.form)\n      })\n    }\n    toFutureTense(n) {\n      return this.getNth(n).map(vb => {\n        let parsed = parseVerb(vb)\n        let info = getGrammar(vb, parsed)\n        if (info.isInfinitive) {\n          return vb\n        }\n        return toFuture(vb, parsed, info.form)\n      })\n    }\n    toGerund(n) {\n      return this.getNth(n).map(vb => {\n        let parsed = parseVerb(vb)\n        let info = getGrammar(vb, parsed)\n        if (info.isInfinitive) {\n          return vb\n        }\n        return toGerund(vb, parsed, info.form)\n      })\n    }\n    toPastParticiple(n) {\n      return this.getNth(n).map(vb => {\n        let parsed = parseVerb(vb)\n        let info = getGrammar(vb, parsed)\n        if (info.isInfinitive) {\n          return vb\n        }\n        return toParticiple(vb, parsed, info.form)\n      })\n    }\n    conjugate(n) {\n      const { conjugate, toInfinitive } = this.world.methods.two.transform.verb\n      return this.getNth(n).map(vb => {\n        let parsed = parseVerb(vb)\n        let info = getGrammar(vb, parsed)\n        // allow imperatives like 'go!' to be conjugated here (only)\n        if (info.form === 'imperative') {\n          info.form = 'simple-present'\n        }\n        let inf = parsed.root.text('normal')\n        if (!parsed.root.has('#Infinitive')) {\n          let tense = getTense(parsed.root)\n          inf = toInfinitive(inf, vb.model, tense) || inf\n        }\n        return conjugate(inf, vb.model)\n      }, [])\n    }\n\n    /** return only verbs with 'not'*/\n    isNegative() {\n      return this.if('#Negative')\n    }\n    /**  return only verbs without 'not'*/\n    isPositive() {\n      return this.ifNo('#Negative')\n    }\n    /** remove 'not' from these verbs */\n    toPositive() {\n      let m = this.match('do not #Verb')\n      if (m.found) {\n        m.remove('do not')\n      }\n      return this.remove('#Negative')\n    }\n    toNegative(n) {\n      return this.getNth(n).map(vb => {\n        let parsed = parseVerb(vb)\n        let info = getGrammar(vb, parsed)\n        return toNegative(vb, parsed, info.form)\n      })\n    }\n    // overloaded - keep Verb class\n    update(pointer) {\n      let m = new Verbs(this.document, pointer)\n      m._cache = this._cache // share this full thing\n      return m\n    }\n  }\n  Verbs.prototype.toPast = Verbs.prototype.toPastTense\n  Verbs.prototype.toPresent = Verbs.prototype.toPresentTense\n  Verbs.prototype.toFuture = Verbs.prototype.toFutureTense\n\n  View.prototype.verbs = function (n) {\n    let vb = find(this)\n    vb = vb.getNth(n)\n    return new Verbs(this.document, vb.pointer)\n  }\n}\nexport default api\n", "import api from './api/api.js'\n\nexport default {\n  api,\n}\n", "\n// borrow a reference from another pronoun\n// 'mike is tall, [he] climbs and [he] swims'\nconst findChained = function (want, s) {\n  let m = s.match(want)\n  if (m.found) {\n    let ref = m.pronouns().refersTo()\n    if (ref.found) {\n      return ref\n    }\n  }\n  return s.none()\n}\n\nconst prevSentence = function (m) {\n  if (!m.found) {\n    return m\n  }\n  let [n] = m.fullPointer[0]\n  if (n && n > 0) {\n    return m.update([[n - 1]])\n  }\n  return m.none()\n}\nexport { prevSentence, findChained }", "import { findChained } from './lib.js'\n\n// only filter if we know a gender\n// ambiguous names like 'jamie smith' will refer to either he or she\nconst byGender = function (ppl, gender) {\n  if (gender === 'm') {\n    return ppl.filter(m => !m.presumedFemale().found)\n  } else if (gender === 'f') {\n    return ppl.filter(m => !m.presumedMale().found)\n  }\n  return ppl\n}\n\n\nconst getPerson = function (s, gender) {\n  // look at current sentence\n  let people = s.people()\n  people = byGender(people, gender)\n  if (people.found) {\n    return people.last()\n  }\n  // non-named people, like 'the cowboy'\n  people = s.nouns('#Actor')\n  if (people.found) {\n    return people.last()\n  }\n  // existing pronouns\n  if (gender === 'f') {\n    return findChained('(she|her|hers)', s)\n  }\n  if (gender === 'm') {\n    return findChained('(he|him|his)', s)\n  }\n  return s.none()\n}\n\nexport default getPerson\n", "import { findChained } from './lib.js'\n\n// find best reference for 'they' & 'their'\nconst getThey = function (s) {\n  let nouns = s.nouns()\n\n  // 'the bananas'\n  let things = nouns.isPlural().notIf('#Pronoun')\n  if (things.found) {\n    return things.last()\n  }\n  // re-use existing pronoun reference\n  let chain = findChained('(they|their|theirs)', s)\n  if (chain.found) {\n    return chain\n  }\n\n  // they can also refer to a singular noun\n  // \"the restaurant sold their food\"\n  // \"a choir sang their song\"\n\n  // somebody shaved their head\n  things = nouns.match('(somebody|nobody|everybody|anybody|someone|noone|everyone|anyone)')\n  if (things.found) {\n    return things.last()\n  }\n  return s.none()\n}\n\n\nexport default getThey", "import getPerson from './findPerson.js'\nimport getThey from './findThey.js'\n// import getIt from './findIt.js'\nimport { prevSentence } from './lib.js'\n\nconst addReference = function (pron, m) {\n  if (m && m.found) {\n    // add reference on the pronoun\n    let term = pron.docs[0][0]//pronouns are 1 word only\n    term.reference = m.ptrs[0]\n  }\n}\n\nconst stepBack = function (m, cb) {\n  // 1st - in same sentence\n  let s = m.before()\n  let res = cb(s)\n  if (res.found) {\n    return res\n  }\n  // 2nd - previous sentence\n  s = prevSentence(m)\n  res = cb(s)\n  if (res.found) {\n    return res\n  }\n  // 3rd - two sentences back\n  s = prevSentence(s)\n  res = cb(s)\n  if (res.found) {\n    return res\n  }\n  return m.none()\n}\n\nconst coreference = function (view) {\n  let pronouns = view.pronouns().if('(he|him|his|she|her|hers|they|their|theirs|it|its)')\n  pronouns.forEach(pron => {\n    let res = null\n    // connect pronoun to its reference\n    if (pron.has('(he|him|his)')) {\n      res = stepBack(pron, (m) => getPerson(m, 'm'))\n    } else if (pron.has('(she|her|hers)')) {\n      res = stepBack(pron, (m) => getPerson(m, 'f'))\n    } else if (pron.has('(they|their|theirs)')) {\n      res = stepBack(pron, getThey)\n    }\n    if (res && res.found) {\n      addReference(pron, res)\n    }\n  })\n}\nexport default coreference", "const api = function (View) {\n\n  class Pronouns extends View {\n    constructor(document, pointer, groups) {\n      super(document, pointer, groups)\n      this.viewType = 'Pronouns'\n    }\n    hasReference() {\n      this.compute('coreference')\n      return this.filter(m => {\n        let term = m.docs[0][0]\n        return term.reference\n      })\n    }\n    // get the noun-phrase this pronoun refers to\n    refersTo() {\n      //calculate links\n      this.compute('coreference')\n      // return them\n      return this.map(m => {\n        if (!m.found) {\n          return m.none()\n        }\n        let term = m.docs[0][0]\n        if (term.reference) {\n          return m.update([term.reference])\n        }\n        return m.none()\n      })\n    }\n    // overloaded - keep Numbers class\n    update(pointer) {\n      let m = new Pronouns(this.document, pointer)\n      m._cache = this._cache // share this full thing\n      return m\n    }\n  }\n\n  View.prototype.pronouns = function (n) {\n    let m = this.match('#Pronoun')\n    m = m.getNth(n)\n    return new Pronouns(m.document, m.pointer)\n  }\n}\nexport default api\n", "import coreference from './compute/index.js'\nimport api from './api/pronouns.js'\n\nexport default {\n  compute: { coreference },\n  api\n}", "import nlp from './two.js'\nimport adjectives from './3-three/adjectives/plugin.js'\nimport adverbs from './3-three/adverbs/plugin.js'\nimport chunker from './3-three/chunker/plugin.js'\nimport misc from './3-three/misc/plugin.js'\nimport normalize from './3-three/normalize/plugin.js'\nimport nouns from './3-three/nouns/plugin.js'\nimport numbers from './3-three/numbers/plugin.js'\nimport redact from './3-three/redact/plugin.js'\nimport sentences from './3-three/sentences/plugin.js'\nimport topics from './3-three/topics/plugin.js'\nimport verbs from './3-three/verbs/plugin.js'\nimport coreference from './3-three/coreference/plugin.js'\n\nnlp.plugin(adjectives) //\nnlp.plugin(adverbs) //\nnlp.plugin(chunker) //\nnlp.plugin(coreference)\nnlp.plugin(misc) //\nnlp.plugin(normalize) //\nnlp.plugin(nouns) //\nnlp.plugin(numbers) //\nnlp.plugin(redact) //\nnlp.plugin(sentences) //\nnlp.plugin(topics) //\nnlp.plugin(verbs) //\n\nexport default nlp\n"],
  "mappings": "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A,IACN,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA;AAAA,IACN,MAAM;AAAA;AAAA,IACN,MAAM;AAAA;AAAA;AAAA,IAEN,MAAM;AAAA;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,EACR;AAAA,EACA;AAAA;AAAA,IAEE,OAAO;AAAA,IACP,OAAO;AAAA,IACP,OAAO;AAAA,IACP,OAAO;AAAA,IACP,OAAO;AAAA,IACP,OAAO;AAAA,IACP,OAAO;AAAA,IACP,OAAO;AAAA,IACP,OAAO;AAAA,IACP,OAAO;AAAA,IACP,OAAO;AAAA,IACP,OAAO;AAAA,IACP,OAAO;AAAA,IACP,OAAO;AAAA,IACP,OAAO;AAAA,IACP,OAAO;AAAA,IACP,OAAO;AAAA,IACP,OAAO;AAAA,IACP,OAAO;AAAA,IACP,OAAO;AAAA,IACP,OAAO;AAAA,IACP,OAAO;AAAA,IACP,OAAO;AAAA,IACP,OAAO;AAAA,IACP,OAAO;AAAA,IAC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",
  "names": ["world", "compute", "i", "out", "all", "n", "r", "n", "m", "k", "i", "min", "max", "a", "t", "methods", "a", "n", "start", "end", "m", "cache", "i", "methods", "model", "plugin", "m", "k", "world", "View", "nlp", "methods", "compute", "hooks", "env", "isObject", "isArray", "o", "a", "View", "world", "methods", "document", "compute", "plugin", "cache", "t", "methods_default", "methods", "View", "compute_default", "compute_default", "methods_default", "t", "i", "index", "hasSpace", "hasDash", "end", "start", "n", "n", "i", "r", "m", "isArray", "world", "methods", "i", "n", "fns", "fns", "isTitleCase", "toTitleCase", "toLowerCase", "keep", "m", "out", "a", "i", "match", "n", "start", "end", "i", "n", "i", "methods", "indexN", "self", "remove_default", "methods", "start", "end", "t", "i", "hasHyphen", "a", "o", "a", "n", "t", "o", "m", "sort_default", "isArray", "end", "ptrs", "a", "a", "methods", "remove_default", "sort_default", "addAPI", "View", "api_default", "compute", "n", "i", "compute_default", "plugin_default", "api_default", "compute_default", "n", "i", "i", "before", "i", "before", "hasContraction", "i", "after", "i", "i", "world", "start", "end", "i", "list", "before", "after", "o", "k", "world", "model", "methods", "n", "contractions_default", "compute_default", "contractions_default", "compute_default", "plugin_default", "world", "model", "methods", "setTag", "i", "t", "end", "k", "compute_default", "t", "plugin_default", "compute_default", "world", "methods", "View", "world", "model", "methods", "setTag", "lexicon", "t", "end", "i", "i", "world", "model", "methods", "setTag", "lexicon", "t", "world", "i", "compute_default", "expand", "split", "methods_default", "world", "methods", "model", "k", "lex", "_multi", "model", "plugin_default", "methods_default", "compute_default", "world", "methods", "model", "t", "n", "i", "r", "s", "opts", "n", "i", "o", "start", "cache", "isObject", "api_default", "View", "opts", "list", "i", "o", "plugin_default", "api_default", "n", "fixPointers", "k", "opts", "world", "isObject", "opts", "fixPointers", "ptrs", "m", "cache", "i", "methods", "opts", "indexN", "k", "a", "n", "end", "m", "isArray", "addIds", "n", "start", "end", "methods", "m", "splitAll", "all", "o", "p", "i", "world", "i", "methods", "methods", "View", "api_default", "opts", "i", "c", "s", "split", "world", "prefixes", "i", "world", "all", "index", "i", "r", "opts", "world", "cache", "i", "i", "j", "min", "t", "length", "relative", "hasDash", "methods", "index", "length", "r", "t", "start", "t", "g", "isArray", "c", "t", "i", "g", "end", "g", "end", "t", "g", "k", "o", "start", "getGroup", "r", "k", "n", "start", "end", "i", "n", "k", "cache", "r", "i", "end", "start", "match_default", "methods", "match_default", "methods_default", "lib_default", "opts", "world", "killUnicode", "plugin_default", "api_default", "methods_default", "lib_default", "k", "start", "end", "t", "a", "out", "i", "opts", "t", "i", "s", "c", "d", "h", "j", "a", "a", "fns", "t", "i", "k", "methods", "n", "debug", "fmt", "debug_default", "m", "a", "n", "i", "t", "end", "isObject", "a", "k", "t", "o", "list", "h", "methods", "debug_default", "isObject", "fmt", "opts", "methods", "addAPI", "View", "api_default", "m", "out", "t", "model", "c", "t", "str", "out", "offset", "index", "start", "end", "k", "matches", "i", "debug", "debug_default", "plugin_default", "api_default", "debug_default", "a", "min", "max", "i", "m", "n", "start", "end", "doesMatch", "matches", "p", "a", "i", "split_default", "n", "i", "index", "start", "t", "getDoc", "end", "a", "i", "t", "methods_default", "split_default", "a", "n", "m", "split_default", "o", "a", "start", "end", "p", "h", "isArray", "getDoc", "m", "addIds", "n", "start", "methods", "addAPI", "View", "api_default", "plugin_default", "methods_default", "api_default", "lib_default", "matches", "methods", "net", "View", "net", "opts", "world", "methods", "o", "api_default", "r", "n", "matches", "world", "o", "matches", "world", "hooks", "k", "o", "hooks", "i", "k", "m", "list", "n", "runMatch", "methods", "opts", "n", "i", "m", "i", "o", "net", "methods", "opts", "model", "i", "k", "list", "world", "model", "methods", "getDoc", "setTag", "unTag", "looksPlural", "env", "t", "methods_default", "plugin_default", "lib_default", "api_default", "methods_default", "o", "tagString", "i", "isArray", "t", "world", "env", "i", "o", "canBe", "i", "canBe_default", "e", "t", "n", "r", "i", "c", "s", "c", "k", "k", "compute", "allTags", "k", "o", "methods_default", "canBe_default", "isArray", "fns", "methods", "verbose", "world", "model", "canBe", "nope", "n", "i", "View", "api_default", "addTags", "model", "methods", "lib_default", "a", "world", "plugin_default", "methods_default", "api_default", "lib_default", "all", "i", "o", "chunks", "i", "s", "chunks", "world", "isSentence", "i", "c", "m", "i", "split", "i", "split", "m", "m2", "hasSomething", "world", "i", "hasHyphen", "model", "prefixes", "suffixes", "splitHyphens", "o", "i", "i", "h", "c", "isArray", "model", "i", "hasHyphen", "splitHyphens", "s", "model", "prePunctuation", "postPunctuation", "emoticons", "i", "c", "after", "model", "whitespace_default", "world", "unicode", "s", "i", "world", "killUnicode", "parse", "world", "methods", "model", "splitSentences", "t", "parse_default", "isAcronym", "hasLetter", "methods_default", "whitespace_default", "parse_default", "lexicon", "a", "h", "k", "s", "unicode_default", "model_default", "lexicon", "unicode_default", "world", "aliases", "hasDash", "i", "t", "index", "i", "t", "index", "n", "i", "wordCount", "n", "i", "t", "i", "t", "methods", "compute_default", "plugin_default", "compute_default", "methods_default", "model_default", "prefixes", "compute_default", "api", "View", "api_default", "opts", "world", "index", "max", "prefix", "isObject", "defaults", "opts", "model", "prefixes", "lib_default", "model", "plugin_default", "api_default", "lib_default", "compute_default", "plugin_default", "prefix", "unique", "a", "i", "methods", "n", "i", "a", "k", "h", "c", "i", "n", "places", "s", "d", "self", "i", "methods", "i", "prefix", "freeze", "methods_default", "methods_default", "k", "t", "i", "m", "index", "all", "matches", "i", "unpack", "h", "s", "all", "i", "k", "misc_default", "c", "i", "model", "uncountable", "plural", "lexicon", "misc_default", "plural", "n", "g", "g", "jj", "clue", "misc", "clue", "jj", "misc", "clue", "misc", "clue", "clue", "p", "p", "clue", "p", "clue", "clues", "clues", "clues", "h", "k", "suffixes_default", "Adj", "Noun", "prefixes_default", "Adj", "Inf", "Pres", "Sing", "Past", "Actor", "Verb", "Noun", "Last", "vb", "nn", "data_default", "i", "max", "model", "out", "h", "a", "reverse", "model", "prefix", "m", "h", "k", "model", "unpack_default", "unpack_default", "data_default", "h", "h", "rules_default", "h", "k", "model", "i", "rules_default", "model", "p", "s", "nouns_default", "h", "k", "a", "model", "prefix", "prefixes", "fromPast", "fromPresent", "fromGerund", "fromParticiple", "parse", "model", "toPast", "toPresent", "toGerund", "toParticiple", "k", "all", "model", "s", "toSuperlative", "model", "toComparative", "fromComparative", "fromSuperlative", "suffixes", "max", "i", "lib_default", "s", "suffixes", "lib_default", "suffixes", "exceptions", "lib_default", "all", "model", "toSuperlative", "toComparative", "s", "fromSuperlative", "fromComparative", "nouns_default", "methods", "model", "plural", "toSuperlative", "toComparative", "all", "a", "expand", "world", "methods", "model", "split", "expand_default", "i", "start", "exceptions", "end", "methods_default", "expand_default", "model", "lexicon", "a", "tmpModel", "model", "world", "methods_default", "k", "toSuperlative", "toComparative", "expand", "expand_default", "model", "lexicon", "suffixes_default", "prefixes_default", "expand_default", "model_default", "i", "model", "world", "setTag", "i", "model", "world", "setTag", "prefix", "i", "model", "switches", "log", "i", "env", "i", "model", "k", "titleCase", "i", "model", "index", "case_default", "suffixLoop", "suffixes", "max", "i", "model", "i", "byEnd", "r", "model", "world", "setTag", "prefixes", "max", "i", "prefix", "model", "max", "i", "i", "model", "world", "setTag", "oneLetterAcronym", "periodAcronym", "noPeriodAcronym", "lowerCaseAcronym", "model", "isAcronym", "i", "a", "i", "model", "neighbours_default", "isTitleCase", "i", "world", "setTag", "t", "orgWords_default", "isTitleCase", "i", "tagOrgs", "world", "setTag", "n", "placeWords_default", "i", "model", "isTitleCase", "i", "prefix", "a", "i", "clues", "model", "world", "setTag", "switches", "world", "setTag", "t", "t", "model", "world", "i", "case_default", "neighbours_default", "orgWords_default", "placeWords_default", "methods", "n", "tagger_default", "world", "i", "k", "i", "compute_default", "tagger_default", "nouns_default", "verbs_default", "misc_default", "nouns_default", "verbs_default", "misc_default", "plugin_default", "compute_default", "methods_default", "model_default", "m", "i", "t", "titleCase", "toTitleCase", "api", "View", "isTitleCase", "t", "i", "m", "api_default", "insertContraction", "n", "i", "splice_default", "hasContraction", "i", "o", "t", "before", "hasContraction", "i", "o", "t", "_apostropheD", "before", "apostrophe_d_default", "i", "n", "apostropheT", "before", "apostrophe_t_default", "adjLike", "isPossessive", "i", "byApostrophe", "t", "i", "reTag", "start", "end", "byEnd", "apostrophe_d_default", "apostrophe_t_default", "world", "toDocs", "n", "after", "splice_default", "compute_default", "plugin_default", "compute_default", "api_default", "adj_gerund_default", "adj_noun_default", "nouns_default", "noun_gerund_default", "verbs_default", "notIf", "imperative_default", "adj_gerund_default", "misc_default", "organizations_default", "places_default", "matches", "adj_gerund_default", "adj_noun_default", "nouns_default", "noun_gerund_default", "verbs_default", "imperative_default", "misc_default", "organizations_default", "places_default", "model_default", "world", "model", "methods", "t", "m", "tagger", "compute_default", "n", "api_default", "View", "plugin", "api_default", "compute_default", "model_default", "plugin_default", "net", "cache", "i", "net", "m", "plugin_default", "m", "conjugate", "all", "vb", "m", "toAdverb", "toComparative", "toSuperlative", "api", "View", "plugin_default", "plugin_default", "toRoot", "fromComparative", "fromSuperlative", "api", "View", "opts", "toAdverb", "toNoun", "toSuperlative", "toComparative", "m", "n", "plugin_default", "toRoot", "api", "View", "n", "opts", "m", "plugin_default", "m", "matches", "n", "all", "m", "chunks_default", "api", "View", "c", "m", "n", "chunks_default", "api_default", "byWord", "n", "t", "n", "t", "neighbours_default", "net", "_", "world", "methods", "env", "n", "t", "fallback_default", "i", "c", "t", "world", "neighbours_default", "fallback_default", "compute_default", "plugin_default", "compute_default", "api_default", "hasPeriod", "api", "View", "n", "m", "acronyms_default", "hasOpen", "hasClosed", "i", "index", "find", "end", "n", "start", "m", "api", "View", "n", "m", "find", "apostropheS", "find", "m", "api", "View", "n", "pairs", "hasOpen", "hasClosed", "findEnd", "i", "find", "end", "n", "start", "strip", "m", "api", "View", "strip", "n", "m", "find", "n", "m", "aliases", "View", "a", "hasSlash", "api", "View", "m", "n", "slashes_default", "plugin_default", "View", "acronyms_default", "slashes_default", "termLoop", "methods_default", "world", "killUnicode", "split", "h", "k", "api_default", "View", "opts", "methods_default", "plugin_default", "api_default", "m", "list", "m", "i", "notPlural", "isPlural", "m", "getRoot", "m", "parse_default", "toText", "m", "toArray", "s", "toJSON", "parse_default", "m", "methods", "model", "plural", "toPlural_default", "keep", "m", "methods", "model", "toSingular", "toSingular_default", "api", "View", "n", "parse_default", "opts", "m", "methods", "toPlural_default", "toSingular_default", "api_default", "plugin_default", "api_default", "n", "m", "r", "find_default", "i", "data_default", "has", "data_default", "validate_default", "i", "data_default", "k", "parse", "has", "i", "data_default", "validate_default", "m", "mapping", "round", "n", "parse_default", "n", "p", "a", "i", "toText", "s", "a", "start", "end", "plugin", "View", "n", "parse_default", "p", "m", "find_default", "api_default", "m", "d", "find_default", "parseNumeric", "m", "prefix", "parseNumber", "parse_default", "tens", "mapping", "suffixes", "suffix_default", "fmt", "prefix", "suffix_default", "isArray", "h", "s", "p", "parse_default", "View", "n", "parse_default", "o", "opts", "p", "fmt", "m", "end", "min", "max", "find_default", "v", "api_default", "api", "View", "api_default", "plugin_default", "defaults", "opts", "plugin", "View", "plugin_default", "clauses", "m", "s", "m", "vb", "parse", "s", "clauses", "chunks", "i", "parse_default", "toPast", "s", "v", "list", "toPresent", "s", "v", "s", "vb", "m", "s", "toInfinitive", "s", "toInfinitive_default", "api", "View", "opts", "m", "grammar", "parse_default", "n", "s", "toInfinitive_default", "vb", "methods", "api_default", "plugin_default", "api_default", "find", "m", "find_default", "parse", "m", "parse_default", "m", "f", "after", "addMethod", "View", "n", "parse_default", "opts", "p", "m", "find_default", "api_default", "find", "m", "c", "find_default", "addMethod", "View", "n", "m", "find_default", "api_default", "api", "View", "n", "m", "api_default", "find", "n", "r", "m", "api", "View", "api", "View", "api_default", "plugin_default", "m", "find_default", "vb", "root_default", "vb", "vb", "root_default", "parse_default", "past", "o", "list", "k", "a", "cleanUp", "vb", "m", "grammar", "i", "before", "m", "i", "lastNoun", "vb", "isPlural", "vb", "isPlural", "m", "plural", "getTense", "toInfinitive", "toArray", "m", "opts", "s", "toText", "toInf", "toInfinitive", "getTense", "toJSON", "vb", "parse_default", "toJSON_default", "keep", "toInf", "vb", "toInfinitive", "getTense", "toInfinitive_default", "keep", "fns", "vb", "conjugate", "toInfinitive", "getTense", "all", "toPast", "toPast_default", "vb", "m", "conjugate", "toInfinitive", "getTense", "all", "forms", "toPast", "keep", "simple", "vb", "conjugate", "toInfinitive", "getTense", "isPlural", "toGerund", "forms", "m", "toPresent", "toPresent_default", "keep", "simple", "vb", "toInfinitive", "getTense", "conjugate", "forms", "toFuture", "toFuture_default", "keep", "toGerund", "vb", "toInfinitive", "conjugate", "getTense", "keep", "vb", "m", "forms", "toNegative", "api", "View", "n", "parse_default", "opts", "m", "vb", "toJSON_default", "toInfinitive_default", "toPresent_default", "toPast_default", "toFuture_default", "conjugate", "toInfinitive", "getTense", "find_default", "api_default", "plugin_default", "api_default", "s", "m", "n", "m", "s", "s", "m", "s", "compute_default", "api", "View", "m", "n", "plugin_default", "compute_default", "plugin_default"]
}
